[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Trackr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-2/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Trackr helps teaching assistants (TAs) manage the details of their students. It centers around the Command Line Interface (CLI), allowing for quick and easy management of student records."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   This application is built on the AddressBook-Level-3 project developed by SE-EDU initiative. For more information, you may wish to visit their [website](https://se-education.org)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Licence: [MIT](LICENSE)"
      }
    ],
    "authorContributionMap": {
      "fanminj": 17,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "fanminj": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Trackr is designed and developed by the [CS2013T-W12-2](https://github.com/AY2021S1-CS2103T-W12-2) team."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Juan Davin Lie"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cimg src\u003d\"images/juandavinlie.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "[[github](https://github.com/juandavinlie)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "-   Hobby: Swimming and eating"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### Sean Tay"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cimg src\u003d\"images/seantaysl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "[[github](http://github.com/seantaysl)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### Ethan Noah Rozario"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003cimg src\u003d\"images/ethanthegoondu.png\"  width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "[[github](http://github.com/ethanthegoondu)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Tan Eu Zin"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003cimg src\u003d\"images/euzintan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "[[github](http://github.com/euzintan)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   Role: Programmer   "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Jian Fanmin"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cimg src\u003d\"images/fanminj.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[[github](http://github.com/fanminj)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Role: Programmer"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "EthanTheGoondu": 4,
      "euzintan": 4,
      "fanminj": 6,
      "juandavinlie": 5,
      "-": 26
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "# **Trackr - Developer Guide**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": "by Team W12-2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Table of Contents**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 1 - Preface](#section-1---preface)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 2 - Setting up, getting started](#section-2---setting-up-getting-started)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 3 - Design](#section-3---design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.1 - High-Level Architecture](#section-31---high-level-architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.2 - UI Component](#section-32---ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.3 - Logic Component](#section-33---logic-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.4 - Model Component](#section-34---model-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.5 - Storage Component](#section-35---storage-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.6 - Common Classes](#section-36---common-classes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 4 - Implementation](#section-4---implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.1 - Add feature](#section-41---add-feature)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.2 - Undo/redo feature](#section-42---proposed-undoredo-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.3 - Data saving and loading](#section-43---data-saving-and-loading)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 5 - Documentation, logging, testing, configuration, dev-ops](#section-5---documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 6 - Appendix](#section-6---appendix)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 1 - Preface**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "This is a Developer Guide to Trackr. A student and task management system for Teaching Assistants of all faculties who want to manage their students from various modules and tutorial groups, all in one place."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 2 - Setting up, getting started**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 3 - Design**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.1 - High-Level Architecture"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.2 - UI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "The UI Component defines what the user will see and interact with while using Trackr. `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.3 - Logic component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.4 - Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   stores the Trackr data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   exposes unmodifiable `ObservableList\u003cModule\u003e`, `ObservableList\u003cTutorialGroup\u003e` and `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.5 - Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   can save the module data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Section 3.6 - Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 4 - Implementation**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.1 - Add feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The Add feature in Trackr enables users to easily add models to the app. Users will be able to keep track of models they are"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "in charge of."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "There are three types of models:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `Module`: The current module the user is teaching"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `TutorialGroup`: The tutorial groups that the user is teaching"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `Student`: The students currently being taught by the user"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Trackr contains a `UniqueList\u003cModule\u003e`, which in turn, contains the modules taught by the user. Each Add command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "for `Module`, `TutorialGroup`, and `Student` is split into `AddModuleCommand`, `AddTutorialGroupCommand`, and `AddStudentCommand`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Each command class extends `Command`. "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Given below is an example of the interaction between the Model and the `AddModuleCommand` of Trackr."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![AddModSequenceDiagram](images/AddModSequenceDiagram.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "**Aspect: List to contain the models**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- Option 1: Generic `UniqueList` that contains the models"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Pros: Abstraction, "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Cons: Harder to implement"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- Option 2: Seperate `UniqueList` for each model such as `UniqueModuleList`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Pros: Easier to implement"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Cons: More repetitive code"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.2 - \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behaviour that most modern desktop applications follow."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Pros: Easy to implement."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    itself."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.3 - Data saving and loading"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The data saving and loading mechanism is facilitated by `JsonModuleStorage`. It has the operations to save and read data written in Json format to represent modules and their attributes such as tutorial groups and students, stored internally in `StorageManager` as a `moduleStorage`. Additionally it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#getModuleFilePath()` — Obtains the file path of which the Json file representing the data is to be saved to."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#readModuleList()` — Reads the Json file found in the stores file path representing the module list and returns a ReadOnlyTrackr\u0026lt;Module\u0026gt; representing the modules saved in the Json file along with their attributes such as tutorial groups and students."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList)` — Writes the Json file representing the module list based on the `ReadOnlyTrackr\u003cModule\u003e` passed into the operation, saving the Json file representing the modules along with their attributes such as tutorial groups and students in the stored file path."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "These operations are exposed in the `ModuleStorage` interface as `ModelStorage#getModuleFilePath()`, `ModelStorage#readModuleList()` and `ModuleStorage#saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList)` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The data stored in `JsonModuleStorage` is designed in a nested manner, `JsonModuleStorage` contains `JsonSerializableModuleList` which is a class that is used by the `Jackson` class for conversion to and from the Json format. `JsonSerializableModuleList` stores a list of `JsonAdaptedModule` which stores a list of `JsonAdaptedTutorialGroup` which stores a list of `JsonAdaptedStudent` which also stores a list of `JsonAdaptedTag`. Due to the nature of this nesting all these attributes are stored in a single Json file which branches out to these attributes, stored in a file called `modulelist.json`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Saving and loading is done by the external class `JsonUtil`, who\u0027s static methods allow for the conversion of data in Json files. The methods used are:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonUtil#readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)` — Reads the Json file found at the file path, and converts it into the object of class T by using an `ObjectMapper`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonUtil#saveJsonFile(T jsonFile, Path filePath)` — Converts the object of class T into a Json file at the file path using the `FileUtil`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Given below is an example usage scenario and how the load mechanism behaves in every step."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 1. The user launches the application. The MainApp will seek for a ModuleStorage and pass it to the StorageManager who will call `readModuleList(Path filePath)` to attempt to read module data from the Json file. If the file does not already exist, a new Json file is created."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 2. The `JsonSerializableModuleList` is broken down into individual `JsonAdaptedModule` objects that are also converted into `Module` objects. To fill these modules with their identity fields such as `moduleId`, the Json file is read and the values of the fields are used to construct the `Module`. For the data fields such as the list of `TutorialGroup` objects, the list of `JsonAdaptedTutorialGroup` is converted into their corresponding class `TutorialGroup`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 3. The process is repeated in `JsonAdaptedTutorialGroup` to obtain the list of Student objects by converting `JsonAdaptedStudent` objects."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 4. Once all layers of the Json objects have been converted to their corresponding class, the module list is ready and is used by `StorageManager`, available to be used by `ModelManager` in future to display these objects in the UI."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The following activity diagram summarizes how data from the Json file is read and loaded when a user starts up the application:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "![LoadJsonActivityDiagram](images/LoadJsonActivityDiagram.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "##### Aspect: How the Json file is structured."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   **Alternative 1 (current choice):** Saves the entire module list in a single file, nesting all internal components."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Pros: Easy to implement due to abstraction allowing conversion process to be done."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Cons: Easier for file to get corrupted, and will lead to massive lost of data should data corruption occur."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   **Alternative 2:** Saving lists of modules, tutorial groups, and students in separate Json files."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Pros: Easier to test each list individually to check the Json structure of each object type, and data corruption will lead to only data in separate lists to be lost (e.g. A corrupted `TutorialGroup` list will lead to no loss in the `Module` list)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Cons: Difficult to reconstruct the Json classes into the native classes and more data required to be stored for `StorageManager` to know which objects belong to which (e.g. Which `Module` a `TutorialGroup` belongs to)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 5 - Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "euzintan"
        },
        "content": "# **Section 6 - Appendix**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   has a need to manage a significant number of students"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   prefer desktop apps over other types"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   can type fast"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   prefers typing to mouse interactions"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "**Value proposition**: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                               | I want to …​                                                          | So that I can…​                                                 |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fanminj"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------- |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | add/delete students to my list                                        | easily categorize them                                          |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | add/delete modules                                                    |                                                                 |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | rename a module                                                       | correct any errors                                              |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA who needs to contact many students | search a person by name or module                                     | get their contact details                                       |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA managing many modules              | have a checklist of the things I want to do in each tutorial          | remember what I need to cover in each tutorial                  |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | save my data                                                          | continue where I left off                                       |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | update a checklist of task such as deleting or marking a task as done | know what to do and keep track of the tasks that have been done |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fanminj"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "(For all use cases below, the **System** is the `Trackr` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC01 - Add a person**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to add a specific person to the list"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr adds the person"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC02 - Delete a person**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr deletes the person"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. The list is empty."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The given index is invalid."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC03 - Loading a save file**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1. User launches the application"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2. Trackr attempts to read the save file"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "3. Trackr successfully parses the save file and loads the lists of modules on it"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4. User can start using the application"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The save file is corrupted / in the wrong format"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a2. Trackr starts a new save file and overwrites the existing one"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Use case resumes at step 4."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3b. The save file does not exist"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3b1. Trackr creates a new save file"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Use case resumes at step 4."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC04 - Search for a person**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to search for a specific person in the list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr displays the person"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. The list is empty."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The given information is invalid."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use case resumes at 1."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC05 - Add a checklist of task**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list checklist of tasks"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of tasks"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to add a specific task to the list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr adds the task to the list"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC06 - Mark a task in the list as done**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list checklist of tasks"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of tasks"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to mark a specific task as done"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr marks the task as done"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Should be able to hold up to 1000 student details without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  The data should be stored locally so the user would not require the Internet to access his data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "fanminj"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **TA**: Teaching Assistant"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Modules**: University courses that students are enrolled in"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 24,
      "EthanTheGoondu": 41,
      "euzintan": 26,
      "fanminj": 91,
      "juandavinlie": 76,
      "-": 291
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "# Trackr - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "1. [Introduction](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "2. [About This Document](#2-about-this-document)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    2.1 [Glossary](#21-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\t2.2 [Formatting](#22-formatting)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\t2.3 [Command format](#23-command-format)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "3. [Getting Started](#3-getting-started)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.1 [Setting Up](#31-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.2 [Using Trackr](#32-using-trackr)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.3 [Switching Views](#33-switching-views)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "4. [Features](#4-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.1 [View help: `help`](#41-view-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.2 [Module features](#42-module-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.1 [View all modules: `viewMod`](#421-view-all-modules-viewmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.2 [Add a module: `addMod`](#422-add-a-module-addmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.3 [Delete a module: `deleteMod`](#423-delete-a-module-deletemod)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.4 [Find a module: `findMod`](#424-find-a-module-findmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.5 [Edit a module: `editMod` [coming in v1.4]](#425-edit-a-module-editmod-coming-in-v14)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.3 [Tutorial group features](#43-tutorial-group-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.1 [View all tutorial groups in a module: `viewTG`](#431-view-all-tutorial-groups-in-a-module-viewtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.2 [Add a tutorial group to a module: `addTG`](#432-add-a-tutorial-group-to-a-module-addtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.3 [Find a tutorial group: `findTG`](#433-find-a-tutorial-group-findtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.4 [Delete a tutorial group from a module: `deleteTG`](#434-delete-a-tutorial-group-from-a-module-deletetg)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.4 [Student features](#44-student-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.1 [View all students in a tutorial group: `viewStudent`](#441-view-all-students-in-a-tutorial-group-viewstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.2 [Add a student: `addStudent`](#442-add-a-student-addstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.3 [Delete a student: `deleteStudent`](#443-delete-a-student-deletestudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.4 [Find a student: `findStudent`](#444-find-a-student-findstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.5 [Edit a student: `editStudent` [coming in v1.4]](#445-edit-a-student-editstudent-coming-in-v14)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "5. [FAQ](#5-faq)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "6. [Command Summary](#6-command-summary)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.1 [Module commands](#61-module-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.2 [Tutorial group commands](#62-tutorial-group-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.3 [Student commands](#63-student-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "__Trackr__ is an application for teaching assistants (TAs) who prefer to use a desktop application for managing their "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "student records. It is uses a Command Line Interface (CLI), while still retaining the benefits of a Graphical User "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Interface (GUI). If you are a TA with a fast typing speed, __Trackr__ is the app for you! You can start by familiarising "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "yourself with the information regarding how this document is designed in "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[Section 2, \"About this document\"](#2-about-this-document)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 2. About this document"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Welcome to the __Trackr__ User Guide! In this document you will be able to learn the features that __Trackr__ can "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "provide to make your TA experience less troublesome. This section will provide information regarding the use of this "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "document, namely how to navigate through this document, what the technical terms mean and how to interpret the "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "formatting used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.1 Glossary"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The table below explains certain terms used in the document to describe different parts or aspects of the application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Term                           | Meaning                                                      |"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| ------------------------------ | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Graphical User Interface (GUI) | An interface through which users interact with electronic devices via visual indicator representations. |"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Command Line Interface (CLI)   | An interface that processes commands to a computer program in the form of lines of text. |"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Command                        | An instruction typed by you, the user for **Trackr** to perform. |"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Field                          | A segment of a command that requires information to be filled into. |"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Parameter                      | The information filled by you, the user, into the field of a command. |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Prefix                         | A short word that is typed right before you, the user, writes the parameter into the command. It always starts with a slash (/) and typically is an abbreviation of the name of the field. |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Tutorial Group                 | The specific class being taught under a given module.        |"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Student                        | An individual who is enrolled in a given module.             |"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.2 Formatting"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "This document is written in a manner where formatting is applied to text in order to convey different meanings. The table below will explain what these formatting uses are, what they look like, and what they mean in the context of the document."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Formatting    | Meaning                                                      |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| ------------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| `code`        | Words in \u0027code\u0027 format refer to commands (or fields in commands) that can be typed into the command line. |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| *Italics*     | Words in italics refer to example parameters, which is what you, the user could type as the parameter that needs to be provided. |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| [Underline]() | Words that are underlined refer to hyperlinks. Hyperlinks are clickable, and bring you either to different parts of this document or to external websites, for the convenience of navigating quickly to different parts of the document or the web. |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| **Bold**      | The name of the application **Trackr** is written in bold to refer to what the application does or how it responds to user input. |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.3 Command Format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Commands you provide in the command line follow specific rules. These are the rules you have to follow when typing commands for **Trackr** to read:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Words in UPPER_CASE are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. in add n/NAME, NAME is a parameter which can be used as add n/John Doe."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Items in square brackets are optional."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g n/NAME [t/TAG] can be used as n/John Doe t/friend or as n/John Doe."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Items with …  after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. [t/TAG]…  can be used as (i.e. 0 times), t/friend, t/friend t/family etc."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Parameters can be in any order."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. if the command specifies n/NAME p/PHONE_NUMBER, p/PHONE_NUMBER n/NAME is also acceptable."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "## 3. Getting Started"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.1 Setting Up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Get started by installing __Trackr__ with the following steps:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "1. Ensure you have Java 11 or above installed. The latest version of Java can be found [here](https://www.java.com/en/download/)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "2. Download the latest version of __Trackr__ [here](https://github.com/AY2021S1-CS2103T-W12-2/tp/releases). Look for the file trackr.jar."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "3. Copy the file to a folder you wish to use as your home folder for __Trackr__"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "4. Double-click trackr.jar to start the app. The GUI (Figure 3.1) should appear in a few seconds."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![Ui](images/Ui.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.1 Trackr GUI"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.2 Using Trackr"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Trackr__ boasts many useful features to make using the app seamless and smooth. These include"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "commands to add or delete modules, tutorial groups, or students you are teaching. To use a feature, simply"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "type the command into the command box (see Figure 3.2) and press _Enter_ to execute it. Further explanations of "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "all the commands are listed in [Section 4, \"Features\"](#4-features)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![CommandExample](images/CommandExample.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.2 Command example"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.3 Switching Views"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Trackr__ allows you to switch the current view from `Modules` (Figure 3.31) to `Tutorial Groups` (Figure 3.32) "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "to `Students` (Figure 3.33) depending on your current need. This is done using the commands `viewMod`, `viewTG`, and `viewStudent`. "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The correct syntax for these commands are shown in [Section 4, \"Features\"](#4-features)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![ModuleView](images/ModuleView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.31 Module View"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![TutorialGroupView](images/TutorialGroupView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.32 Tutorial Group View"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![StudentView](images/StudentView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.33 Student view"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.1 View help: `help`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows a message explaining how to access the user guide."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.2 Module features"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.1 View all modules: `viewMod`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows all the modules you have added in the Module view."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `viewModule`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003e You should perform the following features while in the Module view."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.2 Add a module: `addMod`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adds a module to the module list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `addMod MODULE_CODE`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Modules should not share the same name."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- It is recommended to use the exact code of the module."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Adds a module _CS2100_ to the module list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `addMod CS2100`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example above, the result box will display the following message:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    New module added: CS2100"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.3 Delete a module: `deleteMod`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Deletes a module based on the given `INDEX`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `deleteMod INDEX`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` refers to the index number shown in the Module view."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- Deleting a module is irreversible."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Deletes a module at index _2_ in the module list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `deleteMod 2`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example above, the result box will display the following message:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Module deleted: module at index 2"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.4 Find a module: `findMod`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Finds and lists all modules in the current Module view whose field contains any of the given keywords."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `findMod KEYWORD`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `KEYWORD` is not case-sensitive (e.g. _cs2100_ will match _CS2100_)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- The search will look for matches in the module\u0027s code."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- If no module matching the keyword is found, the Module view will be empty."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Finds a module with `KEYWORD` _cs2100_."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `findMod cs2100`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example given above, the Module view will display the modules matching the criteria:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.5 Edit a module: `editMod` [coming in v1.4]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Edits a module with the provided details."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.3 Tutorial Group features"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.1 View all Tutorial Groups in a Module: `viewTG`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can display all Tutorial Groups in a Module with this command. You can indicate which Module\u0027s Tutorial Groups to view by entering its index in the current list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `viewTG MODULE_INDEX`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where MODULE_INDEX is the target Module\u0027s index in the currently displayed Module List."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `viewTG 1`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can also use this command to return to the view of all Tutorial Groups in a Module whilst you are viewing all Students in a Tutorial Group by entering the command without an index."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `viewTG`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.2 Add a Tutorial Group to a Module: `addTG`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can add a Tutorial Group to the Module you are viewing using this command."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e You can only use this command when you are viewing all Tutorial Groups of the Module you intend to add the Tutorial Group to."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `addTG tg/TG_CODE`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example: `addTG tg/T03`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.3 Find a Tutorial Group: `findTG`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "If you need to quickly find a Tutorial from a list of Tutorials, use this command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in. "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `findTG TARGET_TG_CODE`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where TARGET_TG_CODE is the code of the Tutorial Group you want to search for."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `findTG B014`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "euzintan"
        },
        "content": "To search for a Tutorial Group with code B014"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.4 Delete a Tutorial Group from a Module: `deleteTG`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can use this command to delete a Tutorial Group you have previously added to a Module."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `deleteTG TG_INDEX`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where TG_INDEX is the index of the Tutorial Group you want to delete."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `deleteTG 2`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "euzintan"
        },
        "content": "To delete Tutorial Group with the index 2 in the currently displayed list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "euzintan"
        },
        "content": "These are the commands you can use to manage the different `Tutorial Groups` you teach. Now we look at how you can manage your `Students`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.4 Student features"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.1 View all students in a tutorial group: `viewStudent`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows all students within the given tutorial group."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `viewStudent INDEX`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` refers to the index number shown in the Tutorial Group view."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Views all students of tutorial group _T03_."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `viewStudent T03`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003e You should perform the following features while in the Student view."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.2 Add a student: `addStudent`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a student with your provided details."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `addStudent n/NAME p/PHONE_NUMBER e/EMAIL id/STUDENT_ID [t/TAG]...`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Students should not share the same name within the same tutorial group."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Phone numbers should only be 8 digits long."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- Student IDs begin and end with a fcapital letter and should have 7 digits (e.g. A1243567X)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- A student can have any number of tags, including 0."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Adds a student called _John Tan_ with phone number _81234567_, email _johntan@u.nus.edu_, student id _A1234567X_"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fanminj"
        },
        "content": "and tag _student_ to the current tutorial group in view."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fanminj"
        },
        "content": "  - `addStudent n/John Tan p/81234567 e/johntan@u.nus.edu id/A1234567X t/student`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- From the example above, the result box will display the following message:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    New student added: New student added: John Tan Phone: 81234567 Email: johntan@u.nus.edu Student ID: A1234567X "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Tags: [student]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.3 Delete a student: `deleteStudent`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Deletes a student based on the given `INDEX`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `deleteStudent INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` refers to the index number shown in the Student view."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- Deleting a student is irreversible."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Deletes the second student in the Student view."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fanminj"
        },
        "content": "  "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `deleteStudent 2`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- From the example given above, the result box will display the following message:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Deleted student: {to be implemented by this week}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.4 Find a student: `findStudent`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Finds and lists all students in the current Student view whose field contains any of the given keywords."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `findStudent KEYWORD`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `KEYWORD` is not case-sensitive (e.g. _john_ will match _John_)."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- The search will look for matches in the student\u0027s name and student ID."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- If no student matching the keyword is found, the Student view will be empty."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Finds a student with `KEYWORD` _a1234567x_."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `findStudent a1234567x`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- From the example given above, the Student view will display the students matching the criteria:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.5 Edit a student: `editStudent` [coming in v1.4]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Edits a student with the provided details."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ Why did the command I input change colour from white to red? \u003cbr\u003e "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "__A:__ This happens when the input command is of the wrong syntax or does not exist. You may go to the [Command Format](#23-command-format) to "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "view the list of commands and their accepted formats."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ How do I save my data? \u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__A:__ When you issue a new command, __Trackr__ automatically updates the local save file immediately. This ensures that"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "no data will be lost when you close the app or even in the event of a crash."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ How do I exit the app safely? \u003cbr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "__A:__ To close the app, simply click the red X on the top right for Windows users, on the top left"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "for MacOS and Linux users."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.1 Module commands"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewMod` | Views all modules in __Trackr__."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`addMod MODULE_CODE` | Adds a new module to the current Module view. "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`deleteMod INDEX` | Deletes a module from the current Module view. "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`findMod KEYWORD` | Finds module(s) that contain the keyword in the current Module view. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.2 Tutorial Group commands"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewTG MODULE_INDEX` | Views all Tutorial Groups in a Module. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`addTG tg/TG_CODE` | Adds a Tutorial Group to a Module. "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`findTG TARGET_TG_CODE` | Finds a Tutorial Group. "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`deleteTG TG_INDEX` | Deletes a Tutorial Group from a Module. "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.3 Student commands"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewStudent INDEX` | Views all students in the given tutorial group."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`addStudent n/NAME p/PHONE_NUMBER e/EMAIL id/STUDENT_ID [t/TAG]...` | Adds a new student to the current Student view. "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`deleteStudent INDEX` | Deletes a student from the current Student view. "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`findStudent KEYWORD` | Finds student(s) that contain the keyword in the current Student view. "
      }
    ],
    "authorContributionMap": {
      "seantaysl": 30,
      "EthanTheGoondu": 99,
      "euzintan": 32,
      "fanminj": 108,
      "juandavinlie": 61,
      "-": 76
    }
  },
  {
    "path": "docs/diagrams/AddModSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":AddModCommandParser\" as AddModCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \"a:AddModCommand\" as AddModCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[-\u003e LogicManager : execute(\"addMod CS2103T\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"addMod CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create AddModCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser -\u003e AddModCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser -\u003e AddModCommandParser : parse(\"CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create AddModCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser -\u003e AddModCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand --\u003e AddModCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "destroy AddModCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "LogicManager -\u003e AddModCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand -\u003e Model : addMod(CS2103T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "CommandResult --\u003e AddModCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fanminj": 69
    }
  },
  {
    "path": "docs/diagrams/LoadJsonActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ":User starts up application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ":MainApp looks for an exisiting Json file to read and load;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "if () then ([modulelist.json exists and is found])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Attempts to read Json file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Converts Json file into Json classes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Converts Json classes into native classes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Module list is created and stores in StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Create new Json file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 18
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Interface ModuleStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonModuleStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonSerializableModule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedTutorialGroup"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedStudent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "StorageManager o--\u003e ModuleStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonModuleStorage .left.|\u003e ModuleStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonModuleStorage .right.\u003e JsonSerializableModuleStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonSerializableModuleStorage .down.\u003e JsonSerializableModule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonSerializableModule .down.\u003e JsonAdaptedTutorialGroup"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonAdaptedTutorialGroup .down.\u003e JsonAdaptedStudent"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonAdaptedStudent .left.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 13,
      "-": 17
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "title: Trackr"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Trackr is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   If you are interested in using Trackr, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   If you are interested about developing Trackr, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   This application is built on the AddressBook-Level-3 project developed by SE-EDU initiative. For more information, you may wish to visit their [website](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "fanminj": 9,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSampleModuleList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//import static seedu.address.model.util.SampleDataUtil.getSampleStudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.storage.JsonModuleStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.storage.ModuleStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.storage.StudentStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ModuleStorage moduleStorage \u003d new JsonModuleStorage(userPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentStorage studentStorage \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        storage \u003d new StorageManager(studentStorage, moduleStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ReadOnlyTrackr\u003cModule\u003e initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e moduleListOptional \u003d storage.readModuleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            initialData \u003d moduleListOptional.orElseGet(SampleDataUtil::getSampleModuleList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            initialData \u003d new Trackr();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            initialData \u003d new Trackr();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 11,
      "fanminj": 6,
      "juandavinlie": 3,
      "-": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Returns the student list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see Model#getStudentList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    ReadOnlyTrackr\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tutorial groups */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the module list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @see Model#getModuleList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ReadOnlyTrackr\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the user prefs\u0027 trackr file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Path getTrackrFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 12,
      "juandavinlie": 12,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final AddressBookParser addressBookParser; //This is ModuleListParser, for simplicity I did not change it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            storage.saveModuleList(model.getModuleList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public ReadOnlyTrackr\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        return model.getStudentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getModuleList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return model.getTrackrFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 11,
      "juandavinlie": 16,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(\"NOT IMPLEMENTED YET\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 9,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMod\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module has been added\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds module.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            + PREFIX_MODULE + \"NAME \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // TODO implement after changing model and addressbook class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 41,
      "EthanTheGoondu": 1,
      "fanminj": 1,
      "juandavinlie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addStudent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to Trackr. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_STUDENT_ID + \"STUDENT ID \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"MODULE TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_TAG + \"CS2103T \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in Trackr\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (lastShownList.contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to a module.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + PREFIX_TASK + \"NAME \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    // todo Implement execution of task addition"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        throw new CommandException(\"Task addition not implemented yet\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "juandavinlie": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTG\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tutorial Group has been added\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTGRP \u003d \"This Tutorial Group already exists\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"This is the message usage\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final TutorialGroup toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Main constructor, called by the AddTutorialGroupCommand Parser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param tutorialGroup"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public AddTutorialGroupCommand(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        toAdd \u003d tutorialGroup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    // todo Implement execution of TG Addition"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (lastShownList.contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTGRP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.addTutorialGroup(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof AddTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTutorialGroupCommand) other).toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 4,
      "euzintan": 35,
      "fanminj": 1,
      "juandavinlie": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// todo: add for students and tut group"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        model.setStudentList(new Trackr\u003cStudent\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showTutorialGroupList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showStudentList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                         boolean showTutorialGroupList, boolean showStudentList, boolean showModuleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showTutorialGroupList \u003d showTutorialGroupList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showStudentList \u003d showStudentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showModuleList \u003d showModuleList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowTutorialGroupList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showTutorialGroupList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowStudentList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showStudentList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowModuleList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showModuleList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 2,
      "juandavinlie": 22,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//// todo: add students and tut group"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "//import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 53,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(\"NOT IMPLEMENTED YET\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String updatedModuleId \u003d editModuleDescriptor.getModuleId().orElse(moduleToEdit.getModuleId().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Module(new ModuleId(updatedModuleId));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        private String moduleId;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            setModuleId(toCopy.moduleId);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleId);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModuleId(String moduleId) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public Optional\u003cString\u003e getModuleId() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return Optional.ofNullable(moduleId);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return getModuleId().equals(e.getModuleId());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "EthanTheGoondu": 4,
      "juandavinlie": 74,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Trackr as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// todo: add for students and tut group"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        // todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        // model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// todo: add for student and tut group"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ViewModuleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewMod\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Views all the modules.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_VIEWING_MODULES_SUCCESS \u003d \"Viewing All Modules\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ViewModuleCommand() { }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_MODULES_SUCCESS), false, false, true, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ViewModuleCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewStudentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewStudent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Views the students identified by the index number used in the displayed tutorial group list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing Students of Tutorial Group: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        TutorialGroup tutorialGroupToViewStudents \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setViewToStudent(tutorialGroupToViewStudents);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String.format(MESSAGE_SUCCESS, tutorialGroupToViewStudents),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof ViewStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewTG\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Views the tutorial groups identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_VIEWING_TG_SUCCESS \u003d \"Viewing Tutorial Groups of: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewTutorialGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToViewTutorialGroups \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(moduleToViewTutorialGroups);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_TG_SUCCESS, moduleToViewTutorialGroups), false, false, true, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof ViewTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewTutorialGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 41,
      "juandavinlie": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 3,
      "euzintan": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * and returns a AddModuleCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            Module module \u003d ParserUtil.parseModule(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 24,
      "EthanTheGoondu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG, PREFIX_STUDENT_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_STUDENT_ID)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId studentId \u003d ParserUtil.parseStudentId(argMultimap.getValue(PREFIX_STUDENT_ID).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student student \u003d new Student(name, phone, email, tagList, studentId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * and returns a AddTaskCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public AddTaskCommand parse(String args) /*throws ParseException*/ {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                PREFIX_TASK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            id \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    AddTGCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String taskName \u003d argMultimap.getValue(PREFIX_TASK).orElse(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new AddTaskCommand(new Task(taskName));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 4,
      "juandavinlie": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommandParser implements Parser\u003cAddTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialGroupCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * and returns a AddTutorialGroupCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public AddTutorialGroupCommand parse(String args) /*throws ParseException*/ {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                PREFIX_TUTORIAL_GRP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//            id \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//                    AddTGCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String id \u003d argMultimap.getValue(PREFIX_TUTORIAL_GRP).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // todo: change the LocalTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new AddTutorialGroupCommand(new TutorialGroup(new TutorialGroupId(id),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                LocalTime.now(), LocalTime.now()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 4,
      "euzintan": 23,
      "fanminj": 5,
      "juandavinlie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            /* todo:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        case AddTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new AddTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ViewTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ViewModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ViewStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 3,
      "fanminj": 15,
      "juandavinlie": 11,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_GRP \u003d new Prefix(\"tg/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "euzintan": 1,
      "fanminj": 1,
      "juandavinlie": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// todo:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// todo:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Parses a {@code String module} into a {@code Module}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @throws ParseException if the given {@code module} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static Module parseModule(String module) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String trimmedModule \u003d module.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!ModuleId.isValidModuleId(trimmedModule)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(ModuleId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Module(new ModuleId(trimmedModule));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses a {@code String studentId} into a {@code StudentId}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the given {@code studentId} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static StudentId parseStudentId(String studentId) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String trimmedStudentId \u003d studentId.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!StudentId.isValidStudentId(trimmedStudentId)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new StudentId(trimmedStudentId);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 12,
      "EthanTheGoondu": 5,
      "fanminj": 16,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ViewModuleCommandParser implements Parser\u003cViewModuleCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * Parses the given {@code String} of arguments in the context of the ViewModuleCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * and returns a ViewModuleCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ViewModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (args.length() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewModuleCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewStudentCommandParser implements Parser\u003cViewStudentCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewStudentCommand(index);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    ViewStudentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            ), e);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ViewTutorialGroupCommandParser implements Parser\u003cViewTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * Parses the given {@code String} of arguments in the context of the ViewTutorialGroupCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * and returns a ViewTutorialGroupCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     //     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ViewTutorialGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewTutorialGroupCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTutorialGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "juandavinlie": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // private final UniqueTutorialGroupList tutorialgroups;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // tutorialgroups \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 2,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the user prefs\u0027 Trackr file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Path getTrackrFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the user prefs\u0027 Trackr file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setTrackrFilePath(Path trackrFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces Trackr data with the data in {@code moduleList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns the module Trackr */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ReadOnlyTrackr\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in trackr."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The module must exist in trackr."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code module} must not already exist in trackr."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in trackr."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in trackr."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //TutorialGroup Operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Sets the view to the tutorial group list of the given module"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setViewToTutorialGroup(Module target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code module} must not already exist in trackr."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void addTutorialGroup(TutorialGroup tutorialGroup);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // Student Operations"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the view to the tutorial group list of the given module"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setViewToStudent(TutorialGroup target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in trackr."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student must exist in trackr."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code student} must not already exist in trackr."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in trackr."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in trackr."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // FilteredList Operations"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tutorial group list */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the filter of the filtered tutorial group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 58,
      "juandavinlie": 32,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Trackr moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private FilteredList\u003cTutorialGroup\u003e filteredTutorialGroup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Module currentModuleInView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TutorialGroup currentTgInView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Initializes a ModelManager with the given ReadOnlyTrackrs and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModelManager(ReadOnlyTrackr\u003cModule\u003e moduleList,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(moduleList, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        logger.fine(\"Initializing with module data: \" + moduleList + \" and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList \u003d new Trackr(moduleList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredModules \u003d new FilteredList\u003c\u003e(this.moduleList.getList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredTutorialGroup \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredStudents \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this(new Trackr(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setTrackrFilePath(Path trackrFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(trackrFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        userPrefs.setAddressBookFilePath(trackrFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d moduleList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList.resetData(moduleList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.hasModule(module);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.removeModule(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addModule(module);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorialGroup Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        currentModuleInView \u003d target;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredTutorialGroup \u003d new FilteredList\u003c\u003e(moduleList.getTutorialGroupListOfModule(target));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addTutorialGroup(target, currentModuleInView);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredTutorialGroup \u003d new FilteredList\u003c\u003e(moduleList.getTutorialGroupListOfModule(currentModuleInView));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        currentTgInView \u003d target;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        filteredStudents \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                new FilteredList\u003c\u003e(moduleList.getStudentListOfTutorialGroup(currentModuleInView, target));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .contains(student);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .removeStudent(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList.addStudent(currentModuleInView, currentTgInView, student);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        filteredStudents \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                new FilteredList\u003c\u003e(moduleList.getStudentListOfTutorialGroup(currentModuleInView, currentTgInView));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TutorialGroup List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredTutorialGroup;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredTutorialGroup.setPredicate(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.equals(other.moduleList)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 57,
      "juandavinlie": 55,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTrackr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Unmodifiable view of Track."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * @param \u003cT\u003e A class that implements {@code Showable}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public interface ReadOnlyTrackr\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an unmodifiable view of the {@code Showable} objects list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This list will not contain any duplicate objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ObservableList\u003cT\u003e getList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@Code Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param isDone"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Marks the task as done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10,
      "juandavinlie": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds a task to the list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param t task that is being added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.taskList.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes a task based on the number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param number position number of the task in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeTaskAtNumber(int number) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (number \u003e getTaskListSize() || number \u003c 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            System.out.println(\"Number is not valid\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.taskList.remove(number - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Clears the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns a task based on the number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param number position of the task in the list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return Task that is being retrieved"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Task getTask(int number) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.taskList.get(number - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 9,
      "juandavinlie": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Trackr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.UniqueStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Wraps all data at the Trackr level."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Duplicates are not allowed (by .isSame comparison)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Trackr implements ReadOnlyTrackr\u003cModule\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Trackr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a Trackr using the data in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Trackr(ReadOnlyTrackr\u003cModule\u003e toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the contents of the list with {@code data}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code data} must not contain duplicate objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setData(List\u003cModule\u003e data) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList.setModuleList(data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Resets the existing data of this {@code Trackr} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void resetData(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        setData(newData.getList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if an object with the same identity as {@code object} exists in Trackr."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean hasModule(Module object) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.contains(object);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds an object to Trackr."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The object must not already exist in Trackr."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module object) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addModule(object);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in Trackr."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedObject) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.setModule(target, editedObject);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Removes {@code key} from this {@code Trackr}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code key} must exist in Trackr."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.removeModule(key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //Tutorial Group Operations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroupListOfModule(Module target) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.getTutorialGroupListOfModule(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an object to Trackr."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in Trackr."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup, Module currentModuleInView) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addTutorialGroup(tutorialGroup, currentModuleInView);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // Student Operations"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentListOfTutorialGroup(Module targetModule, TutorialGroup targetTG) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(targetModule).getStudentListOfTutorialGroup(targetTG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList(Module targetModule, TutorialGroup targetTg) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(targetModule).getUniqueStudentList(targetTg);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Adds Student to Trackr."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Module targetModule, TutorialGroup targetTg, Student student) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList.getUniqueTutorialGroupList(targetModule).addStudent(student, targetTg);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.asUnmodifiableObservableList().size() + \" data objects\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof Trackr // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 moduleList.equals(((Trackr) other).moduleList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 3,
      "fanminj": 101,
      "juandavinlie": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Path moduleListFilePath \u003d Paths.get(\"data\", \"modulelist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        setModuleListFilePath(newUserPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return moduleListFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setModuleListFilePath(Path moduleListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(moduleListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.moduleListFilePath \u003d moduleListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(\"\\nModule list data file location : \" + moduleListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateShowableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Signals that the operation will result in duplicate {@code Showable} objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Objects are considered duplicates if they have the same id."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DuplicateShowableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DuplicateShowableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/ShowableNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Signals that the operation is unable to find a specified {@code Showable} object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ShowableNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final ModuleId moduleId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private UniqueTutorialGroupList tutorialGroups;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Constructs an {@code Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param moduleId"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Module(ModuleId moduleId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(moduleId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.tutorialGroups \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Constructs an {@code Module}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @param moduleId"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @param taskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @param tutorialGroups"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public Module(ModuleId moduleId, List\u003cTutorialGroup\u003e tutorialGroups, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        requireNonNull(moduleId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        requireNonNull(tutorialGroups);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        this.tutorialGroups \u003d tutorialGroups;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "         * Constructs an {@code Module}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "         * @param moduleId"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "         * @param tutorialGroups"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        public Module(ModuleId moduleId, UniqueTutorialGroupList tutorialGroups) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            requireNonNull(moduleId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            requireNonNull(tutorialGroups);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.tutorialGroups \u003d tutorialGroups;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public ModuleId getModuleId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return this.moduleId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        public int getTotalStudents() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return this.tutorialGroups.stream().map(TutorialGroup::getStudents)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    .map(List::size).reduce(Integer::sum).orElse(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int getTotalGroups() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this.tutorialGroups.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroups() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return tutorialGroups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueTutorialGroupList getUniqueTutorialGroupList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return tutorialGroups;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        return Collections.unmodifiableList(taskList.getTaskList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroups.addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void removeTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroups.removeTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    public void addTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        tasks.add(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        tasks.remove(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 getModuleId().equals(((Module) other).getModuleId())); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Returns true if both modules of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isSame(Module otherModule) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 otherModule.getModuleId().equals(getModuleId());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return getModuleId().toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 55,
      "EthanTheGoondu": 35,
      "fanminj": 5,
      "juandavinlie": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Module\u0027s ID in the module list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class ModuleId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"ID should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code ModuleId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public ModuleId(String id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidModuleId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid ID."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidModuleId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof ModuleId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 id.equals(((ModuleId) other).id)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Showable} object as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the {@code Showable} object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedObject) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!target.isSame(editedObject) \u0026\u0026 contains(editedObject)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.set(index, editedObject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeModule(Module toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModuleList(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e objects) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!modulesAreUnique(objects)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(objects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Tutorial Group Operations"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the tutorial group list of the given module as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroupListOfModule(Module target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.get(index).getTutorialGroups();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueTutorialGroupList getUniqueTutorialGroupList(Module target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getUniqueTutorialGroupList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup, Module currentModuleInView) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(currentModuleInView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            internalList.get(index).addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e objects) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (int i \u003d 0; i \u003c objects.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c objects.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (objects.get(i).isSame(objects.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 11,
      "juandavinlie": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleId().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "juandavinlie": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 3,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a Student in the app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Student extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final StudentId studentId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor for StudentId."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param studentId a valid string representing a Student\u0027s id."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, StudentId studentId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(name, phone, email, tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(studentId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert studentId !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentId getStudentId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isSame(Student otherStudent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 (otherStudent.getPhone().equals(getPhone()) || otherStudent.getEmail().equals(getEmail()))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Objects.hash(getName(), getPhone(), getEmail(), getTags(), studentId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // todo add tut group"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Student ID: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(getStudentId())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 89,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/StudentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a Student\u0027s id in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \"Student IDs should only contain alphanumeric characters (with capital alphabets)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    + \" and no spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Z]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructs a {@code StudentId}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param studentId A valid student id."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentId(String studentId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        checkArgument(isValidStudentId(studentId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        value \u003d studentId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a given string is a valid student id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static boolean isValidStudentId(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof StudentId // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 value.equals(((StudentId) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!target.isSame(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void removeStudent(Student toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                if (students.get(i).isSame(students.get(j))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TutorialGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.UniqueStudentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class TutorialGroup {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final TutorialGroupId tutorialGroupId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructor for Tutorial Group"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param tutorialGroupId"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup(TutorialGroupId tutorialGroupId, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructor for Tutorial Group"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param tutorialGroupId"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup(TutorialGroupId tutorialGroupId, UniqueStudentList students,  LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //GETTERS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroupId getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this.tutorialGroupId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public double getDurationInHours() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return (this.startTime.until(endTime, ChronoUnit.MINUTES)) / 60.0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //SETTERS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setLessonTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //ADD"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * By right this method should just take in a studentId,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * then we search the Library of students for the correct instance"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * But the Library has not been implemented yet so this will do for now"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        students.addStudent(student);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //DELETE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        students.removeStudent(student);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Checks if two TutorialGroups are the same by first checking if they are the same object,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * then checking if there have the same id."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param otherTutorialGroup to check against"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @return true if same, false if not"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isSame(TutorialGroup otherTutorialGroup) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (otherTutorialGroup \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return otherTutorialGroup !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 otherTutorialGroup.getId().equals(getId());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof TutorialGroup) // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 getId().equals(((TutorialGroup) other).getId()); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return getId().toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 32,
      "euzintan": 62,
      "fanminj": 24,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TutorialGroupId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTutorialGroupId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TutorialGroupId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"ID should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public final String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code TutorialGroupId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroupId(String id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidTutorialGroupId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid ID."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidTutorialGroupId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof TutorialGroupId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 id.equals(((TutorialGroupId) other).id)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/UniqueTutorialGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.UniqueStudentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class UniqueTutorialGroupList implements Iterable\u003cTutorialGroup\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cTutorialGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cTutorialGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Showable} object as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean contains(TutorialGroup toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the {@code Showable} object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroup(TutorialGroup target, TutorialGroup editedObject) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!target.isSame(editedObject) \u0026\u0026 contains(editedObject)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.set(index, editedObject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeTutorialGroup(TutorialGroup toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroupList(UniqueTutorialGroupList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroupList(List\u003cTutorialGroup\u003e objects) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!tutorialGroupsAreUnique(objects)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(objects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the tutorial group list of the given module as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentListOfTutorialGroup(TutorialGroup target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getStudents();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList(TutorialGroup target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getUniqueStudentList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Adds a {@code Student} in the tutorial group list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param student The new {@code Student} to be added"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param currentTgInView The current tutorial group list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student student, TutorialGroup currentTgInView) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(currentTgInView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            internalList.get(index).addStudent(student);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Stream\u003cTutorialGroup\u003e stream() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Iterator\u003cTutorialGroup\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof UniqueTutorialGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTutorialGroupList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean tutorialGroupsAreUnique(List\u003cTutorialGroup\u003e objects) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (int i \u003d 0; i \u003c objects.size() - 1; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c objects.size(); j++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (objects.get(i).isSame(objects.get(j))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 5,
      "EthanTheGoondu": 9,
      "fanminj": 23,
      "juandavinlie": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new Module(new ModuleId(\"CS2103T\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static ReadOnlyTrackr\u003cModule\u003e getSampleModuleList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Trackr sampleAb \u003d new Trackr();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new Student[] {new Student(new Name(\"john\"), new Phone(\"12345678\"), new Email(\"hello@email.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        getTagSet(\"friends\"), new StudentId(\"A1234567X\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static ReadOnlyTrackr\u003cStudent\u003e getSampleStudentList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Trackr\u003cStudent\u003e sample \u003d new Trackr\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            sample.addObject(sampleStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        return sample;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 3,
      "fanminj": 12,
      "juandavinlie": 12,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String moduleId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedTutorialGroup\u003e tutorialGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleId\") String moduleId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                             @JsonProperty(\"tutorialGroups\") List\u003cJsonAdaptedTutorialGroup\u003e tutorialGroups) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (tutorialGroups !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.tutorialGroups.addAll(tutorialGroups);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        moduleId \u003d source.getModuleId().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        tutorialGroups.addAll(source.getTutorialGroups().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .map(JsonAdaptedTutorialGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final UniqueTutorialGroupList modelTutorialGroups \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedTutorialGroup tutorialGroup : tutorialGroups) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            modelTutorialGroups.addTutorialGroup(tutorialGroup.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        final List\u003cTask\u003e modelTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        for (JsonAdaptedTask task : tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            modelTaskList.add(task.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (moduleId \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \"Module ID\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!ModuleId.isValidModuleId(moduleId)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(ModuleId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final ModuleId modelModuleId \u003d new ModuleId(moduleId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Module(modelModuleId, modelTutorialGroups);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 71,
      "juandavinlie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                              @JsonProperty(\"studentId\") String studentId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        studentId \u003d source.getStudentId().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (studentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    StudentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!StudentId.isValidStudentId(studentId)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final StudentId modelStudentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelTags, modelStudentId);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given {@code taskName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"taskName\") String taskName, @JsonProperty(\"isDone\") String isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        taskName \u003d source.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.isDone \u003d source.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Task(taskName, isDone.equals(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTutorialGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.person.UniqueStudentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedTutorialGroup {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tutorial Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String tutorialGroupId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedTutorialGroup} with the given tutorial group details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTutorialGroup(@JsonProperty(\"tutorialGroupId\") String tutorialGroupId,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code TutorialGroup} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTutorialGroup(TutorialGroup source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        tutorialGroupId \u003d source.getId().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.students.addAll(source.getStudents().stream().map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final UniqueStudentList modelStudents \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedStudent student: students) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            modelStudents.addStudent(student.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (tutorialGroupId \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    ModuleId.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TutorialGroupId.isValidTutorialGroupId(tutorialGroupId)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(TutorialGroupId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final TutorialGroupId modelTutorialGroupId \u003d new TutorialGroupId(tutorialGroupId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new TutorialGroup(modelTutorialGroupId, modelStudents,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                LocalTime.parse(startTime), LocalTime.parse(endTime));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 75,
      "fanminj": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "// TODO better JavaDocs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonModuleStorage implements ModuleStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonModuleStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return readModuleList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Reads the module list in the specified filePath."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param filePath The filePath containing the moduleList to be read."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonModuleList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                filePath, JsonSerializableModuleList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!jsonModuleList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return Optional.of(jsonModuleList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Saves the module list in the specified file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param moduleList The moduleList to be saved."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param filePath The filePath at which the moduleList will be saved."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleList(moduleList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 75,
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@JsonRootName(value \u003d \"modulelist\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleList} with the given modules."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code ReadOnlyModuleList} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModuleList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public JsonSerializableModuleList(ReadOnlyTrackr\u003cModule\u003e source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modules.addAll(source.getList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this module list into the model\u0027s {@code ModuleList} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Trackr toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Trackr moduleList \u003d new Trackr();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (moduleList.hasModule(module)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 49,
      "fanminj": 4,
      "juandavinlie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public interface ModuleStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Path getModuleFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 17,
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public interface Storage extends StudentStorage, ModuleStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    Path getStudentFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Path getModuleFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 14,
      "juandavinlie": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Manages storage of Trackr data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private StudentStorage studentStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleStorage moduleStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StorageManager} with the given storages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StorageManager(StudentStorage studentStorage, ModuleStorage moduleStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.studentStorage \u003d studentStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleStorage \u003d moduleStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public Path getStudentFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return studentStorage.getStudentFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return readStudentList(studentStorage.getStudentFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList(Path filePath)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        logger.fine(\"Attempting to read student data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        return studentStorage.readStudentList(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        saveStudentList(studentList, studentStorage.getStudentFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    public void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        logger.fine(\"Attempting to write to student data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//        studentStorage.saveStudentList(studentList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleStorage.getModuleFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return readModuleList(moduleStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        logger.fine(\"Attempting to read module data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        saveModuleList(moduleList, moduleStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        logger.fine(\"Attempting to write to module data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 45,
      "juandavinlie": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StudentStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public interface StudentStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    Path getStudentFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//    void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"https://github.com/AY2021S1-CS2103T-W12-2/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TutorialGroupListPanel tutorialGroupListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private ViewDisplay viewDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private StackPane viewDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay \u003d new ViewDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTrackrFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void refillInnerPartsWithTutorialGroupList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListPanel \u003d new TutorialGroupListPanel(logic.getFilteredTutorialGroupList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(tutorialGroupListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"TUTORIAL GROUPS\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void refillInnerPartsWithModuleList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"MODULES\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void refillInnerPartsWithStudentList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        listPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"STUDENTS\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (commandResult.isShowTutorialGroupList()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                refillInnerPartsWithTutorialGroupList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (commandResult.isShowModuleList()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                refillInnerPartsWithModuleList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (commandResult.isShowStudentList()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                refillInnerPartsWithStudentList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 15,
      "fanminj": 12,
      "juandavinlie": 27,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label moduleId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label totalStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label totalGroups;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        moduleId.setText(module.getModuleId().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //totalStudents.setText(\"Total Students: \" + module.getTotalStudents());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //totalGroups.setText(\"Total Groups: \" + module.getTotalGroups());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "juandavinlie": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A ui for the status bar that is displayed at the bottom of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        studentId.setText(student.getStudentId().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 7,
      "juandavinlie": 10,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private ListView\u003cStudent\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        personListView.setItems(studentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "fanminj": 7,
      "juandavinlie": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private Label studentId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private Label email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private FlowPane tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        name.setText(task.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        studentId.setText(task.getStudentId().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        person.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "juandavinlie": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        taskListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "juandavinlie": 11,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TutorialGroupCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TutorialGroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"TutorialGroupListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final TutorialGroup tutorialGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label groupId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private Label startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private Label endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private Label duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TutorialGroupCard(TutorialGroup tutorialGroup, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.tutorialGroup \u003d tutorialGroup;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        groupId.setText(tutorialGroup.getId().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //totalStudents.setText(\"Total Students: \" + module.getTotalStudents());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        startTime.setText(tutorialGroup.getStartTime().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        endTime.setText(tutorialGroup.getEndTime().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        duration.setText(\"\" + tutorialGroup.getDurationInHours());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        person.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!(other instanceof TutorialGroupCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        TutorialGroupCard card \u003d (TutorialGroupCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 tutorialGroup.equals(card.tutorialGroup);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "juandavinlie": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TutorialGroupListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Panel containing the list of tutorial groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TutorialGroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"TutorialGroupListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TutorialGroupListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ListView\u003cTutorialGroup\u003e tutorialGroupListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code TutorialGroupListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TutorialGroupListPanel(ObservableList\u003cTutorialGroup\u003e tutorialGroupList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListView.setItems(tutorialGroupList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListView.setCellFactory(listView -\u003e new TutorialGroupListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TutorialGroup} using a {@code TutorialGroupCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class TutorialGroupListViewCell extends ListCell\u003cTutorialGroup\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(TutorialGroup tutorialGroup, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(tutorialGroup, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || tutorialGroup \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new TutorialGroupCard(tutorialGroup, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 1,
      "juandavinlie": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ViewDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A ui for the current view display that is displayed at the header of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class ViewDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private static final String FXML \u003d \"viewDisplay.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private TextArea viewDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public ViewDisplay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setText(\"MODULES\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setDisable(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void setCurrentView(String view) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setText(view);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 25
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Trackr\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cURL value\u003d\"@TrackrTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cStackPane fx:id\u003d\"viewDisplayPlaceholder\" prefHeight\u003d\"55.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 13,
      "-": 42
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalStudents\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalStudents\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalGroups\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalGroups\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 34
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 8
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fanminj": 36
    }
  },
  {
    "path": "src/main/resources/view/TrackrTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    background-color: #000000; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-panel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-base: #000000;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-control-inner-background: #000000;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 40%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-fills: #000000;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".command-pane {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 10%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-border-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 30%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display .text {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "/*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 25%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 50%);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: derive(#000000, 30%);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#listPanel {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-fills: #000000"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 380
    }
  },
  {
    "path": "src/main/resources/view/TutorialGroupListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"groupId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 3,
      "juandavinlie": 31
    }
  },
  {
    "path": "src/main/resources/view/TutorialGroupListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cListView fx:id\u003d\"tutorialGroupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 8
    }
  },
  {
    "path": "src/main/resources/view/viewDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "   \u003cTextArea fx:id\u003d\"viewDisplay\" prefHeight\u003d\"109.0\" prefWidth\u003d\"407.0\" styleClass\u003d\"view-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.storage.JsonModuleStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        JsonModuleStorage moduleListStorage \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new JsonModuleStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        StorageManager storage \u003d new StorageManager(moduleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                .resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the command and confirms that"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the command and confirms that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            super(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 111,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 21,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // todo: new test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setTrackrFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setModuleList(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return this.module.isSame(module);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        final ArrayList\u003cTutorialGroup\u003e tutorialGroupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return tutorialGroupsAdded.stream().anyMatch(tutorialGroup::isSameTutorialGroup);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //            tutorialGroupsAdded.add(tutorialGroup);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSame);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ModuleList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 8,
      "fanminj": 17,
      "juandavinlie": 80,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //TODO Add test cases"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // todo: add test cases"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.setModuleList(new ModuleList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 16,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_NAME_ALEX \u003d \"Alex Tan\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_NAME_BENG \u003d \"Ah Beng\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_PHONE_ALEX \u003d \"91234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_PHONE_BENG \u003d \"81234567\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_EMAIL_ALEX \u003d \"alextan@u.nus.edu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_EMAIL_BENG \u003d \"abeng@u.nus.edu\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_AMY \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_ALEX \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_BOB \u003d \"A7654321X\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_BENG \u003d \"A7654321B\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String VALID_MODULE_AMY \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_MODULE_ALEX \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String VALID_MODULE_BOB \u003d \"CS2040\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_MODULE_BENG \u003d \"CS2040\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Convenience wrapper to {@link"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // only do so by copying its components."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModuleList expectedModuleList \u003d new ModuleList(actualModel.getModuleList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(expectedModuleList, actualModel.getModuleList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        final String[] splitName \u003d module.getModuleId().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        model.updateFilteredModuleList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "fanminj": 12,
      "juandavinlie": 57,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getModuleList().getModuleList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 53,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * but smaller than size of address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 113,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 5,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 21,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_help_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 5,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 13,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 15,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parse_validArgs_returnsAddModuleCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        //TODO change this to use TypicalModule.CS2100"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertParseSuccess(parser, \"CS2100\", new AddModuleCommand(new Module(new ModuleId(\"CS2100\"))));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 24,
      "EthanTheGoondu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // todo: add test cases"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8,
      "-": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String INVALID_STUDENT_ID \u003d \"A1234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentId((String) null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStudentId(INVALID_STUDENT_ID));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_validValueWithoutWhitespace_returnsStudentId() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(VALID_STUDENT_ID));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_validValueWithWhitespace_returnsTrimmedStudentId() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String studentIdWithWhitespace \u003d WHITESPACE + VALID_STUDENT_ID + WHITESPACE;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(studentIdWithWhitespace));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 26,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(new ModuleList(), new ModuleList(modelManager.getModuleList()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setModuleListFilePath(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        modelManager.setModuleListFilePath(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(path, modelManager.getModuleListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.hasModule(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 66,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Module(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Module(new ModuleId(invalidAddress)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleId.isValidModuleId(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(ModuleId.isValidModuleId(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(ModuleId.isValidModuleId(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(ModuleId.isValidModuleId(\"CS2103T\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(ModuleId.isValidModuleId(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(ModuleId.isValidModuleId(\"GER1000H\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 28,
      "EthanTheGoondu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Multiple keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Only one matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Zero keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 34,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 3,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/StudentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_invalidStudentId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String invalidStudentId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StudentId(invalidStudentId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void isValidStudentId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null student id"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StudentId.isValidStudentId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // invalid student id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"  \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"myId\")); // alphabets only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"1234AX567\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"A123456X7\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"A123456X\")); // less than 7 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"a1234567x\")); // non-capital alphabets"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"1234567X\")); // missing first alphabet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // valid student id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(StudentId.isValidStudentId(\"A1234567X\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_ID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Student amy \u003d new Student(new Name(VALID_NAME_AMY), new Phone(VALID_PHONE_AMY),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            new Email(VALID_EMAIL_AMY), SampleDataUtil.getTagSet(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new StudentId(VALID_STUDENT_ID_AMY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Student bob \u003d new Student(new Name(VALID_NAME_BOB), new Phone(VALID_PHONE_BOB),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            new Email(VALID_EMAIL_BOB), SampleDataUtil.getTagSet(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new StudentId(VALID_STUDENT_ID_BOB));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student amyCopy \u003d new StudentBuilder(amy).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(amy.equals(amyCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(amy.equals(amy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(bob));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedAmy \u003d new StudentBuilder(amy).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAmy \u003d new StudentBuilder(amy).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAmy \u003d new StudentBuilder(amy).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAmy \u003d new StudentBuilder(amy).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(amy.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "fanminj": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 7,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        JsonModuleStorage moduleListStorage \u003d new JsonModuleStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        storageManager \u003d new StorageManager(moduleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ModuleList original \u003d getTypicalModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        storageManager.saveModuleList(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        ReadOnlyModuleList retrieved \u003d storageManager.readModuleList().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(original, new ModuleList(retrieved));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertNotNull(storageManager.getModuleFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 29,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.StudentId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_STUDENT_ID \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private StudentId studentId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentId \u003d new StudentId(DEFAULT_STUDENT_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentId \u003d studentToCopy.getStudentId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code StudentId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withStudentId(String studentId) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.studentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new Student(name, phone, email, tags, studentId);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 4,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2100 \u003d new Module(new ModuleId(\"CS2100\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2103T \u003d new Module(new ModuleId(\"CS2103T\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2040 \u003d new Module(new ModuleId(\"CS2040\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static Trackr\u003cModule\u003e getTypicalModuleList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Trackr\u003cModule\u003e ab \u003d new Trackr\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            ab.addObject(module);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100, CS2103T, CS2040));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8,
      "EthanTheGoondu": 9,
      "juandavinlie": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 10,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.person.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student ALEX \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Alex Tan\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"alextan@u.nus.edu\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"91234567\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1234567X\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student BENG \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Ah Beng\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"abeng@u.nus.edu\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"81234567\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A7654321B\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student CHARLIE \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"CHARLIE CHEN\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"ccharlie@u.nus.edu\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"82223333\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1928835B\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student DAVID \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"David Ong\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"dong@u.nus.edu\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"81320987\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1837538N\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student ELIZABETH \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Elizabeth Teo\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"eteo@u.nus.edu\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"89993333\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1938563M\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // todo: getTypicalAddressBook() and getTypicalStudents()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 50
    }
  }
]
