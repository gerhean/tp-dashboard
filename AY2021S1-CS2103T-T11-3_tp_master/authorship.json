[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "# NUStorage"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-T11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T11-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T11-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Logo](./docs/images/AboutUs/logo.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Ui](./docs/images/Ui.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* NUStorage is a desktop application for managing inventory, transaction records and accounts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* NUStorage is mainly targeted to store owners who need help in visualising whatâ€™s going on in their store easily."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* [User Guide](./docs/UserGuide.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* [Developer Guide](./docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* [About Us](./docs/AboutUs.md)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## License: [MIT](LICENSE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 15,
      "howtoosee": 18,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "mainClassName \u003d \u0027nustorage.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    archiveName \u003d \u0027nustorage.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 6,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg), formed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "to fulfill the team project requirements of [CS2103T](https://nusmods.com/modules/CS2103T/software-engineering)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### Prof. Damith"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/damithc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/damithc)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/damithc.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Eugene"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/eugeneteu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/EugeneTeu)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/eugene.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Role: Tutor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Pin Xi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/fizzyagent.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](http://github.com/FizzyAgent)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/pinxi.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Responsibilities: NA"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Dora"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/door-oof.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/Door-oof)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/dora.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Responsibilities: NA"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Ee Liang"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/elgoh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/Elgoh)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/eeliang.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Responsibilities: NA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### XiHao"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/howtoosee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/howtoosee)]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/xihao.md)]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Responsibilities: NA"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Yu Yang"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cimg src\u003d\"images/AboutUs/ironbiscuit.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[github](https://github.com/IronBiscuit)]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "[[portfolio](team/yuyang.md)]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Responsibilities: NA"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 40,
      "howtoosee": 8,
      "-": 37
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c!-- TOC adapted from"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "https://github.com/AY2021S1-CS2103T-W16-3/tp/pull/179/commits/aec461182c194c9ca2c67d7c407fcabb376191ff "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv class\u003d\"toc-no-bullet-points\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 1. Setting Up, Getting Started"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "To get started, please refer to the setting up guide [here](SettingUp.md)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 2.1. Architecture and High Level Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The architecture diagram given below shows the high-level design of the software NUStorage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Given below is a quick overview of each of the components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.1.1. Main classes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`Main`** has two classes: [`Main`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/MainApp.java). This component is responsible for:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.1.2. Commons classes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`Commons`** represents a collection of classes used by multiple other components to support the software."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.1.3. Core classes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "##### 2.1.3.1. UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`UI`** contains the user interface elements and is responsible for taking in user inputs and displaying the corresponding results and infomative feedback messages."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "##### 2.1.3.2. Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`Logic`** is responsible for executing the commands and ensuring the logic flow of the software."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "##### 2.1.3.3. Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`Model`** represents a collection of model objects used by the software to hold the data of the application in memory while the app is running."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "##### 2.1.3.4. Storage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**`Storage`** is responsible for:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* At app launch: Reading the data files and convert them into their corresponding `model` objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* When a command is executed: Converting the `model` objects into their corresponding serializable formats, then store these serializable objects into the data file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Each of the four components in the **core classes**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Figure 1: Class Diagram of Logic Component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 2.2. Interactions between Architectural Components"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Architecture sequence diagram](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 2: Sequence diagram for executing the command `delete 1`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Section 2.3 elaborates on each of the components in detail."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 2.3. Details of Architectural Components"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.3.1. Commons classes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Classes used by multiple components are in the `nustorage.commons` package."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Classes in this component:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Support the overall logic flow of the application."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Provides utility to be used by other classes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Helps with error handling."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.3.2. UI component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "This section shows the structure and logic of the `UI` component of NUStorage. It shows a generalised view of the `UI` component within the packages."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Given below is the class diagram of the `UI` component of NUStorage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Structure of the UI Component](images/UiComponent.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 3: Class Diagram of UI Component."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/ui/Ui.java)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The UI component consists of a `MainWindow` that is made up of `CommandBox`, `ResultDisplay`, `TabPane`, `StatusBarFooter` and `HelpWindow`. The `TabPane` holds multiple `Tab` objects such as `Inventory` and `Finance`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Every component in UI, including the `MainWindow`, inherits from the abstract `UiPart` class."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in the corresponding `.fxml` files with the same name, located in the `src/main/resources/view` directory. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "* Updates itself with modified data whenever there are changes made by the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.3.3. Logic component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "This section shows the structure and logic of the `Logic` component of NUStorage. It shows a generalised view of the `Logic` component within the packages."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Given below is the class diagram of the `Logic` component of NUStorage."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 4: Class Diagram of Logic Component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "**API**:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/logic/Logic.java)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "An outline of how a command is processed through `Logic` is as follows:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "1. `Logic` uses the `NuStorageParser` class to parse the user command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "5. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete_finance 1\")` API call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Interactions Inside the Logic Component for the `delete_finance 1` Command](images/DeleteFinanceSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 5: Sequence Diagram of Delete Finance Command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.3.4. Model component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "This section shows the structure and logic of the `Model` component of NUStorage. It shows a generalised view of the `Model` component within the packages."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Given below is the class diagram of the `Model` component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 6: Class Diagram of Model Component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/model/Model.java)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Stores a `UserPref` object that represents the userâ€™s preferences."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Stores Inventory and financeAccount data."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Exposes unmodifiable `ObservableList\u003cInventoryRecord\u003e` and `ObservableList\u003cFinanceRecord\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to the lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Does __not__ depend on any of the other three components (UI, Logic and Storage)."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 2.3.5. Storage component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "This section shows the structure and logic of the `Storage` component of NUStorage. All storage-related classes are stored in the package `nustorage.storage`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Given below is the class diagram of the `Storage` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 7: Class Diagram of Storage Component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The storage component comprises three different sections:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "1. The `UserPrefStorage` section:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * loads the user preferences and settings on start up."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * stores the user preferences and settings upon exiting ."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. The `FinanceAccountStorage` section:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * loads the previously saved finance records on start up."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * stores new finance records as they are added / logged into the software."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. The `InventoryStorage` section:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * loads the previously saved inventory records on start up."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   * stores new inventory records as they are added / logged into the software."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T11-3/tp/blob/master/src/main/java/nustorage/storage/Storage.java)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Saving inventory:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Given below is the **activity** diagram for saving the inventory. Saving finance account works similarly."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  The diagram given below shows the decision pathways of the storage component when saving inventory."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      ![Activity Diagram for saving inventory](images/SavingInventoryActivityDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      Figure 8: Activity Diagram for Saving Inventory."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * The following is the **sequence** diagram for saving the inventory. Saving finance account works similarly."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  The diagram given below shows the function calls between classes when saving inventory."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      ![Sequence Diagram for saving inventory](images/SaveInventorySequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      Figure 9: Sequence Diagram for Saving Inventory."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Loading finance account:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Given below is the **activity** diagram for loading the finance account on start up. Loading inventory works similarly."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  The diagram given below shows the decision pathways of the storage component when loading finance account."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      ![Activity Diagram for loading finance account](images/LoadingFinanceActivityDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      Figure 10: Activity Diagram for Loading Finance."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * The following is the **sequence** diagram for loading the finance account. Loading inventory works similarly."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  The diagram given below shows the function calls between classes when loading finance account."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      ![Sequence Diagram for loading finance](images/LoadFinanceSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      Figure 11: Sequence Diagram for Loading Finance."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section describes some noteworthy details on how certain key features are implemented as well as their design considerations."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.1. Add Records Command Feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section explains the implementation of the `Add record command` feature. As the implementation of adding Inventory / Finance Records are very similar, this section will focus only be on the implementation of the adding of __Inventory Records__."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The Add Inventory command results in an inventory record added to the list. All but one field in the record must be provided by the user, which are: Item Description and Quantity. There is one optional field, Cost, which when provided, creates a Finance Record that is linked to the Inventory Record reflecting said cost."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This is done through the use of the `ParserUtil#parseItemDescription` and `ParserUtil#parseQuantity` methods inside the `nustorage.parser` package, which checks and extracts the item description and quantity (as well as cost if the field is filled) from the commadn string."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If the compulsory fields are valid, `AddInventoryRecordCommandParser` creates an `AddInventoryRecordCommand` object. The Sequence Diagram below (figure 12) shows how the `AddInventoryRecordCommand` object is created."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Take a look at the Logic Class Diagram in the [Logic Component](#233-logic-component) section of the DG, where `AddInventoryRecordCommandParser` is represented as \u0027XYZCommandParser\u0027 in the diagram for a better understanding."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![AddInventoryRecordSequenceDiagram](images/AddInventoryRecordSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 12. Sequence Diagram for the Add Inventory command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `AddInventoryRecordCommand` has been successfully created and its `execute` method would be called by `LogicManager#execute`, which then called by `MainWindow#executeCommand`. Below is another sequence diagram that depicts the interactions between `LogicManager`, `AddInventoryRecordCommand`, `ModelManager` as well as `Storage`, when `AddInventoryRecordCommand#execute` is called."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![inventoryCommandExecuteSequenceDiagram](images/AddInventoryCommandExecuteSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 13. Sequence Diagram for `AddInventoryRecordCommand#execute()`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "As you can see, the Inventory Record, as well as a Finance Record (if the cost field was filled), is added into NUStorage\u0027s [Model Component](#234-model-component). In addition, the updated lists of Inventory Records and Finance Records are saved into the [Storage Component](#235-storage-component) of NUStorage. At the end of the operation, a `CommandResult` object is returned in which we will use for UI purposes."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Now, all there is left is to display a message to the user informing him/her about the status of their command input, as well as the created inventory / finance records. The `CommandResult` object returned previously is now used to create a new `CommandBox` object, which is used to display items on NUStorage\u0027s UI. This happens when `UiManager#fillInnerParts()` is called. Refer to [Figure 20](#35-ui-sequence-diagram) at the end of section 3 for the sequence diagram for UI."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "With this, the Add Inventory Record command fully finishes executing and NUStorage\u0027s UI displays the status messages for the user to see."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.2. Edit Records Command Feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section explains the implementation of the `Edit Record command` feature. As the implementation of editing Inventory / Finance Records are similar, this secion will focus only on the implementation of the editing of __Finance Records__."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The Edit Finance command results in the specified finance record being modified. This command requires a compulsory field Index to specify which record is to be edited. Furthermore, at least one field in the command must be provided: Amount, Date or Time."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This is done through the use of the `ParserUtil#parseIndex`, `ParserUtil#parseAmount` and `ParserUtil#parseDateTime` methods inside the `nustorage.parser` package, which checks and extracts the Index of the record, the new Amount, Date or Time fields from the command string."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If the index is valid and at least one of the compulsory fields is present, `EditFinanceCommandParser` creates an `EditFinanceCommand` object. The sequence diagram below (figure 15) shows how the `EditFinanceCommand` object is created."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Take a look at the Logic Class diagram in the [Logic Component](#233-logic-component) of the DG, where `EditFinanceCommandParser` is represented as \u0027XYZCommandParser\u0027 in the diagram for a better understanding."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![EditFinanceSequenceDiagram](images/EditFinanceSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 14. Sequence Diagram for the Edit Finance command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `EditFinanceCommand` has been successfully created and its `execute` method would be called by `LogicManager#execute`, which then called by `MainWindow#executeCommand`. Below is another sequence diagram that depicts the interactions between `LogicManager`, `EditFinanceCommand`, `ModelManager` as well as `Storage`, when `EditFinanceCommand#execute` is called."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![EditFinanceCommandExecuteSequenceDiagram](images/EditFinanceCommandExecuteSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 15. Sequence Diagram for `EditFinanceCommand#execute()`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "As you can see, the original Finance Record in NUStorage\u0027s [Model Component](#234-model-component) has now been updated with the new values. In addition, the updated list of Finance Records is saved into the [Storage Component](#235-storage-component) of NUStorage. At the end of the operation, a `CommandResult` object is returned in which we will use for UI purposes."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Now, all there is left is to display a message to the user informing him/her about the status of their command input, as well as the edited finance records. The `CommandResult` object returned previously is now used to create a new `CommandBox` object, which is used to display items on NUStorage\u0027s UI. This happens when `UiManager#fillInnerParts()` is called. Refer to [Figure 20](#35-ui-sequence-diagram) at the end of section 3 for the sequence diagram for UI."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "With this, the Edit Finance Record command fully finishes executing and NUStorage\u0027s UI displays the status messages for the user to see."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.3. Delete Records Command Feature"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section explains the implementation of the `Delete Record command` feature. As the implementation of editing Inventory / Finance Records are similar, this secion will focus only on the implementation of the deletion of __Inventory Records__."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The Delete Inventory command results in the specified inventory record being removed from the application. This command requires a compulsory field Index to specify which record is to be edited."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This is done through the use of the `ParserUtil#parseIndex` method inside the `nustorage.parser` package, which checks and extracts the index fields from the command string."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If the index provided is valid, then `DeleteInventoryRecordCommandParser` creates an `DeleteInventoryRecordCommand` object. The sequence diagram below (figure 18) shows how the `DeleteInventoryRecordCommand` object is created."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Take a look at the Logic Class diagram in the [Logic Component](#233-logic-component) of the DG, where `DeleteInventoryRecordCommandParser` is represented as \u0027XYZCommandParser\u0027 in the diagram for a better understanding."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![DeleteInventoryRecordSequenceDiagram](images/DeleteInventoryRecordSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 16. Sequence Diagram for the Delete Inventory command."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `DeleteInventoryRecordCommand` has been successfully created and its `execute` method would be called by `LogicManager#execute`, which then called by `MainWindow#executeCommand`. Below is another sequence diagram that depicts the interactions between `LogicManager`, `EditFinanceCommand`, `ModelManager` as well as `Storage`, when `EditFinanceCommand#execute` is called."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![DeleteInventoryRecordCommandExecuteSequenceDiagram](images/DeleteInventoryRecordCommandExecuteSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 17. Sequence Diagram for `DeleteInventoryRecordCommand#execute()`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "As you can see, the original Finance Record in NUStorage\u0027s [Model Component](#234-model-component) has now been updated with the new values. In addition, the updated list of Finance Records is saved into the [Storage Component](#235-storage-component) of NUStorage. At the end of the operation, a `CommandResult` object is returned in which we will use for UI purposes."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Now, all there is left is to display a message to the user informing him/her about the status of their command input, as well as the edited finance records. The `CommandResult` object returned previously is now used to create a new `CommandBox` object, which is used to display items on NUStorage\u0027s UI. This happens when `UiManager#fillInnerParts()` is called. Refer to [Figure 20](#35-ui-sequence-diagram) at the end of section 3 for the sequence diagram for UI."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "With this, the Edit Finance Record command fully finishes executing and NUStorage\u0027s UI displays the status messages for the user to see."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.4. List Records Command Feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section explains the implementation of the List Records command feature. As the implementation of listing Inventory / Finance records are very similar, in this section we will only be going through the implementation of Listing Inventory Records."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The List Inventory command results in all stored inventory records to be listed on NUStorage\u0027s GUI. There are no fields to be filled by the user, only the command `list_inventory` is required to carry out and execute the command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Once `NuStorageParser#parseCommand()` successfully parses a `list_inventory` command, a `ListInventoryCommand` object is created. This scenario is depicted in the sequence diagram below."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![ListInventoryRecordSequenceDiagram](images/ListInventorySequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 18. Sequence Diagram for List Inventory upon parsing."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `ListInventoryCommand` has been successfully created and its `execute` method would be called by `LogicManager#execute`, which is in turn called by `MainWindow#executeCommand`. Below is another sequence diagram that depicts the interactions between `LogicManager`, `AddInventory` as well as `ModelManager`, when `ListInventoryCommand#execute` is called."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![ListCommandExecuteSequence](images/ListCommandExecuteSequence.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 19. Sequence Diagram for `ListInventoryCommand#execute()`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Now, all there is left is to display a message to the user informing him/her about the status of their command input, as well as displaying all listed Inventory Records on NUStorage\u0027s GUI. The `CommandResult` object returned previously is now used to create a new `CommandBox` object, which is used to display items on NUStorage\u0027s UI. All of this happens when `UiManager#fillInnerParts()` is called. Refer to [Figure 20](#35-ui-sequence-diagram) at the end of section 3 for the sequence diagram for UI."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.5. UI Sequence Diagram"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following shows the sequence diagram for executing `UiManager#start()`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![inventoryUI](images/InventoryUI.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Figure 20. Sequence Diagram for `UiManager#start()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 4. Documentation, Testing, Logging, Configuration and DevOps Guides"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 5. Appendix: Requirements"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.1. Product Scope"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* has a need to manage a significant number of varying inventories, as well as their finances"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* prefer desktop apps over other traditional modes of managing inventories/finances, such as pen and paper"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Proficient in english to allow them to check the user guide when they are having trouble with the app"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**Value proposition**: manage inventories and finances faster than the typical paper and pen"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.2. User Stories"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| Priority | As a â€¦â€‹ | I want to â€¦â€‹ | So that I canâ€¦ |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| ---| --- | --- | --- |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| `* * *`  | inventory keeper | view inventory records | keep track of the amount of products I have left |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| `* * *`  | small business owner | view finance records           | plan the next steps of my business |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| `* * *`  | forgetful business owner | save my records | track my financial records more easily |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| `* * *`  | small business owner | add and remove inventories     | update my inventory status |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| `* *`    | accountant | edit my financial records | update my financial status |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| `*`      | user | be able to exit the app safely | ... |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.3. Use Cases"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "For all use cases (unless specified otherwise):"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* The **System** is `NUStorage`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* The **Actor** is `User`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.1. Use case: Add an inventory item"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to list inventory"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage shows the inventory list"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "3. User requests to add a specific inventory item into the list"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "4. NUStorage adds the item to the list"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   __Use case ends.__"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.2. Use case: Remove an inventory item"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to list inventory"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage shows the inventory list"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "3. User requests to remove a specific inventory item into the list"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "4. NUStorage removes the item from the list at the specified index"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  __Use case ends.__"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "  * 3a1. NUStorage shows an error message."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      __Use case resumes at step 2.__"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.3. Use case: Add a finance record"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to list finances"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage shows the finance record list"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "3. User requests to add a specific finance record into the list"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "4. NUStorage adds the record to the list"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   __Use case ends.__"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.4. Use case: Remove a finance record"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to list finances"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage shows the finance record list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "3. User requests to remove a specific financial record into the list"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "4. NUStorage removes the record from the list at the specified index"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  __Use case ends.__"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "  * 3a1. NUStorage shows an error message."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      __Use case resumes at step 2.__"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.5. Use case: List finance/inventory records"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to list finances / inventories"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage shows the finance record / inventory list"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  __Use case ends.__"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.6. Use case: Save finance / inventory records"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to save the current data stored"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage saves both finance and inventory records and shows a success message"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.7. Use case: Exiting the application"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. User requests to exit NUStorage"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. NUStorage saves both finance and inventory records and shows a goodbye message"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "3. NUStorage terminates after 1.5 seconds"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.4. Non-Functional Requirements"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "2. Should be able to hold up to 100 financial records and 100 inventory items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 6. Appendix: Instructions for Manual Testing"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.1. Launching and Shutting Down"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. If your system does not already have Java JDK 11 or above, head to [OpenJDK](https://openjdk.java.net/projects/jdk) and install Java JDK 11 or higher."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Double-click the jar file\u003cbr\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      Expected: Shows the GUI with an introductory message. The window size may not be optimum."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      **NOTE**: If double-clicking the jar file does not work, open up your terminal and navigate to the directory that contains the jar file. Then, enter the following command:\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "      `java -jar nustorage.jar` ."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "1. Saving and shutting Down"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. You may shut down NUStorage by entering the `exit` command or simply clicking the close button on the top-right corner of the application."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. NUStorage automatically saves any changes made to records while the application is in use. Closing and re-opening the application will not result in any data loss."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.2. Adding a Record"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. Adding a financial/inventory record."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   1. Prerequisites: None."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Test case: `add_inventory i/MacBook q/10`\u003cbr\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     Expected: An inventory item \u0027MacBook\u0027 is added with the quantity of 10. Details of the added record shown in the status message."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   3. Test case: `add_finance amt/1000 at/2020-09-09`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     Expected: A finance record of an increase by $1000.00 is added, time-stamped at 09 SEP 2020. Details of the added record shown in status message."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   4. Test case: `add_inventory i/Iphone q/100 c/10`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     Expected: An inventory item \u0027Iphone\u0027 is added with the quantity of 10, along with a financial record depicting the record with the cost of \u002710\u0027 for each \u0027Iphone\u0027. Details of the added record shown in status message."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   5. Other incorrect add commands to try: `add`, `add_record`, `add_inventory i/MacBook` `add_finance amt/1000 at/2020-13-13` \u003cbr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     Expected: No record is added. Error details shown in the status message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.3. Deleting a Record"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. Deleting a record while all inventory/financial records are being shown."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Prerequisites: List all inventory/financial records using the `list_inventory` or `list_finance` commands respectively. Multiple records in the list."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Test case: `delete_finance 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: First finance record is deleted from the list. Details of the deleted record shown in the status message."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   3. Test case: `delete_inventory 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: Second inventory record is deleted from the list. Details for the deleted record shown in the status message."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   4. Test case: `delete_inventory 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No record is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   5. Other incorrect delete commands to try: `delete_finance `, `delete_inventory x`, `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No record is added. Error details shown in the status message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.4. Editing a Record"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. Editing a record while all inventory/financial records are being shown."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Prerequisites: List all inventory/financial records using the `list_inventory` or `list_finance` commands respectively. Multiple records in the list."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Test case: `edit_inventory 1 i/Pasta q/100`\u003cbr\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: The first inventory record\u0027s item and quantity are changed to \u0027Pasta\u0027 and \u0027100\u0027 respectively. Details for the edited record shown in the status message."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   3. Test case: `edit_finance 2 amt/3000 at/2021-01-02`\u003cbr\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: The second finance record\u0027s amount and date are changed to \u00273000\u0027 and \u002702 January 2021\u0027 respectively. Details for the edited record shown in the status message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   4. Test case: `edit 1 i/Pasta q/100`\u003cbr\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No record is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   5. Other incorrect edit commands to try:\u003cbr\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   `edit_finance 0 amt/3000 at/2021-01-02`, `edit_inventory x i/Pasta q/100`(where x is larger than the number of inventory records in the list)\u003cbr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No records are edited. Error details shown in the status message."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.5. Listing Records"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. Listing all inventory/finance records"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Prerequisites: None. In order for the application to display record cards, ensure that you already have some inventory/finance records saved."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Test case: `list_inventory`\u003cbr\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      Expected: All saved inventory records are listed horizontally below the status bar."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   3. Test case: `list_finance`\u003cbr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      Expected: All saved finance records are listed horizontally below the status bar."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   4. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      Expected: No records are listed. Error details shown in the status message."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   5. Other incorrect list commands to try:\u003cbr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      `list-finance`, `list inventory`, `list `.\u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "      Expected: No records are listed. Error details shown in the status message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. Finding certain inventory/finance records based on a certain keyword."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Prerequisites: Have at least 1 or more inventory/finance records saved."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Test case: `find_inventory phone`\u003cbr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: All saved inventory records with the word \u0027phone\u0027 in its description/id are listed horizontally below the status bar. If there are no such records, then there will be no records listed."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   3. Test case: `find_finance 1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: All saved finance records with the number \u00271000\u0027 in its amount/id are listed horizontally below the status bar. If there are no such records, then there will be no records listed."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   4. Test case: `find finance 1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No records will be displayed. Error details shown in the status message."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   5. Other incorrect find commands to try: \u003cbr\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   `find phone`, `find_inventory `, `find-finance 1000`."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   Expected: No records will be displayed. Error details shown in the status message."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 7. Appendix: Proposed Features for Future Implementation"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. Customizable Commands\u003cbr\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. We understand that not everybody that uses NUStorage would be comfortable with the current names of commands. Therefore, we plan to implement a feature that allows users to rename the commands to better suit their liking."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. Graphical Depiction\u003cbr\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "   1. Currently, NUStorage only displays inventory and finance records as a static listing. We plan to include a new feature that displays the data in a graphical manner."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Expanding on this, we could include a number of graphical options, such as pie charts, bar graphs and line graphs."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. Saving inventory as items instead of records\u003cbr\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   1. Currently, NUStorage saves inventory as records. For business that constantly deals with the same set of items daily, it might seem tiresome to constantly have to add inventory records of the same item."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "   2. Thus, we plan to implement a feature that allows users to \u0027save\u0027 a certain inventory item for reuse, allowing them to only have to type the quantity when adding records."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 8. Glossary and Terms"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* **Mainstream OS**: Windows, Linux, MacOS"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* **Inventory**: An item that a user wishes to record. An inventory item can refer to any existing object."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* **Finance**: A record that allows a user to monitor his earnings and spending."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 138,
      "FizzyAgent": 3,
      "howtoosee": 238,
      "Door-oof": 10,
      "-": 228
    }
  },
  {
    "path": "docs/DeveloperGuide_ProposedFeatures.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following are propsed features from the original AB3."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Will be adapted and added during the final submission of the DG."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.2. \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 3.2.1. Proposed Implementation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 3.2.2. Design considerations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "##### 3.2.2.1. Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 3.3. \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 89
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "   1. Run the `nustorage.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBookâ€™s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "   e.g. `nustorage.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "   e.g. `nustorage.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "   e.g. `nustorage.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c!-- TOC adapted from"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "https://github.com/AY2021S1-CS2103T-W16-3/tp/pull/179/commits/aec461182c194c9ca2c67d7c407fcabb376191ff "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003cdiv class\u003d\"toc-no-bullet-points\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "  * Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 1. Using this User-Guide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This User-Guide aims to aid users in using NUStorage to its fullest potential. In this guide, we will be guiding you through the entire process of using NUStorage, from setting it up on your system to the using the features that NUStorage offers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If you are a new user, we recommend that you read this user guide from start to the end and follow the examples provided in the [commands](#5-commands) section to gain a better understanding of the application. If you are an experienced user, feel free to use the Table-Of-Contents to skip to the section most relevant to you."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If you see an acronym that you don\u0027t understand, kindly refer to the [glossary](#8-glossary-and-terms). If you have further questions regarding NUStorage or this User-Guide, feel free to contact us at _nustorage.support@u.nus.edu_."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 2. Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Welcome to NUStorage, a desktop application that aims to help users to manage __inventory__, __finance transactions__ as well as __accounts__."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage revolutionises the way we can manage our inventory and finances by ridding us of cumbersome traditional means of management, such as books and folders. Instead, everything is now stored and displayed neatly in a fast and low-resource application!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "NUStorage is optimised for store owners and managers who prefer to work with a command line interface (CLI) while still enjoying the visual benefits of a graphical user interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "With proper usage, NUStorage can manage your inventory and finance records much faster than traditional GUI-based applications, streamlining your workflow and increasing productivity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Interested? Read on to get [started](#3-quick-start-guide)!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 3. Quick Start Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "1. Ensure that you have `Java 11` or above installed on your device."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. Download the latest release of `NUStorage.jar` [here](https://github.com/AY2021S1-CS2103T-T11-3/tp/releases)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. Copy the `.jar` file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "4. Double-click on the `.jar` file to start the app. The GUI should look something like this:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    ![Start of NUStorage](images/NUStorage.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "5. The image below explains the relevant areas of the application\u0027s interface:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    ![NUStorage explained](images/NUStorage_explained.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "6. Type a few commands in the command box and press enter to execute. This is small calibration test to ensure that NUStorage is working as intended."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    * Here are some sample commands you can try out to get started:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        * `create_inventory i/Logitech G400 q/20 c/69` to add 20 Logitech G400 gaming mouse that cost $69 to the inventory"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        * `add_finance amt/120.17` to add an inbound transaction of $120.17"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        * `exit` to exit programme"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    * Refer to the [list of commands](#5-commands) below for details of each command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 4. Command Formats"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Words in `UPPER_CASE` are the __parameters__ to be keyed-in by the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * e.g. in `create_inventory i/ITEM`, `ITEM` is a parameter which can be used in this format: `create_inventory i/MacBook`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Only parameters in **square brackets** are **optional**, all others are **compulsory**."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * e.g. `amt/AMOUNT [at/DATE] [TIME]` can be used as the possible formats:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    * `amt/200 at/2020-04-10 18:00`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    * `amt/200 at/2020-04-10`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    * `amt/200 at/18:00`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    * `amt/200 at/2020-04-10`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    * `amt/200`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Notice that the `AMOUNT` field is compulsory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Inputs that require date and time have specific formats."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Date must be formatted in `YYYY-MM-DD`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * Time must be formatted in `HH:mm`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  * e.g. input of `2020-01-01` will show up as `01 Jan 2020` as the date, and `13:00` will show up as `13:00` as the time in NUStorage\u0027s response box."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 5. Commands"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This section shows the commands that can be used with NUStorage. It is divided into three sections:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "1. Inventory commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. Finance account commands"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. Universal commands"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Accompanying the details of each command are figures that show an example of the command and the result of executing the command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.1. Inventory Commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "NUStorage supports the storage and manipulation of inventory records. The following sections detail the commands related to inventory storage, given in alphabetical order."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Commands in this section are best executed when you are in the inventory tab. If you don not know how to switch to the inventory tab, please refer to the [switch to inventory](#531-switch-to-inventory-goto_inventory) section for more information."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.1.1. Add items to inventory: `create_inventory`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "Creates and stores a new inventory record into the inventory list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Format:__ `create_inventory i/ITEM_NAME q/QUANTITY [c/ITEM_COST]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `create_inventory i/iphone q/10 c/20` to create a new inventory record of item `iphone` and quantity `10`. A finance record with the total amount (QUANTITY * ITEM_COST) will also be created."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Add inventory command example](images/commands/create_inventory_command.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Result:__ item `iphone` of quantity `10` is added to the inventory."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Add inventory result example](images/commands/create_inventory_result.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ corresponding finance record of total cost `200` is added to the inventory."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Add inventory result example](images/commands/create_inventory_finance_record_result.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.1.2. Remove items from inventory: `delete_inventory`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Removes the specified record from the inventory list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Format:__ `delete_inventory INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `delete_inventory 1` deletes the inventory record at index `1`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Delete inventory command example](images/commands/delete_inventory_command.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ record at index `1` is removed from the inventory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Delete inventory result example](images/commands/delete_inventory_result.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ Deleted the corresponding finance record."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Delete inventory result example](images/commands/delete_finance_from_inventory_result.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.1.3. Edit record in inventory: `edit_inventory`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "Edits the item name, quantity or unit cost of the specified record in the inventory list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Format:__ `edit_inventory INDEX [i/ITEM_NAME] [q/QUANTITY] [c/ITEM_COST]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `edit_inventory 2 i/iPad q/10 c/2000` edits the inventory record at index `2`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Edit inventory command example](images/commands/edit_inventory_command.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ item name changed from `iphone 12` to `iPad`, quantity changed from `100` to `10` and unit cost from `1000` to `2000`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Edit inventory result example](images/commands/edit_inventory_result.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ updated corresponding finance record with a total cost of `20000`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Edit inventory result example](images/commands/edit_inventory_finance_result.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "#### 5.1.4. Find record in inventory: `find_inventory`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Searches and lists all inventory records that contain the keyword in the item name."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Format:__ `find_inventory KEYWORD`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `find_inventory ipad` finds for inventory records containing the name `ipad`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Edit inventory command example](images/commands/find_inventory_command.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ lists all inventory records with the word `ipad`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![Edit inventory result example](images/commands/find_inventory_result.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.1.5. List inventory records: `list_inventory`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Displays all records in the inventory list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Format:__ `list_inventory`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `list_inventory` lists all inventory records."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![List inventory command example](images/commands/list_inventory_command.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ lists all inventory records."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![List inventory result example](images/commands/list_inventory_result.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "#### 5.1.6. Update inventory record: `update_inventory`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "Displays all records in the inventory list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Format:__ `update_inventory INDEX q/CHANGE_QUANTITY`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Example:__ `update_inventory 1 q/-5` changes the quantity of the inventory by `-5` and updates corresponding finance record. `CHANGE_QUANTITY` can be of negative value."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![List inventory command example](images/commands/update_inventory_command.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ Updated inventory record at `1` from `30` to `25`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![List inventory result example](images/commands/update_inventory_result.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ Updated corresponding finance record."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "![List inventory result example](images/commands/update_inventory_finance_result.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.2. Finance Commands"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "NUStorage supports the storage and manipulation of finance records. The following sections detail the commands related to finance storage, given in alphabetical order."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Commands in this section are best executed when you are in the finance tab. If you don not know how to switch to the finance tab, please refer to the [switch to finance](#532-switch-to-finance-goto_finance) section for more information."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**NOTE:** that some of these commands only work for [stand-alone finance records](#8-glossary-and-terms) (i.e. finance records that are not attached to any inventory records)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.2.1. Add finance records: `add_finance`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "NUStorage allows you to add and save a new finance record into the account. In the [Add Inventory Record](#511-add-items-to-inventory-create_inventory) section, we have seen how a finance record is added when an inventory record is created to reflect the changes in the finance account. However, there are times that you want to create a finance record independent of any inventory records to record an influx/outflow of funds for example."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This is where `add_finance` comes in handy."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: What this command does:**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "`add_finance` allows us to add a stand-alone finance record into NUStorage\u0027s."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Note that this command **can only add a stand-alone finance record**."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Using the command:** Below are instructions on how to use the `add_finance` command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Format:__ `add_finance amt/AMOUNT [at/DATE] [TIME]`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This creates a new finance record of amount `AMOUNT`. If `DATE` and `TIME` are specified, the finance record would reflect that `DATE` and `TIME` in the record."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**NOTE:** If the Date and Time fields are not specified, they will default to the current location\u0027s Date and Time."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Example:__ `add_finance amt/30000 at/2020-03-03`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This creates a new finance record of amount `$30000` on `3rd March 2020`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Enter the example command into the command box as shown below:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Add finance command example](images/commands/add_finance_command.jpg)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Expected Result:__ Finance record of amount `$30000` on `3rd March 2020` is added to the finance account:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Add finance result example](images/commands/add_finance_result.jpg)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.2.2. Delete finance records: `delete_finance`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Previously, in the [Add Finance Records](#521-add-finance-records-add_finance) section, we have created a finance record. Now, lets try to delete it from NUStorage using `delete_finance`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "If you are reading this section without having read the previous section, please ensure that your NUStorage application has at least one finance record stored. If you are unclear on how to do so, refer to the [Adding finance records](#521-add-finance-records-add_finance) section."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: What this command does:**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "`delete_finance` allows us to delete a stand-alone finance record currently stored within NUStorage."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Note that this command **can only delete a stand-alone finance record**."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Using the command:** Below are instructions on how to use the `delete_finance` command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Format:__ `delete_finance INDEX`:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This allows us to delete the finance record with the ID of `INDEX`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Currently, our NUStorage only contains one record, as shown below:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Finance tab finding ID](images/finance_finding_ID.jpg)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Example:__ `delete_finance 1` deletes the finance record with index `1`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Enter the example command into the command box as shown below:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Delete finance command example](images/commands/delete_finance_command.jpg)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Expected Result:__ record at index `1` is removed from the finance account records."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Delete finance result example](images/commands/delete_finance_result.jpg)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.2.3. Edit a finance record: `edit_finance`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Previously, in the [Delete finance records](#522-delete-finance-records-delete_finance) section, we have deleted our only finance record in our application. For this section, ensure you have at least one **stand-alone** finance record (i.e not attached to any inventory records) stored in the application and that you are on the finance tab."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Your NUStorage application should currently look something like this:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![finance with one record](images/finance_withOneRecord.jpg)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: What this command does:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "`edit_finance` allows us to edit details of the stand-alone finance records currently stored within NUStorage. Currently, with `edit_finance`, we are able to edit a finance record\u0027s amount and date."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Note that this command **can only edit a stand-alone finance record**."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Using the command:** Below are instructions on how to use the `edit_finance` command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Format:__ `edit_finance INDEX amt/AMOUNT [at/DATE]`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This allows us to change the amount and date details of the finance record with the `INDEX` ID."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Example:__ `edit_finance 1 amt/120`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This changes the amount of the finance record with the ID of `1` to `120`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Enter the example command into the command box as shown below:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Edit finance command example](images/commands/edit_finance_command.jpg)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Expected Result:__ finance amount changed from `$100` to `$120` while the date remains unchanged."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Edit finance result example](images/commands/edit_finance_result.jpg)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "#### 5.2.4. Find a finance record with a specified keyword: `find_finance`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Notes about the command:**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Previously, in the [Edit finance records](#523-edit-a-finance-record-edit_finance) section, we have learnt how to edit a stand-alone finance record. For this section, let us first add some more finance records to populate our finance account."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Ensure that you have at least 2 finance records, preferably with differing amounts and dates, stored in NUStorage as well as that you are in the `Finance` tab before proceeding. If you are having trouble adding finance records refer to the sections on [Adding finance records](#521-add-finance-records-add_finance) or [Adding inventory records](#511-add-items-to-inventory-create_inventory)."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Currently, your NUStorage application should look something like this:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Finance with three records](images/finance_withThreeRecords.jpg)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "In the event that we have multiple records, it can get a little tedious to locate a certain finance record. We can use the `find_finance` command to find finance records that contain the specified keyword and display them on the record panel."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Using the command:** Below are instructions on how to use the `find_finance` command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Format:__ `find_finance [id/ID] [aft/AFTDATE] [bef/BEFDATE] [item/YESNO]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "\u003c!-- This allows us to find finance records with a Finance ID that contains `ID` if the `ID` field is filled, that were made after `AFTDATE` if the `AFTDATE` field is filled, but before `BEFDATE` if the `BEFDATE` field is filled, and is linked to an inventory record if the `YESNO` field is filled with the `yes` parameter or stand-alone finance records if the `YESNO` field is filled with the `no` parameter. --\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This command allows us to find all finance records with a finance ID that contains `ID` that were created after the date `AFTDATE` abd before the date `BEFDATE`. The parameter `[item/YESNO]` to choose between finance recrods tied to inventory records, or finance records that are stand-alone (`yes` to find only the finance records tied to inventory records, `no` to find stand-alone records only)."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Example:__ `find_finance id/8 aft/2019-10-20 bef/2020-12-30 item/no`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "This allows us to find finance records with IDs that contain \"8\", created place between 20th Oct 2019 to 30th Dec 2020 (inclusive) and are not linked any inventory records."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Enter the example command into the command box as shown below:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Find Finance Command](images/commands/find_finance_command.jpg)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Result:__ finance records that fit the parameters are listed. Below shows the record(s) from the image above that passes the `find_finance` criteria:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Find Finance Result](images/commands/find_finance_result.jpg)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**NOTE:** Do not worry if your resulting display does not match the image above. If the records you added is not exactly the same as the ones shown above, the output would likely not be the same as well."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "#### 5.2.5. List finance records: `list_finance`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Notes about the command:**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Previously, in the [Find finance records](#524-find-a-finance-record-with-a-specified-keyword-find_finance) section, we have learnt how to find certain finance records that contains our provided parameters. For this section, we will be reusing the examples from the [Find finance records](#524-find-a-finance-record-with-a-specified-keyword-find_finance) section. Currently, our NUStorage should look like this:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Finance after Find Command](images/finance_after_find.jpg)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "After finding certain records, chances are we would like to display all the records again. This can be achieved using the `list_finance` command."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The `list_finance` command will result in NUStorage displaying all the finance records stored within it."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "**:information_source: Using the command:** Below are instructions on how to use the `list_finance` command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Format:__ `list_finance`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "This command results in the listing of all finance records."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Example:__ `list_finance`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Enter the example command into the command box as shown below:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![List finance command example](images/commands/list_finance_command.jpg)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "__Result:__ All finance records are listed."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![List finance result example](images/commands/list_finance_result.jpg)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "---"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 5.3. Universal Commands"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following are universal commands for navigating the application."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.1. Switch to inventory: `goto_inventory`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Switches to the inventory tab in the programme."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Format:__ `goto_inventory`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Example:__ `goto_inventory`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "![goto inventory command example](images/commands/goto_inventory_command.png)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ Switched to Inventory tab."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "![goto inventory result example](images/commands/goto_inventory_result.png)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "---"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.2. Switch to finance: `goto_finance`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Switches to the finance tab in the programme."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Format:__ `goto_finance`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "__Example:__ `goto_finance`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "![goto finance command example](images/commands/goto_finance_command.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "__Result:__ Switched to Finance tab."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "![goto finance result example](images/commands/goto_finance_result.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "---"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.3. Quit the programme: `exit`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Saves data locally in a data file and exits the programme."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Format:__ `exit`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Example:__ `exit`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Exit command example](images/commands/exit_command.jpg)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Result:__ Programme terminates."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#### 5.3.4. Undo/Redo the previous command: `undo`/`redo`[coming in v2.0]`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "[_This feature is planned for v2.0_]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "Undo or redo the previous command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Format:__ `undo` or `redo`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Example:__ `undo` or `redo`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "__Result:__ Undo or redo the previous command."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 6. Commands Summary"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.1. Inventory Commands Summary"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following table gives a summary of the [__inventory commands__](#51-inventory-commands) for quick reference and look-ups."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|Description|Command and Example|"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| __Create inventory__ | `create_inventory i/ITEM q/QUANTITY [c/ITEM_COST]` \u003cbr\u003e e.g. `create_inventory i/MacBook pro q/200 c/50` |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Delete inventory__ | `delete_inventory INDEX` \u003cbr\u003e e.g. `delete_inventory 4` |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Edit inventory__ | `edit_inventory INDEX i/ITEM_NAME q/QUANTITY`\u003cbr\u003e e.g. `edit_inventory 3 i/Lenovo Y50 q/10` |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Find inventory__ | `find_inventory KEYWORD` \u003cbr\u003e e.g. `find_inventory ipad` |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __List inventory__ | `list_inventory` |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "| __Update Inventory__| `update_inventory` \u003cbr\u003e e.g. `update_inventory 1 q/50` |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.2. Finance Commands Summary"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following table gives a summary of the [__finance commands__](#52-finance-commands) for quick reference and look-ups."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|Description|Command and Example|"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Add finance__ | `add_finance amt/AMOUNT [at/DATE] [TIME]` \u003cbr\u003e e.g. `add_finance amt/420.69 at/2020-04-23` |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Delete finance__ | `delete_finance INDEX` \u003cbr\u003e e.g. `delete_finance 2` |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Edit finance__ | `edit_finance INDEX amt/AMOUNT [at/DATE] [TIME]` \u003cbr\u003e e.g. `edit_finance 1 amt/120 at/2020-10-01` |"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Find finance__ | `find_finance [id/ID] [aft/DATE] [bef/DATE] [item/YESNO]` \u003cbr\u003e e.g. `find_finance id/10 aft/2019-10-30 bef/2020-03-23 item/yes` |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __List finance__ | `list_finance` |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 6.3. Universal Commands Summary"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "The following table gives a summary of the [__universal commands__](#53-universal-commands) for quick reference and look-ups."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|Description|Command and Example|"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Exit programme__ | `exit` |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Switch to inventory__ | `goto_inventory` |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "| __Switch to finance__ | `goto_finance` |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 7. FAQs"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 7.1. How do I migrate the data to another computer?"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "WARNING: doing so will overwrite the existing data you may have on the other device. Please make sure you make a backup before migrating data."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Steps to migrate data:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "1. Locate the data files under the directory (folder) `./data`. The data files are names `inventory.json` and `financeAccount.json`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. Copy the files to the other device."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. Place the two files under the directory `./data`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "4. Restart NUStorage on the other device to load the data."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 7.2. How do I combine data from two devices?"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "Currently, NUStorage does not support the merging of data between different devices. NUStorage only supports moving of data from one device to another. Please see FAQ 6.1 regarding how to migrate data."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "### 7.3. Can I directly modify the storage file?"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "Modifying the storage file is possible but NOT RECOMMENDED! Doing so may result in a complete data loss."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## 8. Glossary and Terms"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "1. `CLI`: command line interface."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "2. `GUI`: graphical user interface."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "3. `.jar`: The file type that NUStorage is released in. This is similar to the `.exe` files in Windows and `.app` files in MacOS."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "4. `stand-alone finance records`: Finance records that are not attached to any inventory records."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 57,
      "FizzyAgent": 11,
      "Elgoh": 76,
      "howtoosee": 250,
      "Door-oof": 25,
      "-": 96
    }
  },
  {
    "path": "docs/_sass/minima/_layout.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Site header"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ".site-header {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  border-top: 5px solid $brand-color-dark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  border-bottom: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  min-height: $spacing-unit * 1.865;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  line-height: $base-line-height * $base-font-size * 2.25;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  // Positioning context for the mobile navigation icon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  position: relative;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".site-title {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.625);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  font-weight: 300;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  letter-spacing: -1px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  float: left;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  @include media-query($on-palm) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 45px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u0026:visited {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $brand-color-dark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".site-nav {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  position: absolute;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  top: 9px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  right: $spacing-unit / 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: $background-color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  border: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  border-radius: 5px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  text-align: right;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  .nav-trigger {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  .menu-icon {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 36px;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 26px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e svg path {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      fill: $brand-color-dark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  label[for\u003d\"nav-trigger\"] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 36px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 36px;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    z-index: 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: pointer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  input ~ .trigger {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  input:checked ~ .trigger {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 5px;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  .page-link {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    color: $text-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: $base-line-height;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 5px 10px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // Gaps between nav items, but not on the last one"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0026:not(:last-child) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-right: 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 20px;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (min-width: $on-medium) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    position: static;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: inherit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    label[for\u003d\"nav-trigger\"] {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    .menu-icon {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      display: none;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    input ~ .trigger {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    .page-link {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      display: inline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026:not(:last-child) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-right: 20px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      margin-left: auto;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": " * Page content"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".page-content {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: $spacing-unit 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  flex: 1 0 auto;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".page-heading {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".post-list-heading {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.75);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".post-list {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-left: 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  list-style: none;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003e li {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".post-meta {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: $small-font-size;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "  color: $brand-color;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".post-link {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(1.5);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * Posts"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".post-header {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".post-title,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".post-content h1 {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  @include relative-font-size(2.625);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "  letter-spacing: -1px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  line-height: 1.15;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(2.625);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".post-content {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "  h1, h2, h3 { margin-top: $spacing-unit * 2 }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "  h4, h5, h6 { margin-top: $spacing-unit }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "  h2 {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.75);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      @include relative-font-size(2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "  h3 {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.375);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      @include relative-font-size(1.625);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  h4 {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.25);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "  h5 {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.125);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  h6 {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @include relative-font-size(1.0625);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".social-media-list {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  display: table;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  margin: 0 auto;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  li {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 5px 10px 5px 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0026:last-of-type { margin-right: 0 }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    a {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: $spacing-unit / 4;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      border: 1px solid $brand-color-light;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026:hover { border-color: darken($brand-color-light, 10%) }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * Pagination navbar"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".pagination {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $spacing-unit;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  @extend .social-media-list;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  li {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    a, div {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "      min-width: 41px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "      text-align: center;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      box-sizing: border-box;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    div {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      display: block;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      padding: $spacing-unit / 4;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      border: 1px solid transparent;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "      \u0026.pager-edge {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        color: darken($brand-color-light, 5%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 1px dashed;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": " * Grid helpers"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width: $on-large) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  .one-half {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    width: calc(50% - (#{$spacing-unit} / 2));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Table of Content without bullet points"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ".toc-no-bullet-points ul, .toc-no-bullet-points ol {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  list-style-type: none;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 9,
      "-": 263
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "title: NUStorage"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103T-T11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T11-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T11-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Logo](./images/AboutUs/logo.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "![Ui](./images/Ui.png)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* NUStorage is a desktop application for managing inventory, transaction records and accounts."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* NUStorage is mainly targeted to store owners who need help in visualising whatâ€™s going on in their store easily."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* [User Guide](./docs/UserGuide.md)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* [Developer Guide](./docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* [About Us](./docs/AboutUs.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "---"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "## License: [MIT](LICENSE)"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 3,
      "howtoosee": 21,
      "-": 12
    }
  },
  {
    "path": "docs/team/damithc.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Damith\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/dora.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Dora\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/eeliang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Ee Liang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/eugene.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Eugene\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/pinxi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Pin Xi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/xihao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Xihao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/team/yuyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "title: Yu Yang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Project: NUStorage"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "NUStorage is a desktop inventory/finance managing application used for teaching Software Engineering principles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 12
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "Create a `RemarkCommandParser` class in the `nustorage.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the personâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "Create a new `Remark` in `nustorage.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "Simply add the following to [`nustorage.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Thatâ€™s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBookâ€™s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 6,
      "-": 388
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e â€”  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, weâ€™ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Letâ€™s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "The `address` field in `Person` is actually an instance of the `nustorage.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 102
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. â€¦â€‹\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e â€”  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEAâ€™s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `nustorage.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what weâ€™re looking for. However, it is just an `Interface`. Letâ€™s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what weâ€™re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now letâ€™s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so letâ€™s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Letâ€™s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Letâ€™s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Letâ€™s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Letâ€™s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now letâ€™s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Letâ€™s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 249
    }
  },
  {
    "path": "src/main/java/nustorage/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/nustorage/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/nustorage/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.FinanceAccountStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.InventoryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.JsonFinanceAccountStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        FinanceAccountStorage financeAccountStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                new JsonFinanceAccountStorage(userPrefs.getFinanceAccountFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        storage \u003d new StorageManager(financeAccountStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //         logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //     initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        //"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyFinanceAccount\u003e optionalFinanceAccount;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        ReadOnlyFinanceAccount initialFinanceAccount;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e optionalInventory;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        ReadOnlyInventory initialInventory;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            optionalFinanceAccount \u003d storage.readFinanceAccount();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (optionalFinanceAccount.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty finance account!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialFinanceAccount \u003d optionalFinanceAccount.orElseGet(FinanceAccount::new);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty finance account!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialFinanceAccount \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty finance account!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialFinanceAccount \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            optionalInventory \u003d storage.readInventory();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (optionalInventory.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty inventory!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialInventory \u003d optionalInventory.orElseGet(Inventory::new);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty inventory!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty inventory!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new ModelManager(initialFinanceAccount, initialInventory, userPrefs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 19,
      "howtoosee": 70,
      "-": 150
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static final String LOG_FILE \u003d \"nustorage.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_FINANCE_LISTED_OVERVIEW \u003d \"%1$d finance records listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX \u003d \"The finance index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_FINANCE_HAS_INVENTORY \u003d \"The finance record is tagged to an inventory item, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"please delete the inventory or edit the inventory cost.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_INVENTORY_RECORDS_LISTED_OVERVIEW \u003d \"%1$d inventory records listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX \u003d \"The inventory index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "Elgoh": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/nustorage/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/nustorage/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nustorage/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 1,
      "FizzyAgent": 10
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/nustorage/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/nustorage/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    ObservableList\u003cInventoryRecord\u003e getFilteredInventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    ObservableList\u003cFinanceRecord\u003e getFilteredFinanceList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 3,
      "FizzyAgent": 5,
      "Door-oof": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/nustorage/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.NuStorageParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final NuStorageParser nuStorageParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        nuStorageParser \u003d new NuStorageParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        Command command \u003d nuStorageParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            storage.saveFinanceAccount(model.getFinanceAccount());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ObservableList\u003cInventoryRecord\u003e getFilteredInventory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return model.getFilteredInventory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public ObservableList\u003cFinanceRecord\u003e getFilteredFinanceList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return model.getFilteredFinanceList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 3,
      "FizzyAgent": 13,
      "Door-oof": 3,
      "howtoosee": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/AddFinanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Adds a finance record to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class AddFinanceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_finance\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a finance record.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"[DATE] [TIME]]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_AMOUNT + \"30000 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_DATETIME + \"2020-03-30 18:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New finance record added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final FinanceRecord newRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates an AddFinanceCommand to add the specified {@code FinanceWindow Record}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public AddFinanceCommand(FinanceRecord newRecord) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(newRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.newRecord \u003d newRecord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.addFinanceRecord(newRecord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newRecord));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        //ignore comparison of internal ID field as user cannot set it"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (other instanceof AddFinanceCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return newRecord.hasSameData(((AddFinanceCommand) other).newRecord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 56,
      "Door-oof": 4
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 1,
      "FizzyAgent": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/CreateInventoryRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * An add inventory command class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class CreateInventoryRecordCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create_inventory\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an inventory record in the Inventory. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + \"ITEM_DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"[\" + PREFIX_ITEM_COST + \"ITEM_COST]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Inventory record created: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY_RECORD \u003d \"This item already exists in the Inventory\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final InventoryRecord newInventoryRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final FinanceRecord newFinanceRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructs an AddInventoryCommand class using a new inventory record."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param newInventoryRecord New inventory record."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param newFinanceRecord New finance record."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CreateInventoryRecordCommand(InventoryRecord newInventoryRecord, FinanceRecord newFinanceRecord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(newInventoryRecord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.newInventoryRecord \u003d newInventoryRecord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.newFinanceRecord \u003d newFinanceRecord;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (model.hasInventoryRecord(newInventoryRecord)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INVENTORY_RECORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.addInventoryRecord(newInventoryRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        newInventoryRecord.setFinanceRecord(newFinanceRecord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.addFinanceRecord(newFinanceRecord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newInventoryRecord));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof CreateInventoryRecordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 newInventoryRecord.equals(((CreateInventoryRecordCommand) other).newInventoryRecord));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 10,
      "Elgoh": 53
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/DeleteFinanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Deletes an existing finance record from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class DeleteFinanceCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_finance\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \": Deletes the finance record identified by the index number used in the finance list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FinanceWindow record deleted: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates an AddFinanceCommand to add the specified {@code FinanceWindow Record}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public DeleteFinanceCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        List\u003cFinanceRecord\u003e lastShownList \u003d model.getFilteredFinanceList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (recordToDelete.taggedToInventory()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FINANCE_HAS_INVENTORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.deleteFinanceRecord(recordToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recordToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 51,
      "Door-oof": 3
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/DeleteInventoryRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class DeleteInventoryRecordCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_inventory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \": Deletes the inventory record identified by the index number used in InventoryWindow.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_DELETE_INVENTORY_RECORD_SUCCESS \u003d \"Deleted Inventory record: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public DeleteInventoryRecordCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        List\u003cInventoryRecord\u003e lastShownList \u003d model.getFilteredInventory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord inventoryRecordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        FinanceRecord financeRecordToDelete \u003d model.getFinanceRecord(inventoryRecordToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        model.deleteFinanceRecord(financeRecordToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.deleteInventoryRecord(inventoryRecordToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INVENTORY_RECORD_SUCCESS, inventoryRecordToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof DeleteInventoryRecordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteInventoryRecordCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 3,
      "FizzyAgent": 1,
      "Elgoh": 48
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/EditFinanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.model.Model.PREDICATE_SHOW_ALL_INVENTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Edits the details of an existing item in the InventoryWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class EditFinanceCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_finance\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the FinanceWindow Record specified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"by the index number used in the displayed inventory. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"[DATE] [TIME]] \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_AMT_MISSING \u003d \"\u0027amt/\u0027 tag must be used.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_EDIT_FINANCE_SUCCESS \u003d \"Edited finance record: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final EditFinanceDescriptor editFinanceDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param editFinanceDescriptor details to edit the person with"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public EditFinanceCommand(Index index, EditFinanceDescriptor editFinanceDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(editFinanceDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.editFinanceDescriptor \u003d new EditFinanceDescriptor(editFinanceDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        List\u003cFinanceRecord\u003e lastShownList \u003d model.getFilteredFinanceList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FINANCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord financeRecordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (financeRecordToEdit.taggedToInventory()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FINANCE_HAS_INVENTORY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord editedFinanceRecord \u003d createEditedFinanceRecord("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                financeRecordToEdit, editFinanceDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.setFinanceRecord(financeRecordToEdit, editedFinanceRecord);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.updateFilteredInventoryList(PREDICATE_SHOW_ALL_INVENTORY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FINANCE_SUCCESS, editedFinanceRecord));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates and returns a {@code InventoryRecord} with the details of {@code inventoryRecord}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static FinanceRecord createEditedFinanceRecord("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            FinanceRecord financeRecord, EditFinanceDescriptor editFinanceDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assert financeRecord !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        double updatedAmount \u003d editFinanceDescriptor.getAmount().orElse(financeRecord.getAmount());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        LocalDateTime updatedDatetime \u003d editFinanceDescriptor.getDatetime().orElse(financeRecord.getDateTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new FinanceRecord(updatedAmount, updatedDatetime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!(other instanceof EditFinanceCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        EditFinanceCommand e \u003d (EditFinanceCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                \u0026\u0026 editFinanceDescriptor.equals(e.editFinanceDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static class EditFinanceDescriptor {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        private Double amount;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        private LocalDateTime datetime;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public EditFinanceDescriptor() {}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public EditFinanceDescriptor(EditFinanceDescriptor toCopy) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            setDatetime(toCopy.datetime);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, datetime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public void setAmount(double amount) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public Optional\u003cDouble\u003e getAmount() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public void setDatetime(LocalDateTime datetime) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getDatetime() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return Optional.ofNullable(datetime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            if (!(other instanceof EditFinanceDescriptor)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            EditFinanceDescriptor e \u003d (EditFinanceDescriptor) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    \u0026\u0026 getDatetime().equals(e.getDatetime());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 162,
      "Elgoh": 4,
      "howtoosee": 1
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/EditInventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.model.Model.PREDICATE_SHOW_ALL_INVENTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Edits the details of an existing item in the InventoryWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class EditInventoryCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_inventory\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the Item specified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"by the index number used in the displayed inventory. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"[\" + PREFIX_ITEM_DESCRIPTION + \"ITEM_NAME] \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_EDIT_INVENTORY_SUCCESS \u003d \"Edited Inventory record: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY_RECORD \u003d \"This inventory record already \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"exists in the InventoryWindow\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final EditInventoryDescriptor editInventoryDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param editInventoryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public EditInventoryCommand(Index index, EditInventoryDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(editInventoryDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.editInventoryDescriptor \u003d new EditInventoryDescriptor(editInventoryDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        List\u003cInventoryRecord\u003e lastShownList \u003d model.getFilteredInventory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord inventoryRecordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord editedInventoryRecord \u003d createEditedInventoryRecord("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                inventoryRecordToEdit, editInventoryDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!inventoryRecordToEdit.equals(editedInventoryRecord)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 model.hasInventoryRecord(editedInventoryRecord)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INVENTORY_RECORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FinanceRecord financeRecordToEdit \u003d model.getFinanceRecord(inventoryRecordToEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FinanceRecord editedFinanceRecord \u003d new FinanceRecord("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                editedInventoryRecord.getUnitCost() * editedInventoryRecord.getQuantity(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                editedInventoryRecord.getDateTime(), true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        editedInventoryRecord.setFinanceRecord(editedFinanceRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        editedInventoryRecord.setFinanceRecord(editedFinanceRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.setInventoryRecord(inventoryRecordToEdit, editedInventoryRecord);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.setFinanceRecord(financeRecordToEdit, editedFinanceRecord);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.updateFilteredInventoryList(PREDICATE_SHOW_ALL_INVENTORY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INVENTORY_SUCCESS, editedInventoryRecord));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Creates and returns a {@code InventoryRecord} with the details of {@code inventoryRecord}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private static InventoryRecord createEditedInventoryRecord("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            InventoryRecord inventoryRecord, EditInventoryDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assert inventoryRecord !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Integer updatedQuantity \u003d editInventoryDescriptor.getQuantity().orElse(inventoryRecord.getQuantity());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String updatedDescription \u003d editInventoryDescriptor.getDescription().orElse(inventoryRecord.getItemName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime dateTime \u003d editInventoryDescriptor.getDateTime().orElse(inventoryRecord.getDateTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Double unitCost \u003d editInventoryDescriptor.getUnitCost().orElse(inventoryRecord.getUnitCost());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new InventoryRecord(updatedDescription, updatedQuantity, unitCost, dateTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!(other instanceof EditInventoryCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        EditInventoryCommand e \u003d (EditInventoryCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 editInventoryDescriptor.equals(e.editInventoryDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static class EditInventoryDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        private Integer quantity;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        private Double unitCost;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public EditInventoryDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public EditInventoryDescriptor(EditInventoryDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            setUnitCost(toCopy.unitCost);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(quantity, description);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public Optional\u003cInteger\u003e getQuantity() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public void setDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public void setUnitCost(Double unitCost) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public Optional\u003cDouble\u003e getUnitCost() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Optional.ofNullable(unitCost);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (!(other instanceof EditInventoryDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            EditInventoryDescriptor e \u003d (EditInventoryDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "Elgoh": 197
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/FindFinanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AFTER_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_BEFORE_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_HAS_INVENTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FindFinanceCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_finance\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all finance records whose which ID contains \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"the specified ID string, or occurring before or after the given date times, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"or those tagged / not tagged to items \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Parameters:  \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_ID + \"ID] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_AFTER_DATETIME + \"[DATE]] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_BEFORE_DATETIME + \"[DATE]] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"[\" + PREFIX_HAS_INVENTORY + \"[YES/NO]]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_ID + \"123 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_AFTER_DATETIME + \"2019-10-30 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_BEFORE_DATETIME + \"2020-03-20 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            + PREFIX_HAS_INVENTORY + \"y\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private Optional\u003cString\u003e idMatch;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private Optional\u003cLocalDate\u003e afterDatetime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private Optional\u003cLocalDate\u003e beforeDatetime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private Optional\u003cBoolean\u003e filterInventory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates a command that searches for finance records"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        idMatch \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        afterDatetime \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        beforeDatetime \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        filterInventory \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the command to search for finance records with ID containing {@Code idtoMatch}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param idToMatch Sub-ID for finding finance records"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand setIdMatch(String idToMatch) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        idMatch \u003d Optional.of(idToMatch);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the command to search for finance records which took place after {@Code date}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param date Date to search finance records from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand setAfterDatetime(LocalDate date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        afterDatetime \u003d Optional.of(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the command to search for finance records which took place before {@Code date}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param date Date to search finance records until"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand setBeforeDatetime(LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        beforeDatetime \u003d Optional.of(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the command to search for finance records with or without inventory"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param hasInventory Filter with inventory if true, else filter without"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand setHasInventory(boolean hasInventory) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        filterInventory \u003d Optional.of(hasInventory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private Predicate\u003cFinanceRecord\u003e getPredicate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return record -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            if (filterInventory.isPresent() \u0026\u0026 filterInventory.get() !\u003d record.taggedToInventory()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            if (idMatch.isPresent() \u0026\u0026 !(record.getID() + \"\").contains(idMatch.get())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (afterDatetime.isPresent() \u0026\u0026 record.getDateTime().toLocalDate().isBefore(afterDatetime.get())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (beforeDatetime.isPresent() \u0026\u0026 record.getDateTime().toLocalDate().isAfter(beforeDatetime.get())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        };"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        model.updateFilteredFinanceList(getPredicate());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                String.format(Messages.MESSAGE_FINANCE_LISTED_OVERVIEW, model.getFilteredFinanceList().size()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                || (other instanceof FindFinanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                \u0026\u0026 this.getPredicate().equals(((FindFinanceCommand) other).getPredicate())); // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 130,
      "howtoosee": 2
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/FindInventoryRecordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecordNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Finds and lists all inventory records in the inventory whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class FindInventoryRecordCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_inventory\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all inventory records \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"which item names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" macbook iphone samsung\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final InventoryRecordNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public FindInventoryRecordCommand(InventoryRecordNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        model.updateFilteredInventoryList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                String.format(Messages.MESSAGE_INVENTORY_RECORDS_LISTED_OVERVIEW, model.getFilteredInventory().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof FindInventoryRecordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindInventoryRecordCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 43
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/ListFinanceRecordsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.model.Model.PREDICATE_SHOW_ALL_FINANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * List all finance records in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ListFinanceRecordsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_finance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all finance records!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        model.updateFilteredFinanceList(PREDICATE_SHOW_ALL_FINANCE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 24
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/ListInventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.model.Model.PREDICATE_SHOW_ALL_INVENTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * Lists all inventory in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ListInventoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_inventory\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all inventory records!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        model.updateFilteredInventoryList(PREDICATE_SHOW_ALL_INVENTORY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 23,
      "Elgoh": 1
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/UpdateInventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.model.Model.PREDICATE_SHOW_ALL_INVENTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UpdateInventoryCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update_inventory\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the quantity of the item specified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            + \"by the index number used in the displayed inventory. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            + \"Existing values will be updated by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"CHANGE IN QUANTITY] \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY_RECORD \u003d \"Nothing has been updated!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_UPDATE_INVENTORY_SUCCESS \u003d \"Updated Item quantity: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"The change in quantity field must be provided.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static final String MESSAGE_INVALID_UPDATE_OPERATION \u003d \"You cannot update this item by that quantity!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final UpdateInventoryDescriptor updateInventoryDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index index of the inventory record in the inventory record list to update"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param updateInventoryDescriptor details to update the record with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public UpdateInventoryCommand(Index index, UpdateInventoryDescriptor updateInventoryDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(updateInventoryDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.updateInventoryDescriptor \u003d new UpdateInventoryDescriptor(updateInventoryDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        List\u003cInventoryRecord\u003e lastShownInventoryList \u003d model.getFilteredInventory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownInventoryList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INVENTORY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        InventoryRecord inventoryRecordToUpdate \u003d lastShownInventoryList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        InventoryRecord updatedInventoryRecord;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            updatedInventoryRecord \u003d createUpdatedInventoryRecord(inventoryRecordToUpdate, updateInventoryDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (!inventoryRecordToUpdate.equals(updatedInventoryRecord)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    \u0026\u0026 model.hasInventoryRecord(updatedInventoryRecord)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_INVENTORY_RECORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_UPDATE_OPERATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        FinanceRecord oldFinanceRecord \u003d model.getFinanceRecord(inventoryRecordToUpdate.getFinanceId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        double cost \u003d inventoryRecordToUpdate.getUnitCost();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FinanceRecord newFinanceRecord \u003d new FinanceRecord(updatedInventoryRecord.getQuantity() * cost);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        updatedInventoryRecord.setFinanceRecord(newFinanceRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        model.setFinanceRecord(oldFinanceRecord, newFinanceRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        model.setInventoryRecord(inventoryRecordToUpdate, updatedInventoryRecord);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        model.updateFilteredInventoryList(PREDICATE_SHOW_ALL_INVENTORY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_INVENTORY_SUCCESS, updatedInventoryRecord));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private static InventoryRecord createUpdatedInventoryRecord("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            InventoryRecord inventoryRecord, UpdateInventoryDescriptor updateInventoryDescriptor)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert inventoryRecord !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Integer updateQuantityBy \u003d updateInventoryDescriptor.getChangeInQuantity().orElse(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Integer oldQuantity \u003d inventoryRecord.getQuantity();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Integer newQuantity \u003d updateQuantityBy + oldQuantity;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Double unitCost \u003d inventoryRecord.getUnitCost();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (newQuantity \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_UPDATE_OPERATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String itemDescription \u003d inventoryRecord.getItemName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        LocalDateTime newDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new InventoryRecord(itemDescription, newQuantity, unitCost, newDateTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static class UpdateInventoryDescriptor {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        private Integer changeInQuantity;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public UpdateInventoryDescriptor() {}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public UpdateInventoryDescriptor(UpdateInventoryDescriptor toCopy) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            setChangeInQuantity(toCopy.changeInQuantity);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return CollectionUtil.isAnyNonNull(changeInQuantity);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public void setChangeInQuantity(int quantity) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            this.changeInQuantity \u003d quantity;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public Optional\u003cInteger\u003e getChangeInQuantity() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return Optional.ofNullable(changeInQuantity);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (!(other instanceof EditInventoryCommand.EditInventoryDescriptor)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EditInventoryCommand.EditInventoryDescriptor e \u003d (EditInventoryCommand.EditInventoryDescriptor) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return getChangeInQuantity().equals(e.getQuantity());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 146,
      "Elgoh": 5
    }
  },
  {
    "path": "src/main/java/nustorage/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Represents an error which occurs during execution of a {@link nustorage.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "howtoosee": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/AddFinanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.AddFinanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class AddFinanceCommandParser implements Parser\u003cAddFinanceCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFinanceCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * and returns an AddFinanceCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public AddFinanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        double amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord record;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            LocalDateTime datetime \u003d ParserUtil.parseDatetime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            record \u003d new FinanceRecord(amount, datetime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            record \u003d new FinanceRecord(amount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new AddFinanceCommand(record);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 50
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if input is parsed, else false."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean hasValue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return !argMultimap.isEmpty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if any prefix is stored, else false."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean hasAnyPrefix() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return ((argMultimap.containsKey(new Prefix(\"\")) \u0026\u0026 argMultimap.size() \u003e 1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                || (!argMultimap.containsKey(new Prefix(\"\")) \u0026\u0026 hasValue()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 16,
      "-": 59
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    // InventoryWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\"); // can change to n after removing name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final Prefix PREFIX_ITEM_DESCRIPTION \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_ITEM_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    // FinanceWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"amt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"at/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_AFTER_DATETIME \u003d new Prefix(\"aft/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_BEFORE_DATETIME \u003d new Prefix(\"bef/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final Prefix PREFIX_HAS_INVENTORY \u003d new Prefix(\"item/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 10,
      "Elgoh": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/CreateInventoryRecordCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.CreateInventoryRecordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Parses input arguments and creates a new AddInventory object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class CreateInventoryRecordCommandParser implements Parser\u003cCreateInventoryRecordCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses InventoryWindow commands arguments from the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param args User arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @return An AddInventoryCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws ParseException When user arguments results in a parsing error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public CreateInventoryRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_ITEM_DESCRIPTION,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        PREFIX_ITEM_COST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUANTITY, PREFIX_ITEM_DESCRIPTION)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    CreateInventoryRecordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String itemDescription \u003d ParserUtil.parseItemDescription(argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        double unitCost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_COST).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            unitCost \u003d ParserUtil.parseItemCost(argMultimap.getValue(PREFIX_ITEM_COST).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            unitCost \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FinanceRecord financeRecord \u003d new FinanceRecord(unitCost * quantity, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord inventoryRecord \u003d new InventoryRecord(itemDescription, quantity, unitCost);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new CreateInventoryRecordCommand(inventoryRecord, financeRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 6,
      "Elgoh": 50
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/DeleteFinanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.DeleteFinanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class DeleteFinanceCommandParser implements Parser\u003cDeleteFinanceCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFinanceCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * and returns a DeleteFinanceCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public DeleteFinanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new DeleteFinanceCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFinanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 25
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/DeleteInventoryRecordCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.DeleteInventoryRecordCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Parses input arguments and creates a new DeleteInventoryRecordCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class DeleteInventoryRecordCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteInventoryRecordCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * and returns a DeleteInventoryRecordCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public DeleteInventoryRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return new DeleteInventoryRecordCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteInventoryRecordCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 28
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/EditFinanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.EditFinanceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.EditFinanceCommand.EditFinanceDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Parses input arguments and creates a new EditInventoryCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class EditFinanceCommandParser implements Parser\u003cEditFinanceCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditFinanceCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * and returns an EditFinanceCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public EditFinanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    EditFinanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        EditFinanceDescriptor editFinanceDescriptor \u003d new EditFinanceDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            editFinanceDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException(EditFinanceCommand.MESSAGE_AMT_MISSING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            editFinanceDescriptor.setDatetime(ParserUtil.parseDatetime("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!editFinanceDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException(EditFinanceCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new EditFinanceCommand(index, editFinanceDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 49,
      "Door-oof": 1,
      "Elgoh": 2
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/EditInventoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.EditInventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.EditInventoryCommand.EditInventoryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Parses input arguments and creates a new EditInventoryCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class EditInventoryCommandParser implements Parser\u003cEditInventoryCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditInventoryCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * and returns an EditInventoryCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public EditInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY, PREFIX_ITEM_DESCRIPTION,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        PREFIX_ITEM_COST, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    EditInventoryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        EditInventoryCommand.EditInventoryDescriptor editInventoryDescriptor \u003d new EditInventoryDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            editInventoryDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            editInventoryDescriptor.setDescription(ParserUtil.parseItemDescription("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_COST).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            editInventoryDescriptor.setUnitCost(ParserUtil.parseItemCost("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    argMultimap.getValue(PREFIX_ITEM_COST).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            editInventoryDescriptor.setDateTime(ParserUtil.parseDatetime("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!editInventoryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException(EditInventoryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new EditInventoryCommand(index, editInventoryDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 61,
      "Door-oof": 1
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/FindFinanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AFTER_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_BEFORE_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_HAS_INVENTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.FindFinanceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Parses input arguments and creates a new FindInventoryRecordCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FindFinanceCommandParser implements Parser\u003cFindFinanceCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindInventoryRecordCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * and returns a FindInventoryRecordCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FindFinanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_AFTER_DATETIME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                        PREFIX_BEFORE_DATETIME, PREFIX_HAS_INVENTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!argMultimap.hasAnyPrefix()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindFinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FindFinanceCommand command \u003d new FindFinanceCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            command.setIdMatch(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BEFORE_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            LocalDateTime datetime \u003d ParserUtil.parseDatetime(argMultimap.getValue(PREFIX_BEFORE_DATETIME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            command.setBeforeDatetime(datetime.toLocalDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AFTER_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            LocalDateTime datetime \u003d ParserUtil.parseDatetime(argMultimap.getValue(PREFIX_AFTER_DATETIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            command.setAfterDatetime(datetime.toLocalDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HAS_INVENTORY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            boolean hasInventory \u003d ParserUtil.parseYesNo(argMultimap.getValue(PREFIX_HAS_INVENTORY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            command.setHasInventory(hasInventory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 54,
      "Door-oof": 4
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/FindInventoryRecordCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.FindInventoryRecordCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecordNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Parses input arguments and creates a new FindInventoryRecordCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class FindInventoryRecordCommandParser implements Parser\u003cFindInventoryRecordCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindInventoryRecordCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * and returns a FindInventoryRecordCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public FindInventoryRecordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInventoryRecordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new FindInventoryRecordCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new InventoryRecordNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 33
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/NuStorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.AddFinanceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.CreateInventoryRecordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.DeleteFinanceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.DeleteInventoryRecordCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.EditFinanceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.EditInventoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.FindFinanceCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.commands.FindInventoryRecordCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ListFinanceRecordsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ListInventoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.logic.commands.UpdateInventoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class NuStorageParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        case ListInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new ListInventoryCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case CreateInventoryRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return new CreateInventoryRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case EditInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return new EditInventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case DeleteInventoryRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return new DeleteInventoryRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case FindInventoryRecordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return new FindInventoryRecordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        case UpdateInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new UpdateInventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        case AddFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new AddFinanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        case EditFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new EditFinanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        case FindFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new FindFinanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        case DeleteFinanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new DeleteFinanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        case ListFinanceRecordsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new ListFinanceRecordsCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 6,
      "FizzyAgent": 28,
      "Elgoh": 15,
      "Door-oof": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount is not a decimal value.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME \u003d \"Date must be of the format yyyy-mm-dd HH:mm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANITY \u003d \"Quantity is not a non-zero integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_COST \u003d \"Item cost must be a positive numerical value.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_INVALID_YESNO \u003d \"Yes/No input must be one of the following: yes/y/no/n.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses {@code a} into an double and returns it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static double parseItemCost(String itemCost) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(itemCost);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        String trimmedAmount \u003d itemCost.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            double cost \u003d Double.parseDouble(trimmedAmount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            if (cost \u003c\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_ITEM_COST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return cost;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ITEM_COST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses {@code itemDescription} into an String and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static String parseItemDescription(String itemDescription) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return itemDescription.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses {@code quantity} into an int and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws ParseException if the specified quantity is invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static int parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_QUANITY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses {@code amount} into an {@code double} and returns it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the specified amount is invalid (non-double value)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static double parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return Double.parseDouble(trimmedAmount);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses {@code datetimeList} into an {@code LocalDateTime} and returns it."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the specified input is invalid (not correctly formatted)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static LocalDateTime parseDatetime(String datetime) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(datetime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        LocalTime time \u003d LocalTime.now();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        String[] datetimeArray \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (datetimeArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                date \u003d LocalDate.parse(datetimeArray[0]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            } catch (DateTimeParseException ex1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    time \u003d LocalTime.parse(datetimeArray[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                } catch (DateTimeParseException ex2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } else if (datetimeArray.length \u003e 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                date \u003d LocalDate.parse(datetimeArray[0]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                time \u003d LocalTime.parse(datetimeArray[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            } catch (DateTimeParseException ex1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    date \u003d LocalDate.parse(datetimeArray[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    time \u003d LocalTime.parse(datetimeArray[0]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                } catch (DateTimeParseException ex2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses {@code yesNoString} into an {@code boolean} and returns it."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @throws ParseException if the specified index is invalid (does not correspond to a y/n input)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static boolean parseYesNo(String yesNoString) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (yesNoString.equals(\"yes\") || yesNoString.equals(\"y\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (yesNoString.equals(\"no\") || yesNoString.equals(\"n\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_YESNO);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 98,
      "Elgoh": 24,
      "-": 25
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/UpdateInventoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.logic.commands.UpdateInventoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.logic.commands.UpdateInventoryCommand.UpdateInventoryDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UpdateInventoryCommandParser implements Parser\u003cUpdateInventoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateInventoryCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * and returns an UpdateInventoryCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param args the string of arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the UpdateInventoryCommand for execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public UpdateInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    UpdateInventoryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        UpdateInventoryCommand.UpdateInventoryDescriptor updateInventoryDescriptor \u003d new UpdateInventoryDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            updateInventoryDescriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    .setChangeInQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!updateInventoryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new ParseException(UpdateInventoryCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return new UpdateInventoryCommand(index, updateInventoryDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 48
    }
  },
  {
    "path": "src/main/java/nustorage/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/nustorage/model/FinanceAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceAccount implements ReadOnlyFinanceAccount {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final FinanceRecordList financeRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeRecords \u003d new FinanceRecordList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public FinanceAccount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceAccount(ReadOnlyFinanceAccount toBeCopied) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecords(List\u003cFinanceRecord\u003e financeRecords) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.financeRecords.setFinanceRecords(financeRecords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void resetData(ReadOnlyFinanceAccount newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        setFinanceRecords(newData.getFinanceList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean hasFinanceRecord(FinanceRecord financeRecord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(financeRecord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return financeRecords.contains(financeRecord);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void addFinanceRecord(FinanceRecord financeRecord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeRecords.add(financeRecord);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecord(FinanceRecord target, FinanceRecord editedRecord) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeRecords.setFinanceRecord(target, editedRecord);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord getFinanceRecord(int recordId) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return financeRecords.getFinanceRecord(recordId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Removes the finance record with the corresponding index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param key FinanceWindow record to be removed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void removeFinanceRecord(FinanceRecord key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeRecords.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return financeRecords.asUnmodifiableObservableList().size() + \" finance records\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ObservableList\u003cFinanceRecord\u003e getFinanceList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return financeRecords.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                || (other instanceof FinanceAccount // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                \u0026\u0026 financeRecords.equals(((FinanceAccount) other).financeRecords));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return financeRecords.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 101,
      "howtoosee": 5,
      "Door-oof": 4
    }
  },
  {
    "path": "src/main/java/nustorage/model/Inventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Class to store different InventoryRecords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Inventory implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final InventoryRecordList inventoryRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventoryRecords \u003d new InventoryRecordList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Inventory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates an InventoryWindow using the InventoryRecord in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Replaces the contents of the InventoryRecordList with {@code inventoryRecords}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * {@code inventoryRecords} must not contain duplicate records."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setInventoryRecords(List\u003cInventoryRecord\u003e inventoryRecords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.inventoryRecords.setInventoryRecords(inventoryRecords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Resets the existing data of this {@code InventoryWindow} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void resetData(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        setInventoryRecords(newData.getInventoryRecordList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    //// InventoryRecord-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Returns true if an inventory record with the same identity as {@code inventoryRecord} exists in the inventory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean hasInventoryRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(inventoryRecord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return inventoryRecords.contains(inventoryRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Adds a inventory record to the inventory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * The inventory record must not already exist in the inventory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addInventoryRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventoryRecords.add(inventoryRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Replaces the given inventory record {@code target} in the list with {@code editedInventoryRecord}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * The inventory record identity of {@code editedInventoryRecord}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * must not be the same as another existing record in the inventory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setInventoryRecord(InventoryRecord target, InventoryRecord editedInventoryRecord) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(editedInventoryRecord);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventoryRecords.setInventoryRecord(target, editedInventoryRecord);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Removes {@code key} from this {@code InventoryWindow}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * {@code key} must exist in the inventory."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void removeInventoryRecord(InventoryRecord key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventoryRecords.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return inventoryRecords.asUnmodifiableObservableList().size() + \" inventory records\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public ObservableList\u003cInventoryRecord\u003e getInventoryRecordList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return inventoryRecords.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 inventoryRecords.equals(((Inventory) other).inventoryRecords));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return inventoryRecords.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 9,
      "FizzyAgent": 3,
      "Elgoh": 92,
      "howtoosee": 18
    }
  },
  {
    "path": "src/main/java/nustorage/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    Predicate\u003cInventoryRecord\u003e PREDICATE_SHOW_ALL_INVENTORY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    Predicate\u003cInventoryRecord\u003e PREDICATE_REMOVE_ALL_INVENTORY \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    Predicate\u003cFinanceRecord\u003e PREDICATE_SHOW_ALL_FINANCE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    Predicate\u003cFinanceRecord\u003e PREDICATE_REMOVE_ALL_FINANCE \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // ---------- UserPrefs ----------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    // --------- FinanceWindow Account ---------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void deleteFinanceRecord(FinanceRecord target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    ReadOnlyFinanceAccount getFinanceAccount();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void addFinanceRecord(FinanceRecord newRecord);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    FinanceRecord getFinanceRecord(Integer id);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    FinanceRecord getFinanceRecord(InventoryRecord inventoryRecord);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void deleteInventoryRecord(InventoryRecord target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void setFinanceRecord(FinanceRecord financeRecordToEdit, FinanceRecord editedFinanceRecord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    ObservableList\u003cFinanceRecord\u003e getFilteredFinanceList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    // --------- InventoryWindow ---------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void addInventoryRecord(InventoryRecord inventoryRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Replaces the given InventoryRecord {@code target} with {@code editedInventoryRecord}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code target} must exist in the InventoryWindow."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * The description of {@code editedInventoryRecord} must not be the same as another existing InventoryRecord."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    void setInventoryRecord(InventoryRecord target, InventoryRecord editedInventoryRecord);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if a record with the same identity as {@code InventoryRecord} exists in the InventoryWindow."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    boolean hasInventoryRecord(InventoryRecord inventoryRecord);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void updateFilteredInventoryList(Predicate\u003cInventoryRecord\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    ObservableList\u003cInventoryRecord\u003e getFilteredInventory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Inventory getInventory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void updateFilteredFinanceList(Predicate\u003cFinanceRecord\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 8,
      "FizzyAgent": 8,
      "howtoosee": 35,
      "Elgoh": 11,
      "Door-oof": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/nustorage/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final FinanceAccount financeAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final FilteredList\u003cInventoryRecord\u003e filteredInventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final FilteredList\u003cFinanceRecord\u003e filteredFinance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeAccount \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        filteredInventory \u003d new FilteredList\u003c\u003e(this.inventory.getInventoryRecordList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        filteredFinance \u003d new FilteredList\u003c\u003e(this.financeAccount.getFinanceList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Initializes a ModelManager with the given financeAccount, inventory and userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public ModelManager(ReadOnlyFinanceAccount financeAccount, ReadOnlyInventory inventory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireAllNonNull(financeAccount, inventory, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        logger.fine(\"Initializing with finance account \" + financeAccount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                + \", inventory \" + inventory + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeAccount \u003d new FinanceAccount(financeAccount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        filteredFinance \u003d new FilteredList\u003c\u003e(this.financeAccount.getFinanceList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.inventory \u003d new Inventory(inventory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        filteredInventory \u003d new FilteredList\u003c\u003e(this.inventory.getInventoryRecordList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this(new FinanceAccount(), new Inventory(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventoryWindow \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addInventoryRecord(InventoryRecord newRecord) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.addInventoryRecord(newRecord);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ObservableList\u003cInventoryRecord\u003e getFilteredInventory() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return filteredInventory;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Applies a predicate to the InventoryWindow and returns those that pass it."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param predicate the predicate used to filter InventoryWindow"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void updateFilteredInventoryList(Predicate\u003cInventoryRecord\u003e predicate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        filteredInventory.setPredicate(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Inventory getInventory() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean hasInventoryRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(inventoryRecord);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return inventory.hasInventoryRecord(inventoryRecord);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setInventoryRecord(InventoryRecord target, InventoryRecord editedInventoryRecord) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireAllNonNull(target, editedInventoryRecord);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.setInventoryRecord(target, editedInventoryRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void deleteInventoryRecord(InventoryRecord target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.removeInventoryRecord(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceAccount \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void addFinanceRecord(FinanceRecord newRecord) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeAccount.addFinanceRecord(newRecord);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ObservableList\u003cFinanceRecord\u003e getFilteredFinanceList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return filteredFinance;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecord(FinanceRecord target, FinanceRecord editedFinanceRecord) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireAllNonNull(target, editedFinanceRecord);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeAccount.setFinanceRecord(target, editedFinanceRecord);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public FinanceRecord getFinanceRecord(Integer target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return financeAccount.getFinanceRecord(target);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public FinanceRecord getFinanceRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return financeAccount.getFinanceRecord(inventoryRecord.getFinanceId());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public List\u003cFinanceRecord\u003e viewFinanceRecords() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     // TODO: DORA IMPLEMENT VIEW FINANCE RECORDS."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void updateFilteredFinanceList(Predicate\u003cFinanceRecord\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        filteredFinance.setPredicate(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void deleteFinanceRecord(FinanceRecord target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeAccount.removeFinanceRecord(target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public FinanceAccount getFinanceAccount() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return financeAccount;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return filteredInventory.equals(other.getFilteredInventory())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u0026\u0026 filteredFinance.equals(other.getFilteredFinanceList())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 26,
      "FizzyAgent": 33,
      "howtoosee": 40,
      "Elgoh": 29,
      "Door-oof": 10,
      "-": 68
    }
  },
  {
    "path": "src/main/java/nustorage/model/ReadOnlyFinanceAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Unmodifiable view of a finance account"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public interface ReadOnlyFinanceAccount {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    ObservableList\u003cFinanceRecord\u003e getFinanceList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 16,
      "howtoosee": 3
    }
  },
  {
    "path": "src/main/java/nustorage/model/ReadOnlyInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public interface ReadOnlyInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    ObservableList\u003cInventoryRecord\u003e getInventoryRecordList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "Elgoh": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/nustorage/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/nustorage/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Path financeAccountFilePath \u003d Paths.get(\"data\", \"financeAccount.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\", \"inventory.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getFinanceAccountFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return financeAccountFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "howtoosee": 10,
      "-": 85
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/FinanceRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.DateTimeUtil.DATETIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final boolean hasInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String uiUsableIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Constructs a {@code FinanceWindow Record}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param amount Amount of the transaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord(double amount) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        id \u003d this.hashCode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Constructs a {@code FinanceWindow Record}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param amount Amount of the transaction."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord(double amount, boolean hasInventory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        id \u003d this.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d hasInventory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Constructs a {@code FinanceWindow Record}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param amount Amount of the transaction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param dateTime Date of the transaction."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public FinanceRecord(double amount, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        id \u003d this.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Constructs a {@code FinanceWindow Record}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param id ID of the transaction."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param amount Amount of the transaction."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param dateTime Date of the transaction."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord(int id, double amount, LocalDateTime dateTime, boolean hasInventory) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d hasInventory;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Constructs a {@code FinanceWindow Record}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param amount Amount of the transaction."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param dateTime Date of the transaction."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public FinanceRecord(double amount, LocalDateTime dateTime, boolean hasInventory) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.id \u003d this.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.hasInventory \u003d hasInventory;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setAmount(double amount) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.dateTime.toLocalDate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.dateTime.toLocalTime().format(dtf);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public String getDatetimeString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return DATETIME_FORMAT.format(dateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean taggedToInventory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return hasInventory;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String getUiUsableIndex() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return uiUsableIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void setUiUsableIndex(int i) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + i;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Compares if {@code obj} is a {@code FinanceWindow Record} and has the same amount and datetime value."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param obj Object to compare with"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @return True if {@code obj} is a {@code FinanceWindow Record} and has the same amount and datetime value."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean hasSameData(Object obj) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (obj instanceof FinanceRecord) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return ((FinanceRecord) obj).amount \u003d\u003d this.amount"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    \u0026\u0026 ((FinanceRecord) obj).getDatetimeString().equals(this.getDatetimeString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Compares if {@code obj} is a {@code FinanceWindow Record} and has the same amount and datetime value."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @param obj Object to compare with"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @return True if {@code obj} is a {@code FinanceWindow Record} and has the same amount and datetime value."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean isSameRecord(Object obj) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (obj instanceof FinanceRecord) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return this.id \u003d\u003d ((FinanceRecord) obj).id;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (obj instanceof FinanceRecord) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return this.isSameRecord(obj)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    \u0026\u0026 this.hasSameData(obj);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return String.format(\"Transaction #%d on %s: $%.2f\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                id,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                getDatetimeString(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                amount);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 124,
      "Door-oof": 19,
      "Elgoh": 13,
      "howtoosee": 13
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/FinanceRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.exceptions.DuplicateFinanceRecordException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.exceptions.FinanceRecordNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceRecordList implements Iterable\u003cFinanceRecord\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final ObservableList\u003cFinanceRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final ObservableList\u003cFinanceRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean contains(FinanceRecord toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void add(FinanceRecord toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new DuplicateFinanceRecordException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecord(FinanceRecord target, FinanceRecord editedRecord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new FinanceRecordNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord getFinanceRecord(int recordId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        Optional\u003cFinanceRecord\u003e record \u003d internalList.stream().filter(r -\u003e r.getID() \u003d\u003d recordId).findFirst();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (record.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new FinanceRecordNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return record.get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void remove(FinanceRecord toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!internalList.contains(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new FinanceRecordNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecords(FinanceRecordList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecords(List\u003cFinanceRecord\u003e financeRecords) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        requireAllNonNull(financeRecords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        if (!financeRecordsAreUnique(financeRecords)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            throw new DuplicateFinanceRecordException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        internalList.setAll(financeRecords);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private boolean financeRecordsAreUnique(List\u003cFinanceRecord\u003e financeRecords) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        for (int i \u003d 0; i \u003c financeRecords.size() - 1; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            for (int j \u003d i + 1; j \u003c financeRecords.size(); j++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                if (financeRecords.get(i).isSameRecord(financeRecords.get(j))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ObservableList\u003cFinanceRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public Iterator\u003cFinanceRecord\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                || (other instanceof FinanceRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                \u0026\u0026 internalList.equals(((FinanceRecordList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 1,
      "FizzyAgent": 128
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/InventoryRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.DateTimeUtil.DATETIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Class to record movement in the InventoryWindow."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryRecord {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Double unitCost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private int financeId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String uiUsableIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructs an InventoryRecord."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param itemName Name of item added.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param quantity Number of items added/removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param unitCost Cost per item."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecord(String itemName, int quantity, Double unitCost) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructs an InventoryRecord."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemName Name of item added.."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param quantity Number of items added/removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param dateTime Date and time movement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecord(String itemName, int quantity, Double unitCost, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructs an InventoryRecord."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemName Name of item added.."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param quantity Number of items added/removed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param dateTime Date and time movement."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param financeId ID of the finance record attached to this item."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecord(String itemName, int quantity, Double unitCost, LocalDateTime dateTime, int financeId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeId \u003d financeId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + uiUsableIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecord(FinanceRecord financeRecord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeId \u003d financeRecord.getID();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Get the number of this item in the inventory"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Double getUnitCost() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return unitCost;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return dateTime.toLocalDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return dateTime.toLocalTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public int getFinanceId() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return financeId;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String getUiUsableIndex() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.uiUsableIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void setUiUsableIndex(int i) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiUsableIndex \u003d \"\" + i;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (obj instanceof InventoryRecord) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return ((InventoryRecord) obj).itemName.equals(this.itemName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"on \" + DATETIME_FORMAT.format(dateTime)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                + \": \" + itemName + \", \" + quantity + \" in stock, \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                + \"cost price: \" + unitCost + \"\\nfinance id: \" + financeId;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 8,
      "Elgoh": 87,
      "howtoosee": 23,
      "Door-oof": 7
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/InventoryRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.exceptions.DuplicateInventoryRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.exceptions.InventoryRecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryRecordList implements Iterable\u003cInventoryRecord\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final ObservableList\u003cInventoryRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final ObservableList\u003cInventoryRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Returns true if the list contains an equivalent inventory record as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean contains(InventoryRecord toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireAllNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Adds InventoryRecord into the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * InventoryRecord must not already be in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param inventoryRecord to be added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void add(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(inventoryRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        internalList.add(inventoryRecord);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Edit target with edited InventoryWindow record"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setInventoryRecord(InventoryRecord target, InventoryRecord editedInventoryRecord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireAllNonNull(target, editedInventoryRecord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new InventoryRecordNotFoundException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!target.equals(editedInventoryRecord) \u0026\u0026 contains(editedInventoryRecord)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new DuplicateInventoryRecordException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        internalList.set(index, editedInventoryRecord);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Replaces the contents of this list with {@code inventoryRecords}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * {@code inventoryRecords} must not contain duplicate inventory records."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setInventoryRecords(List\u003cInventoryRecord\u003e inventoryRecords) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(inventoryRecords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!inventoryRecordsAreUnique(inventoryRecords)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new DuplicateInventoryRecordException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        internalList.setAll(inventoryRecords);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Removes the equivalent InventoryWindow record from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * The inventory record must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void remove(InventoryRecord toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new InventoryRecordNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public ObservableList\u003cInventoryRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Iterator\u003cInventoryRecord\u003e iterator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof InventoryRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 internalList.equals(((InventoryRecordList) other).internalList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Returns true if {@code inventoryRecords} contains only unique records."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private boolean inventoryRecordsAreUnique(List\u003cInventoryRecord\u003e inventoryRecords) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryRecords.size() - 1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c inventoryRecords.size(); j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                if (inventoryRecords.get(i).equals(inventoryRecords.get(j))) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "Elgoh": 114
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/InventoryRecordNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryRecordNameContainsKeywordsPredicate implements Predicate\u003cInventoryRecord\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecordNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean test(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(inventoryRecord.getItemName(), keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                || (other instanceof InventoryRecordNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u0026\u0026 keywords.equals(((InventoryRecordNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 28
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/exceptions/DuplicateFinanceRecordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Signals that the operation will result in duplicate FinanceRecord"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * (FinanceRecords are considered duplicates if they have the same ID)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class DuplicateFinanceRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public DuplicateFinanceRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        super(\"Operation would result in duplicate finance records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 11
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/exceptions/DuplicateInventoryRecordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Signals that the operation will result in duplicate InventoryRecord"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * (InventoryRecords are considered duplicates if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class DuplicateInventoryRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public DuplicateInventoryRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"Operation would result in duplicate inventory records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 11
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/exceptions/FinanceRecordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Signals that the operation is unable to find the specified inventory record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceRecordNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 7
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/exceptions/InventoryRecordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Signals that the operation is unable to find the specified inventory record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryRecordNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 7
    }
  },
  {
    "path": "src/main/java/nustorage/model/record/exceptions/NegativeNumberOfItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class NegativeNumberOfItemException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public NegativeNumberOfItemException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"This would result in negative number of items in storage\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public NegativeNumberOfItemException(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"This would result in negative number of \" + inventoryRecord + \" in storage\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Elgoh": 15
    }
  },
  {
    "path": "src/main/java/nustorage/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/nustorage/storage/FinanceAccountStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * A storage interface for {@link nustorage.model.FinanceAccount}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public interface FinanceAccountStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return file path to json data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Path getFinanceAccountFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Read finance account from json storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return FinanceAccount data, or {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath overrides default storage filepath."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @see #readFinanceAccount()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Saves the given {@link FinanceAccount} to storage in Json format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param financeAccount given finance account to be stored, cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IOException if there\u0027s any problem writing to file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath overrides default storage filepath."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @see #saveFinanceAccount(ReadOnlyFinanceAccount)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 56
    }
  },
  {
    "path": "src/main/java/nustorage/storage/InventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * A storage interface for {@link nustorage.model.Inventory}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return file path to json data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Read inventory from json storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @return InventoryWindow data, or {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath overrides default storage filepath."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @see #readInventory()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Saves the given {@link Inventory} to storage in Json format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inventory given inventory to be stored, cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IOException if there\u0027s any problems writing to file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath overrides default storage filepath."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory, Path)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "howtoosee": 56
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonAdaptedFinanceRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Jackson-friendly version of {@link FinanceRecord}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonAdaptedFinanceRecord {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FinanceWindow record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final boolean hasInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructs a {@code JsonAdaptedFinanceRecord} with the given record details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonAdaptedFinanceRecord(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                                    @JsonProperty(\"amount\") double amount,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                                    @JsonProperty(\"dateTime\") LocalDateTime dateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                                    @JsonProperty(\"hasInventory\") boolean hasInventory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d hasInventory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts a given {@code FinanceRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonAdaptedFinanceRecord(FinanceRecord source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert source !\u003d null : \"Source finance record is null!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.id \u003d source.getID();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.amount \u003d source.getAmount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateTime \u003d source.getDateTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.hasInventory \u003d source.taggedToInventory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts this Jackson-friendly adapted finance record object into the model\u0027s {@code FinanceRecord} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public FinanceRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.id \u003c 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final int modelId \u003d this.id;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.amount \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"amount\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final double modelAmount \u003d this.amount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date-time\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final LocalDateTime modelDateTime \u003d this.dateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        final boolean modelHasInventory \u003d this.hasInventory;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new FinanceRecord(modelId, modelAmount, modelDateTime, modelHasInventory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 14,
      "howtoosee": 66
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonAdaptedInventoryRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonAdaptedInventoryRecord {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"InventoryWindow record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final int financeId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Double unitCost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructs a {@code JsonAdaptedInventoryRecord} with the given record details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonAdaptedInventoryRecord(@JsonProperty(\"itemName\") String itemName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                                      @JsonProperty(\"quantity\") int quantity,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                                      @JsonProperty(\"unitCost\") Double unitCost,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                                      @JsonProperty(\"dateTime\") LocalDateTime dateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                                      @JsonProperty(\"financeId\") int financeId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeId \u003d financeId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts a given {@code InventoryRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonAdaptedInventoryRecord(InventoryRecord source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert source !\u003d null : \"Source inventory record is null!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemName \u003d source.getItemName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.dateTime \u003d source.getDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeId \u003d source.getFinanceId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.unitCost \u003d source.getUnitCost();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts this Jackson-friendly adapted inventory record object into the model\u0027s {@code InventoryRecord} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public InventoryRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.itemName \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"item name\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final String modelItemName \u003d this.itemName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.quantity \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"quantity\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final int modelQuantity \u003d this.quantity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (this.dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"dateTime\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        final LocalDateTime modelDateTime \u003d this.dateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.financeId \u003c -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"financeId\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final int modelFinanceId \u003d this.financeId;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (this.unitCost \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"unitCost\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        final Double modelUnitCost \u003d this.unitCost;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new InventoryRecord(modelItemName, modelQuantity, modelUnitCost, modelDateTime, modelFinanceId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "howtoosee": 71,
      "Elgoh": 17
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonFinanceAccountStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * A class to access FinanceAccount data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class JsonFinanceAccountStorage implements FinanceAccountStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceAccountStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Creates a new finance account storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath file path to storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonFinanceAccountStorage(Path filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert filePath !\u003d null : \"File path for finance account storage is null!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getFinanceAccountFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return readFinanceAccount(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cJsonSerializableFinanceAccount\u003e jsonFinanceAccount \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                filePath, JsonSerializableFinanceAccount.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (jsonFinanceAccount.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Optional.of(jsonFinanceAccount.get().toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // assert financeAccount !\u003d null : \"FinanceWindow account is null!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        saveFinanceAccount(financeAccount, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireAllNonNull(financeAccount, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFinanceAccount(financeAccount), filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "howtoosee": 89
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * A class to access InventoryWindow data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Creates a new inventory storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param filePath file path to storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert filePath !\u003d null : \"File path for finance account storage is null!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // assert filePath !\u003d null : \"InventoryWindow file path is null!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (jsonInventory.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // assert inventory !\u003d null : \"InventoryWindow is null!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        requireAllNonNull(inventory, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "howtoosee": 88
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonSerializableFinanceAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * An Immutable FinanceWindow Account that is serializable to the JSON format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "@JsonRootName(\"financeAccount\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonSerializableFinanceAccount {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FINANCE_RECORD \u003d \"Finance record list contains duplicate records!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public final List\u003cJsonAdaptedFinanceRecord\u003e financeRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructs a {@code JsonSerializableFinanceAccount} with the given finance records."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonSerializableFinanceAccount("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            @JsonProperty(\"financeRecords\") List\u003cJsonAdaptedFinanceRecord\u003e financeRecords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeRecords.addAll(financeRecords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonSerializableFinanceAccount(ReadOnlyFinanceAccount source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert source !\u003d null : \"Source finance account is null!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        financeRecords.addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                source.getFinanceList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .map(JsonAdaptedFinanceRecord::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts this finance account into the model\u0027s {@link FinanceAccount} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public FinanceAccount toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        FinanceAccount finAccount \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        for (JsonAdaptedFinanceRecord jsonFinRecord : this.financeRecords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            FinanceRecord finRecord \u003d jsonFinRecord.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            This section prevents adding of duplicate finance records."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "             */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // if (finAccount.hasFinanceRecord(finRecord)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            //     throw new IllegalValueException(MESSAGE_DUPLICATE_FINANCE_RECORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            finAccount.addFinanceRecord(finRecord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return finAccount;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "howtoosee": 70
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonSerializableInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * An Immutable InventoryWindow that\u0027s serializable to the JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "@JsonRootName(\"inventory\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY_RECORD \u003d \"Inventory record list contains duplicate records!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public final List\u003cJsonAdaptedInventoryRecord\u003e inventoryRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given inventory records."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonSerializableInventory("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            @JsonProperty(\"inventoryRecords\") List\u003cJsonAdaptedInventoryRecord\u003e inventoryRecords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.inventoryRecords.addAll(inventoryRecords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assert source !\u003d null : \"Source inventory is null!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.inventoryRecords.addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                source.getInventoryRecordList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .map(JsonAdaptedInventoryRecord::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Converts this inventory into the model\u0027s {@link Inventory} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IllegalValueException if there were any data constrains violated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        for (JsonAdaptedInventoryRecord jsonInvRecord : this.inventoryRecords) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            InventoryRecord invRecord \u003d jsonInvRecord.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            This section prevents adding of duplicate inventory records."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "             */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // if (inventory.hasInventoryRecord(invRecord)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            //     throw new IllegalValueException(MESSAGE_DUPLICATE_INVENTORY_RECORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            inventory.addInventoryRecord(invRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "howtoosee": 75,
      "Elgoh": 1
    }
  },
  {
    "path": "src/main/java/nustorage/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/nustorage/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public interface Storage extends UserPrefsStorage, FinanceAccountStorage, InventoryStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 1,
      "FizzyAgent": 4,
      "howtoosee": 21,
      "-": 16
    }
  },
  {
    "path": "src/main/java/nustorage/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private FinanceAccountStorage financeAccountStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //  * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Creates a {@code StorageManager} with the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * {@code FinanceAccountStorage}, {@code InventoryStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public StorageManager(FinanceAccountStorage financeAccountStorage, InventoryStorage inventoryStorage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.financeAccountStorage \u003d financeAccountStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceAccount methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getFinanceAccountFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return financeAccountStorage.getFinanceAccountFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return readFinanceAccount(financeAccountStorage.getFinanceAccountFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount(Path filePath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        logger.fine(\"Attempting to read finance account from data file: \" + filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return financeAccountStorage.readFinanceAccount(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        saveFinanceAccount(financeAccount, financeAccountStorage.getFinanceAccountFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveFinanceAccount(ReadOnlyFinanceAccount financeAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        logger.fine(\"Attempting to write finance account to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        financeAccountStorage.saveFinanceAccount(financeAccount, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InventoryWindow methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        logger.fine(\"Attempting to read finance account from data file: \" + filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        logger.fine(\"Attempting to write finance account to data file: \" + filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 6,
      "howtoosee": 101,
      "-": 34
    }
  },
  {
    "path": "src/main/java/nustorage/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * Represents a storage for {@link nustorage.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Saves the given {@link nustorage.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/nustorage/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void handleCommandEntered() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "         * @see nustorage.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "Door-oof": 2,
      "-": 73
    }
  },
  {
    "path": "src/main/java/nustorage/ui/FinanceWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static final String FXML \u003d \"FinanceWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableView\u003cFinanceRecord\u003e tableView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cFinanceRecord, String\u003e idCol;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cFinanceRecord, String\u003e financeIdCol;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cFinanceRecord, String\u003e totalCostCol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cFinanceRecord, String\u003e dateCol;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cFinanceRecord, String\u003e timeCol;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the display for the FinanceWindow tab in the user interface."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceWindow(Logic logic) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); // to prevent side-scrolling"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.getItems().setAll(parseFinanceList(logic));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        totalCostCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        dateCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        timeCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"time\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        idCol.setCellValueFactory(id -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            property.setValue(String.valueOf(id.getValue().getUiUsableIndex()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        financeIdCol.setCellValueFactory(id -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            property.setValue(String.valueOf(id.getValue().getID()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Sets the display for the FinanceWindow tab in the user interface."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public FinanceWindow(Logic logic, String financeId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); // to prevent side-scrolling"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.getItems().setAll(parseFinanceList(logic, financeId));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        totalCostCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        dateCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        timeCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"time\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        idCol.setCellValueFactory(id -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            property.setValue(String.valueOf(id.getValue().getUiUsableIndex()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        financeIdCol.setCellValueFactory(id -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            property.setValue(String.valueOf(id.getValue().getID()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses the filtered list in model and finds a finance record that have the same finance ID"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * as the inventory record."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param logic Logic"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return List of Items."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private List\u003cFinanceRecord\u003e parseFinanceList(Logic logic, String financeId) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        List\u003cFinanceRecord\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getFilteredFinanceList().size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (logic.getFilteredFinanceList().get(i).getID() \u003d\u003d Integer.parseInt(financeId)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                logic.getFilteredFinanceList().get(i).setUiUsableIndex(index + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                list.add(logic.getFilteredFinanceList().get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses the filtered list in model to update the indexes and put it into a list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param logic Logic"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return List of Items."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private List\u003cFinanceRecord\u003e parseFinanceList(Logic logic) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        List\u003cFinanceRecord\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getFilteredFinanceList().size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logic.getFilteredFinanceList().get(i).setUiUsableIndex(i + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            list.add(logic.getFilteredFinanceList().get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 4,
      "Door-oof": 103,
      "howtoosee": 2
    }
  },
  {
    "path": "src/main/java/nustorage/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t11-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "Door-oof": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/nustorage/ui/InventoryWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.ui.uilogic.UiLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class InventoryWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static final String FXML \u003d \"InventoryWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableView\u003cInventoryRecord\u003e tableView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cInventoryRecord, String\u003e idCol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cInventoryRecord, String\u003e itemNameCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cInventoryRecord, String\u003e costUnitCol;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cInventoryRecord, Integer\u003e quantityCol;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TableColumn\u003cInventoryRecord, String\u003e financeIdCol;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the display for the InventoryWindow tab in the user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public InventoryWindow(Logic logic, UiLogic uiLogic, AnchorPane financePlaceholder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); // to prevent side-scrolling"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tableView.getItems().setAll(parseInventoryList(logic));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        idCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"UiUsableIndex\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        itemNameCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"itemName\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        quantityCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"quantity\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        costUnitCol.setCellValueFactory(item -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            property.setValue(String.valueOf(item.getValue().getUnitCost()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        financeIdCol.setCellValueFactory(item -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            SimpleStringProperty property \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            property.setValue(String.valueOf(item.getValue().getFinanceId()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return property;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Callback\u003cTableColumn\u003cInventoryRecord, String\u003e,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                TableCell\u003cInventoryRecord, String\u003e\u003e cellFactory \u003d new Callback\u003c\u003e() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    public TableCell\u003cInventoryRecord, String\u003e call(final TableColumn\u003cInventoryRecord, String\u003e param) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                        final TableCell\u003cInventoryRecord, String\u003e cell \u003d new TableCell\u003c\u003e() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                            @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                            public void updateItem(String item, boolean empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                final Button button \u003d new Button(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                super.updateItem(item, empty);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                if (empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    setGraphic(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    setText(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                } else if (item.equals(\"0\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    button.setDisable(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    setText(item);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    button.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                            uiLogic.execute(\"switch_finance\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                            FinanceWindow financeWindow \u003d new FinanceWindow(logic, item);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                            financePlaceholder.getChildren().add(financeWindow.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                    setGraphic(button);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                        return cell;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        financeIdCol.setCellFactory(cellFactory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void findCommand(String format) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses the filtered list in model to update the indexes and put it into a list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param logic Logic"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return List of Items."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private List\u003cInventoryRecord\u003e parseInventoryList(Logic logic) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        List\u003cInventoryRecord\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getFilteredInventory().size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            logic.getFilteredInventory().get(i).setUiUsableIndex(i + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            list.add(logic.getFilteredInventory().get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "Door-oof": 107,
      "howtoosee": 3,
      "Elgoh": 1
    }
  },
  {
    "path": "src/main/java/nustorage/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.ui.uilogic.UiLogic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.ui.uilogic.UiLogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private UiLogic uiLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private InventoryWindow inventoryWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private FinanceWindow financeWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private AnchorPane inventoryPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private AnchorPane financePlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Tab inventoryTab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Tab financeTab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.uiLogic \u003d new UiLogicManager(tabPane);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financeWindow \u003d new FinanceWindow(logic);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        financePlaceholder.getChildren().add(financeWindow.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        inventoryWindow \u003d new InventoryWindow(logic, uiLogic, financePlaceholder);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        inventoryPlaceholder.getChildren().add(inventoryWindow.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * @see nustorage.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            CommandResult commandResult;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (isUiCommand(commandText)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Inventory\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    commandText \u003d commandText + \"_finance\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    commandText \u003d commandText + \"_inventory\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                commandResult \u003d uiLogic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            inventoryWindow \u003d new InventoryWindow(logic, uiLogic, financePlaceholder);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            inventoryPlaceholder.getChildren().add(inventoryWindow.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            financeWindow \u003d new FinanceWindow(logic);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            financePlaceholder.getChildren().add(financeWindow.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private boolean isUiCommand(String userInput) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        userInput.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return userInput.equals(\"switch\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "FizzyAgent": 14,
      "Door-oof": 50,
      "-": 170
    }
  },
  {
    "path": "src/main/java/nustorage/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/nustorage/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/nustorage/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/nustorage/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "Door-oof": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/nustorage/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/nustorage/ui/uilogic/UiLogic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.ui.uilogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public interface UiLogic {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    CommandResult execute(String commandResult) throws Exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 7
    }
  },
  {
    "path": "src/main/java/nustorage/ui/uilogic/UiLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.ui.uilogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class UiLogicManager implements UiLogic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String COMMAND_WORD_NAVIGATION \u003d \"switch\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String INVENTORY_TAB \u003d \"inventory\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String FINANCE_TAB \u003d \"finance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public UiLogicManager(TabPane tabPane) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String command \u003d commandText.split(\"_\")[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (command.equals(COMMAND_WORD_NAVIGATION)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                param \u003d commandText.split(\"_\")[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                throw new ParseException(\"Please specify a tab to switch to\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return goToTab(param);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new ParseException(\"This really shouldn\u0027t happen. How did you get here?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Switches to the specified tab given the specified parameters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public CommandResult goToTab(String param) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (param.equalsIgnoreCase(INVENTORY_TAB)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            selectionModel.select(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (param.equalsIgnoreCase(FINANCE_TAB)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            selectionModel.select(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new ParseException(String.format(\"A tab with the name of %s was not found\", param));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return new CommandResult(\"Switched to \" + param + \" tab!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 56
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ".tab:top {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ".tab:selected:top {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 0%);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 0%);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/*Solution adapted from"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "https://stackoverflow.com/questions/36779642/javafx-css-styling-change-highlight-color-of-selected-tabs*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ".tab-pane:focused \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /* -fx-size: 35; */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /* -fx-font-size: 20pt; */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 30,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/FinanceWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"450.0\" prefWidth\u003d\"1000.0\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"200.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"financeIdCol\" prefWidth\u003d\"200.0\" text\u003d\"Finance ID\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"totalCostCol\" prefWidth\u003d\"200.0\" text\u003d\"Total Cost\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"dateCol\" prefWidth\u003d\"200.0\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"timeCol\" prefWidth\u003d\"250.0\" text\u003d\"Time\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 19
    }
  },
  {
    "path": "src/main/resources/view/InventoryWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"inventory\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"450.0\" prefWidth\u003d\"1000.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"200.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"itemNameCol\" prefWidth\u003d\"200.0\" text\u003d\"Item Name\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"quantityCol\" prefWidth\u003d\"200.0\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"costUnitCol\" prefWidth\u003d\"200.0\" text\u003d\"Cost per Unit\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"financeIdCol\" prefWidth\u003d\"200.0\" text\u003d\"Finance ID\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003cfx:root minHeight\u003d\"700.0\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"NUStorage\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "      \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPane\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                \u003cTab fx:id\u003d\"inventoryTab\" text\u003d\"Inventory\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"inventoryPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u003cTab fx:id\u003d\"financeTab\" text\u003d\"Finance\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"financePlaceholder\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "               \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "               \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 27,
      "Elgoh": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/resources/view/RecordCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cLabel fx:id\u003d\"detailOne\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$transactionName\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cLabel fx:id\u003d\"detailTwo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cLabel fx:id\u003d\"detailThree\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateAndTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 39
    }
  },
  {
    "path": "src/main/resources/view/RecordPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cListView fx:id\u003d\"recordView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 8
    }
  },
  {
    "path": "src/test/data/JsonFinanceAccountStorageTest/financeAccount.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"financeRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 1854081695,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 121100.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.667625\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 1624720381,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 14980.0,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.92798\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 162493881,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 200.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:49.495621\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 275413734,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 2110.0,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:30:02.848215\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 23
    }
  },
  {
    "path": "src/test/data/JsonFinanceAccountStorageTest/invalidFinanceAccount.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"financeRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : -1,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 121100.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.667625\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 1624720381,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 14980.0,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.92798\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 162493881,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 200.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:49.495621\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 275413734,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 2110.0,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:30:02.848215\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 23
    }
  },
  {
    "path": "src/test/data/JsonFinanceAccountStorageTest/invalidRecord.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 3
    }
  },
  {
    "path": "src/test/data/JsonFinanceAccountStorageTest/inventory.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"inventoryRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPhone\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 100,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.666464\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1854081695"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPad\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 20,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.927947\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1624720381"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"apples\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 17,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:16.352225\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : -1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 18
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/financeAccount.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"financeRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 1854081695,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 121100.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.667625\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 1624720381,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 14980.0,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.92798\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 162493881,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 200.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:49.495621\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"id\" : 275413734,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"amount\" : 2110.0,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:30:02.848215\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"hasInventory\" : false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 23
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/invalidInventory.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"inventoryRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPhone\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : -1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.666464\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1854081695"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPad\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 20,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.927947\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1624720381"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"apples\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 17,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:16.352225\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 18,
      "Elgoh": 3
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/invalidInventory2.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"inventoryRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPhone\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 1,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.666464\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1854081695"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPad\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 20,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.927947\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : -2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"apples\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 17,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:16.352225\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 18,
      "Elgoh": 3
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/invalidRecord.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 3
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/inventory.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  \"inventoryRecords\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPhone\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 100,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:28:34.666464\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1854081695"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"iPad\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 20,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:00.927947\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : 1624720381"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"itemName\" : \"apples\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"quantity\" : 17,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \"unitCost\" : 10.0,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"dateTime\" : \"2020-10-27T14:29:16.352225\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    \"financeId\" : -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 18,
      "Elgoh": 3
    }
  },
  {
    "path": "src/test/java/nustorage/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/nustorage/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/nustorage/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/nustorage/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/nustorage/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/nustorage/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.JsonFinanceAccountStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonFinanceAccountStorage financeAccountStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                new JsonFinanceAccountStorage(temporaryFolder.resolve(\"financeAccount.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"financeAccount.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(financeAccountStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //             new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //             new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     // Execute add command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 3,
      "FizzyAgent": 12,
      "howtoosee": 45,
      "-": 88
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/AddFinanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.testutil.FinanceRecordBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.testutil.stub.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class AddFinanceCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void constructor_nullFinanceRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFinanceCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void execute_financeRecordAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        ModelStubAcceptingFinanceRecordAdded modelStub \u003d new ModelStubAcceptingFinanceRecordAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord financeRecord \u003d new FinanceRecordBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        CommandResult commandResult \u003d new AddFinanceCommand(financeRecord).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(String.format(AddFinanceCommand.MESSAGE_SUCCESS, financeRecord),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(Arrays.asList(financeRecord), modelStub.financeRecordAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord record1 \u003d new FinanceRecordBuilder().withAmount(200).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord record2 \u003d new FinanceRecordBuilder().withAmount(10000).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        AddFinanceCommand addFinanceCommand1 \u003d new AddFinanceCommand(record1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        AddFinanceCommand addFinanceCommand2 \u003d new AddFinanceCommand(record2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertTrue(addFinanceCommand1.equals(addFinanceCommand1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        AddFinanceCommand addFinanceCommand1Copy \u003d new AddFinanceCommand(record1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertTrue(addFinanceCommand1.equals(addFinanceCommand1Copy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertFalse(addFinanceCommand1.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertFalse(addFinanceCommand1.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertFalse(addFinanceCommand1.equals(addFinanceCommand2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private class ModelStubAcceptingFinanceRecordAdded extends ModelStub {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        final ArrayList\u003cFinanceRecord\u003e financeRecordAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public void addFinanceRecord(FinanceRecord financeRecord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            requireNonNull(financeRecord);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            financeRecordAdded.add(financeRecord);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        public ReadOnlyFinanceAccount getFinanceAccount() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return new FinanceAccount();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 81
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final double VALID_AMOUNT \u003d 0.10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adapted for NUStorage:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final String ITEM_NAME_1 \u003d \"ITEM_NAME_1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final String ITEM_NAME_2 \u003d \"ITEM_NAME_2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final String ITEM_NAME_3 \u003d \"ITEM_NAME_3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final double COST_1 \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final double COST_2 \u003d 13.7;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final double COST_3 \u003d 27.5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final int QUANTITY_1 \u003d 10;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final int QUANTITY_2 \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final int QUANTITY_3 \u003d 17;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final int ID_A \u003d 12345789;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final int ID_B \u003d 92502649;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final int ID_C \u003d 57396892;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final int ID_D \u003d 29730103;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final double AMOUNT_A \u003d 0.10;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final double AMOUNT_B \u003d 17.17;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final double AMOUNT_C \u003d 128.99;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final double AMOUNT_D \u003d 9999999;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final boolean HAS_INVENTORY_A \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final boolean HAS_INVENTORY_B \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final boolean HAS_INVENTORY_C \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final boolean HAS_INVENTORY_D \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_STRING_A \u003d \"2020-10-01\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_STRING_B \u003d \"2019-01-01\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_STRING_C \u003d \"2018-12-30\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_STRING_D \u003d \"2005-08-23\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_STRING_A \u003d \"23:59\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_STRING_B \u003d \"00:01\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_STRING_C \u003d \"18:00\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_STRING_D \u003d \"08:35\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDate DATE_A \u003d LocalDate.parse(DATE_STRING_A);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDate DATE_B \u003d LocalDate.parse(DATE_STRING_B);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDate DATE_C \u003d LocalDate.parse(DATE_STRING_C);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDate DATE_D \u003d LocalDate.parse(DATE_STRING_D);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalTime TIME_A \u003d LocalTime.parse(TIME_STRING_A);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalTime TIME_B \u003d LocalTime.parse(TIME_STRING_B);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalTime TIME_C \u003d LocalTime.parse(TIME_STRING_C);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalTime TIME_D \u003d LocalTime.parse(TIME_STRING_D);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDateTime DATE_TIME_A \u003d LocalDateTime.of(DATE_A, TIME_A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDateTime DATE_TIME_B \u003d LocalDateTime.of(DATE_B, TIME_B);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDateTime DATE_TIME_C \u003d LocalDateTime.of(DATE_C, TIME_C);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final LocalDateTime DATE_TIME_D \u003d LocalDateTime.of(DATE_D, TIME_D);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String AMOUNT_DESC_A \u003d \" \" + PREFIX_AMOUNT + AMOUNT_A;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String AMOUNT_DESC_B \u003d \" \" + PREFIX_AMOUNT + AMOUNT_B;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String AMOUNT_DESC_C \u003d \" \" + PREFIX_AMOUNT + AMOUNT_C;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String AMOUNT_DESC_D \u003d \" \" + PREFIX_AMOUNT + AMOUNT_D;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_DESC_A \u003d \" \" + PREFIX_DATETIME + DATE_STRING_A;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_DESC_B \u003d \" \" + PREFIX_DATETIME + DATE_STRING_B;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_DESC_C \u003d \" \" + PREFIX_DATETIME + DATE_STRING_C;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_DESC_D \u003d \" \" + PREFIX_DATETIME + DATE_STRING_D;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_DESC_A \u003d \" \" + PREFIX_DATETIME + TIME_STRING_A;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_DESC_B \u003d \" \" + PREFIX_DATETIME + TIME_STRING_B;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_DESC_C \u003d \" \" + PREFIX_DATETIME + TIME_STRING_C;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String TIME_DESC_D \u003d \" \" + PREFIX_DATETIME + TIME_STRING_D;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_TIME_DESC_A \u003d \" \" + PREFIX_DATETIME + DATE_STRING_A + \" \" + TIME_STRING_A;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_TIME_DESC_B \u003d \" \" + PREFIX_DATETIME + DATE_STRING_B + \" \" + TIME_STRING_B;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_TIME_DESC_C \u003d \" \" + PREFIX_DATETIME + DATE_STRING_C + \" \" + TIME_STRING_C;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DATE_TIME_DESC_D \u003d \" \" + PREFIX_DATETIME + DATE_STRING_D + \" \" + TIME_STRING_D;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC_A \u003d \" \" + PREFIX_AMOUNT + \"0.10a\"; // \u0027a\u0027 is not allowed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 58,
      "howtoosee": 20,
      "Door-oof": 3,
      "Elgoh": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/CreateInventoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "// import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/*import nustorage.model.InventoryWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.testutil.stub.ModelStub; */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "// import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class CreateInventoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void constructor_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreateInventoryRecordCommand(null, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 18,
      "FizzyAgent": 1,
      "Elgoh": 2
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/nustorage/logic/commands/ListFinanceRecordsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.getTypicalFinanceAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.testutil.TypicalInventoryRecords.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ListFinanceRecordsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceAccount(), getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceAccount(), model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertCommandSuccess(new ListFinanceRecordsCommand(), model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                ListFinanceRecordsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 30
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/AddFinanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_STRING_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_DESC_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_DESC_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.TIME_DESC_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.TIME_STRING_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.AddFinanceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.testutil.FinanceRecordBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class AddFinanceCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private AddFinanceCommandParser parser \u003d new AddFinanceCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord expectedFinanceRecord \u003d new FinanceRecordBuilder(RECORD_A).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + AMOUNT_DESC_A + DATE_TIME_DESC_A,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(expectedFinanceRecord));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_B + AMOUNT_DESC_A + DATE_TIME_DESC_A,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(expectedFinanceRecord));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // multiple date times - last datetime accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_A + DATE_TIME_DESC_B + DATE_TIME_DESC_A,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(expectedFinanceRecord));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // no date time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord blankFinanceRecord \u003d new FinanceRecord(AMOUNT_A);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_A,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(blankFinanceRecord));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // no date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord timeFinanceRecord \u003d new FinanceRecordBuilder(RECORD_A).withDatetime(TIME_STRING_A).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_A + TIME_DESC_A,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(timeFinanceRecord));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // no time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord dateFinanceRecord \u003d new FinanceRecordBuilder(RECORD_A).withDatetime(DATE_STRING_A).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseSuccess(parser, AMOUNT_DESC_A + DATE_DESC_A,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new AddFinanceCommand(dateFinanceRecord));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, DATE_TIME_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 99
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/DeleteFinanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.DeleteFinanceCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class DeleteFinanceCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private DeleteFinanceCommandParser parser \u003d new DeleteFinanceCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                DeleteFinanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 18
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/EditFinanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_STRING_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.VALID_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.EditFinanceCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class EditFinanceCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFinanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private EditFinanceCommandParser parser \u003d new EditFinanceCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, String.valueOf(VALID_AMOUNT), MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertParseFailure(parser, \"1\", EditFinanceCommand.MESSAGE_AMT_MISSING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"-5\" + AMOUNT_DESC_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"0\" + AMOUNT_DESC_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC_A, \"Amount is not a decimal value.\"); // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC_A + DATE_STRING_A, \"Amount is not a decimal value.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // invalid amount followed by valid date and time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC_A + DATE_TIME_DESC_A, \"Amount is not a decimal value.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 57,
      "Elgoh": 4
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/NuStorageParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class NuStorageParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private final NuStorageParser parser \u003d new NuStorageParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 10,
      "-": 38
    }
  },
  {
    "path": "src/test/java/nustorage/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/nustorage/model/FinanceAccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_B;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.exceptions.DuplicateFinanceRecordException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.testutil.FinanceRecordBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceAccountTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private FinanceAccount finance \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(Collections.emptyList(), finance.getFinanceList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e finance.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void resetData_withValidReadonlyFinanceAccount_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        FinanceAccount newData \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        finance.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(newData, finance);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord record \u003d new FinanceRecordBuilder(RECORD_A).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceRecord editedRecord \u003d new FinanceRecordBuilder(RECORD_A).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        List\u003cFinanceRecord\u003e newRecords \u003d Arrays.asList(record, editedRecord);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceAccountStub newData \u003d new FinanceAccountStub(newRecords);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertThrows(DuplicateFinanceRecordException.class, () -\u003e finance.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void hasFinanceRecord_nullFinanceRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e finance.hasFinanceRecord(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void hasFinanceRecord_financeRecordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertFalse(finance.hasFinanceRecord(RECORD_A));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void haFinanceRecord_financeRecordInFinanceAccount_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        finance.addFinanceRecord(RECORD_A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(finance.hasFinanceRecord(RECORD_A));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void hasFinanceRecord_financeRecordWithSameIdentityFieldsInFinanceWithDifferentIds_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        finance.addFinanceRecord(RECORD_A);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        FinanceRecord financeRecord \u003d new FinanceRecordBuilder("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                RECORD_A).withAmount(AMOUNT_B).withId(ID_B).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // will return false since both the records although have the same field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // but have different ids."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertFalse(finance.hasFinanceRecord(financeRecord));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void getFinanceRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e finance.getFinanceList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * A stub ReadonlyFinance whose financeRecords list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private static class FinanceAccountStub implements ReadOnlyFinanceAccount {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        private final ObservableList\u003cFinanceRecord\u003e financeRecords \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceAccountStub(Collection\u003cFinanceRecord\u003e financeRecords) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.financeRecords.setAll(financeRecords);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        public ObservableList\u003cFinanceRecord\u003e getFinanceList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return financeRecords;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 20,
      "Door-oof": 81
    }
  },
  {
    "path": "src/test/java/nustorage/model/InventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.testutil.TypicalInventoryRecords.INVENTORY_RECORD_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.exceptions.DuplicateInventoryRecordException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.testutil.InventoryRecordBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getInventoryRecordList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void resetData_withValidReadonlyInventory_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Inventory newData \u003d new Inventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void resetData_withDuplicateInventoryRecords_throwsDuplicateInventoryException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // Two inventoryRecords with the same identity fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord editedRecordA \u003d new InventoryRecordBuilder(INVENTORY_RECORD_A).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        List\u003cInventoryRecord\u003e newInventoryRecords \u003d Arrays.asList(INVENTORY_RECORD_A, editedRecordA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryTest.InventoryStub newData \u003d new InventoryTest.InventoryStub(newInventoryRecords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(DuplicateInventoryRecordException.class, () -\u003e inventory.resetData(newData));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void hasInventoryRecord_nullInventoryRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.hasInventoryRecord(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void hasInventoryRecord_inventoryRecordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertFalse(inventory.hasInventoryRecord(INVENTORY_RECORD_A));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void hasInventoryRecord_inventoryRecordInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.addInventoryRecord(INVENTORY_RECORD_A);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertTrue(inventory.hasInventoryRecord(INVENTORY_RECORD_A));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void hasInventoryRecord_inventoryRecordWithSameIdentityFieldsInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        inventory.addInventoryRecord(INVENTORY_RECORD_A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryRecord inventoryRecord \u003d new InventoryRecordBuilder("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                INVENTORY_RECORD_A).withName(ITEM_NAME_1).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertTrue(inventory.hasInventoryRecord(inventoryRecord));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void getInventoryRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventory.getInventoryRecordList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * A stub ReadonlyInventory whose inventoryRecords list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private static class InventoryStub implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        private final ObservableList\u003cInventoryRecord\u003e inventoryRecords \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        InventoryStub(Collection\u003cInventoryRecord\u003e inventoryRecords) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.inventoryRecords.setAll(inventoryRecords);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        public ObservableList\u003cInventoryRecord\u003e getInventoryRecordList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return inventoryRecords;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 97
    }
  },
  {
    "path": "src/test/java/nustorage/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 46
    }
  },
  {
    "path": "src/test/java/nustorage/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/nustorage/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/nustorage/storage/JsonAdaptedFinanceRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_D;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.HAS_INVENTORY_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.HAS_INVENTORY_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.HAS_INVENTORY_C;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.HAS_INVENTORY_D;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_C;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_D;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_A;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_B;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_C;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.TypicalFinanceRecords.RECORD_D;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonAdaptedFinanceRecordTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FinanceWindow record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordA_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d new JsonAdaptedFinanceRecord(RECORD_A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(RECORD_A, testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordB_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d new JsonAdaptedFinanceRecord(RECORD_B);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(RECORD_B, testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordC_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d new JsonAdaptedFinanceRecord(RECORD_C);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(RECORD_C, testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void toModelType_validSourceRecordD_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d new JsonAdaptedFinanceRecord(RECORD_D);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(RECORD_D, testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void toModelType_validDetailsA_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_A, AMOUNT_A, DATE_TIME_A, HAS_INVENTORY_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(new FinanceRecord(ID_A, AMOUNT_A, DATE_TIME_A, HAS_INVENTORY_A), testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void toModelType_validDetailsB_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_B, AMOUNT_B, DATE_TIME_B, HAS_INVENTORY_B);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(new FinanceRecord(ID_B, AMOUNT_B, DATE_TIME_B, HAS_INVENTORY_B), testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void toModelType_validDetailsC_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_C, AMOUNT_C, DATE_TIME_C, HAS_INVENTORY_C);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(new FinanceRecord(ID_C, AMOUNT_C, DATE_TIME_C, HAS_INVENTORY_C), testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    void toModelType_validDetailsD_returnsFinanceRecord() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_D, AMOUNT_D, DATE_TIME_D, HAS_INVENTORY_D);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        assertEquals(new FinanceRecord(ID_D, AMOUNT_D, DATE_TIME_D, HAS_INVENTORY_D), testFinanceRecord.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_A, -1, DATE_TIME_D, HAS_INVENTORY_D);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"amount\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testFinanceRecord::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        JsonAdaptedFinanceRecord testFinanceRecord \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "                new JsonAdaptedFinanceRecord(ID_B, AMOUNT_B, null, HAS_INVENTORY_B);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date-time\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testFinanceRecord::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 45,
      "howtoosee": 57
    }
  },
  {
    "path": "src/test/java/nustorage/storage/JsonAdaptedInventoryRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalInventoryRecords.INVENTORY_RECORD_A;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalInventoryRecords.INVENTORY_RECORD_B;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.testutil.TypicalInventoryRecords.INVENTORY_RECORD_C;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonAdaptedInventoryRecordTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"InventoryWindow record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordA_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d new JsonAdaptedInventoryRecord(INVENTORY_RECORD_A);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(INVENTORY_RECORD_A, testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordB_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d new JsonAdaptedInventoryRecord(INVENTORY_RECORD_B);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(INVENTORY_RECORD_B, testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validSourceRecordC_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d new JsonAdaptedInventoryRecord(INVENTORY_RECORD_C);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(INVENTORY_RECORD_C, testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validDetails1_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_1, QUANTITY_1, COST_1, DATE_TIME_A, ID_A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertEquals(new InventoryRecord(ITEM_NAME_1, QUANTITY_1, COST_1, DATE_TIME_A, ID_A),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_validDetails2_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_2, QUANTITY_2, COST_2, DATE_TIME_B, ID_B);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertEquals(new InventoryRecord(ITEM_NAME_2, QUANTITY_2, COST_2, DATE_TIME_B, ID_B),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    void toModelType_validDetails3_returnsInventoryRecord() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_3, QUANTITY_3, COST_3, DATE_TIME_B, ID_B);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertEquals(new InventoryRecord(ITEM_NAME_3, QUANTITY_3, COST_3, DATE_TIME_B, ID_B),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                testInventoryRecord.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(null, QUANTITY_1, COST_1, DATE_TIME_A, ID_A);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"item name\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testInventoryRecord::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_2, -1, COST_2, DATE_TIME_B, ID_B);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"quantity\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testInventoryRecord::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_2, QUANTITY_2, COST_2, null, ID_B);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"dateTime\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testInventoryRecord::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    void toModelType_invalidCost_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        JsonAdaptedInventoryRecord testInventoryRecord \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                new JsonAdaptedInventoryRecord(ITEM_NAME_3, QUANTITY_3, -15.7, DATE_TIME_B, ID_B);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"unitCost\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, testInventoryRecord::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "howtoosee": 85,
      "Elgoh": 28
    }
  },
  {
    "path": "src/test/java/nustorage/storage/JsonFinanceAccountStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonFinanceAccountStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonFinanceAccountStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_FILE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonFinanceAccountStorageTest\", \"financeAccount.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_TARGET_FILE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonFinanceAccountStorageTest\", \"testSave.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static void removeSaveTargetFile() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // Delete the save target file if it exists before and after the test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            Files.delete(TEST_DATA_TARGET_FILE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (NoSuchFileException ignored) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // ignored"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void getFinanceAccountFilePath_validFilePath_returnsCorrectFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonFinanceAccountStorage testFinanceAccountStorage \u003d new JsonFinanceAccountStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(TEST_DATA_FOLDER, testFinanceAccountStorage.getFinanceAccountFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount(Path filePath)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        throws NullPointerException, DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new JsonFinanceAccountStorage(TEST_DATA_FOLDER).readFinanceAccount(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Optional\u003cReadOnlyFinanceAccount\u003e readFinanceAccount() throws NullPointerException, DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new JsonFinanceAccountStorage(TEST_DATA_FILE).readFinanceAccount();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_validInputs_returnsNonEmptyOptional() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return readFinanceAccount().isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_validFilePath_returnsCorrectFinanceAccount() throws DataConversionException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyFinanceAccount\u003e testOptionalFinanceAccount \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonFinanceAccountStorage(TEST_DATA_FOLDER).readFinanceAccount(TEST_DATA_FILE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(testOptionalFinanceAccount, readFinanceAccount(TEST_DATA_FILE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFinanceAccount(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_invalidJsonFilePath_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // nonExistentAccount.json is a file that does not exist in the directory"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(() -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return readFinanceAccount("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    Paths.get(String.valueOf(TEST_DATA_FOLDER), \"nonExistentAccount.json\")).isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_invalidJsonFile_throwsDataConversionException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // invalidRecord.json is a file that does not follow the json file convention"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            readFinanceAccount(Paths.get(String.valueOf(TEST_DATA_FOLDER), \"invalidRecord.json\"))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readFinanceAccount_invalidFinanceAccountFile_throwsDataConversionException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // invalidRecord.json is a file that does not follow the json file convention"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            readFinanceAccount(Paths.get(String.valueOf(TEST_DATA_FOLDER), \"invalidFinanceAccount.json\"))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyFinanceAccount toSave) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonFinanceAccountStorage(TEST_DATA_FOLDER).saveFinanceAccount(toSave);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyFinanceAccount toSave, Path filePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonFinanceAccountStorage(TEST_DATA_FOLDER)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                .saveFinanceAccount(toSave, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nullFinanceAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(null,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            Paths.get(String.valueOf(TEST_DATA_FOLDER), \"someFinanceAccount.json\"))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount2_nullFinanceAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(new FinanceAccount(), null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nonExistentFilePath_fileCreatedAndSaved() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyFinanceAccount\u003e testFinanceAccount \u003d readFinanceAccount(TEST_DATA_FILE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(testFinanceAccount.isPresent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonFinanceAccountStorage testFinanceAccountStorage \u003d new JsonFinanceAccountStorage(TEST_DATA_TARGET_FILE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testFinanceAccountStorage.saveFinanceAccount(testFinanceAccount.get());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyFinanceAccount\u003e readBackAccount \u003d testFinanceAccountStorage.readFinanceAccount();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(readBackAccount.isPresent());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(testFinanceAccount.get(), readBackAccount.get());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 178
    }
  },
  {
    "path": "src/test/java/nustorage/storage/JsonInventoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_FILE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\", \"inventory.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final Path TEST_DATA_TARGET_FILE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\", \"testSave.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static void removeSaveTargetFile() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // Delete the save target file if it exists before and after the test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            Files.delete(TEST_DATA_TARGET_FILE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (NoSuchFileException ignored) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // ignored"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void getInventoryFilePath_validFilePath_returnsCorrectFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonInventoryStorage testFinanceAccountStorage \u003d new JsonInventoryStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(TEST_DATA_FOLDER, testFinanceAccountStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        throws NullPointerException, DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new JsonInventoryStorage(TEST_DATA_FOLDER).readInventory(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Optional\u003cReadOnlyInventory\u003e readInventory() throws NullPointerException, DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new JsonInventoryStorage(TEST_DATA_FILE).readInventory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_validInputs_returnsNonEmptyOptional() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return readInventory().isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_validFilePath_returnsCorrectFinanceAccount() throws DataConversionException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e testOptionalFinanceAccount \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonInventoryStorage(TEST_DATA_FOLDER).readInventory(TEST_DATA_FILE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(testOptionalFinanceAccount, readInventory(TEST_DATA_FILE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_invalidJsonFilePath_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // nonExistentAccount.json is a file that does not exist in the directory"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(() -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return readInventory("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    Paths.get(String.valueOf(TEST_DATA_FOLDER), \"nonExistentAccount.json\")).isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_invalidJsonFile_throwsDataConversionException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // invalidRecord.json is a file that does not follow the json file convention"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            readInventory(Paths.get(String.valueOf(TEST_DATA_FOLDER), \"invalidRecord.json\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_invalidFinanceAccountFile_throwsDataConversionException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // invalidRecord.json is a file that does not follow the json file convention"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            readInventory(Paths.get(String.valueOf(TEST_DATA_FOLDER), \"invalidInventory.json\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void readInventory_invalidFinanceAccountFile2_throwsDataConversionException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // invalidRecord.json is a file that does not follow the json file convention"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            readInventory(Paths.get(String.valueOf(TEST_DATA_FOLDER), \"invalidInventory2.json\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyInventory toSave) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonInventoryStorage(TEST_DATA_FOLDER).saveInventory(toSave);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount(ReadOnlyInventory toSave, Path filePath) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            new JsonInventoryStorage(TEST_DATA_FOLDER)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                .saveInventory(toSave, filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nullFinanceAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(null,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            Paths.get(String.valueOf(TEST_DATA_FOLDER), \"someFinanceAccount.json\")));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount2_nullFinanceAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFinanceAccount(new Inventory(), null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    void saveFinanceAccount_nonExistentFilePath_fileCreatedAndSaved() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e testFinanceAccount \u003d readInventory(TEST_DATA_FILE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(testFinanceAccount.isPresent());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonInventoryStorage testFinanceAccountStorage \u003d new JsonInventoryStorage(TEST_DATA_TARGET_FILE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testFinanceAccountStorage.saveInventory(testFinanceAccount.get());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e readBackAccount \u003d testFinanceAccountStorage.readInventory();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertTrue(readBackAccount.isPresent());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(testFinanceAccount.get(), readBackAccount.get());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 183
    }
  },
  {
    "path": "src/test/java/nustorage/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getUserPrefsFullPath_validFilePath_returnsCorrectFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Path testPath \u003d Paths.get(String.valueOf(TEST_DATA_FOLDER), \"TypicalUserPref.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(testPath, new JsonUserPrefsStorage(testPath).getUserPrefsFilePath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 5,
      "howtoosee": 6,
      "-": 118
    }
  },
  {
    "path": "src/test/java/nustorage/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonFinanceAccountStorage financeAccountStorage \u003d new JsonFinanceAccountStorage(getTempFilePath(\"finance\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        storageManager \u003d new StorageManager(financeAccountStorage, inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //      * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //      * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //      * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //      */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "howtoosee": 27,
      "-": 43
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/EditFinanceDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.logic.commands.EditFinanceCommand.EditFinanceDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class EditFinanceDescriptorBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private EditFinanceDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor \u003d new EditFinanceDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptorBuilder(EditFinanceDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.descriptor \u003d new EditFinanceDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Returns an {@code EditFinanceDescriptor} with fields containing {@code financeRecord}\u0027s details"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptorBuilder(FinanceRecord financeRecord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor \u003d new EditFinanceDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor.setAmount(financeRecord.getAmount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor.setDatetime(financeRecord.getDateTime());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Sets the amount of the {@code EditFinanceDescriptor} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptorBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor.setAmount(amount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Sets the date and time of the {@code EditFinanceDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptorBuilder withDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        descriptor.setDatetime(dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public EditFinanceDescriptor build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 47
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/FinanceRecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class FinanceRecordBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final int DEFAULT_ID \u003d 123456789;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 250000;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-04-20\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"13:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final boolean DEFAULT_HAS_INVENTORY \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private LocalDateTime datetime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private boolean hasInventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Creates a {@code FinanceRecordBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecordBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        amount \u003d DEFAULT_AMOUNT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        datetime \u003d LocalDateTime.of(LocalDate.parse(DEFAULT_DATE), LocalTime.parse(DEFAULT_TIME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        hasInventory \u003d DEFAULT_HAS_INVENTORY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecordBuilder(FinanceRecord recordToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        id \u003d recordToCopy.getID();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        amount \u003d recordToCopy.getAmount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        datetime \u003d recordToCopy.getDateTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecordBuilder withId(int id) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecordBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecordBuilder withDatetime(String datetime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            this.datetime \u003d ParserUtil.parseDatetime(datetime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new FinanceRecord(id, amount, datetime, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 77,
      "howtoosee": 1
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/InventoryRecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class InventoryRecordBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"MacBook Pro\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-04-20\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"13:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String itemName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Creates a {@code InventoryRecordBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecordBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        itemName \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        dateTime \u003d LocalDateTime.of(LocalDate.parse(DEFAULT_DATE), LocalTime.parse(DEFAULT_TIME));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecordBuilder(InventoryRecord recordToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        itemName \u003d recordToCopy.getItemName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        dateTime \u003d recordToCopy.getDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecordBuilder withName(String itemName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecordBuilder withDatetime(String dateTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            this.dateTime \u003d ParserUtil.parseDatetime(dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public InventoryRecord build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new InventoryRecord(itemName, 0, 0.0 , dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 59
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/TypicalFinanceRecords.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.AMOUNT_D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_D;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.FinanceAccount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class TypicalFinanceRecords {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final FinanceRecord RECORD_A \u003d new FinanceRecord(AMOUNT_A, DATE_TIME_A);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final FinanceRecord RECORD_B \u003d new FinanceRecord(AMOUNT_B, DATE_TIME_B);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final FinanceRecord RECORD_C \u003d new FinanceRecord(AMOUNT_C, DATE_TIME_C);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static final FinanceRecord RECORD_D \u003d new FinanceRecord(AMOUNT_D, DATE_TIME_D);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    private TypicalFinanceRecords() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns an {@code FinanceAccount} with all the typical persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static FinanceAccount getTypicalFinanceAccount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        FinanceAccount fa \u003d new FinanceAccount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        for (FinanceRecord record : getTypicalFinanceRecords()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "            fa.addFinanceRecord(record);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return fa;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public static List\u003cFinanceRecord\u003e getTypicalFinanceRecords() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RECORD_A, RECORD_B, RECORD_C, RECORD_D));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 33,
      "howtoosee": 9
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/TypicalInventoryRecords.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package nustorage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.COST_3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.DATE_TIME_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ID_C;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.ITEM_NAME_3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static nustorage.logic.commands.CommandTestUtil.QUANTITY_3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class TypicalInventoryRecords {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final InventoryRecord INVENTORY_RECORD_A \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new InventoryRecord(ITEM_NAME_1, QUANTITY_1, COST_1, DATE_TIME_A, ID_A);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final InventoryRecord INVENTORY_RECORD_B \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new InventoryRecord(ITEM_NAME_2, QUANTITY_2, COST_2, DATE_TIME_B, ID_B);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final InventoryRecord INVENTORY_RECORD_C \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new InventoryRecord(ITEM_NAME_3, QUANTITY_3, COST_3, DATE_TIME_C, ID_C);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TypicalInventoryRecords() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "     * Returns an {@code InventoryWindow} with all the typical inventoryRecords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Inventory ab \u003d new Inventory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (InventoryRecord inventoryRecords : getTypicalInventoryRecords()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            ab.addInventoryRecord(inventoryRecords);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static List\u003cInventoryRecord\u003e getTypicalInventoryRecords() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(INVENTORY_RECORD_A, INVENTORY_RECORD_B, INVENTORY_RECORD_C));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 4,
      "howtoosee": 23,
      "Elgoh": 6,
      "Door-oof": 21
    }
  },
  {
    "path": "src/test/java/nustorage/testutil/stub/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.testutil.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.ReadOnlyFinanceAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import nustorage.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.FinanceRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.model.record.InventoryRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void addInventoryRecord(InventoryRecord newRecord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void deleteInventoryRecord(InventoryRecord target) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ObservableList\u003cInventoryRecord\u003e getFilteredInventory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Inventory getInventory() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public boolean hasInventoryRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setInventoryRecord(InventoryRecord a, InventoryRecord b) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void addFinanceRecord(FinanceRecord newRecord) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ObservableList\u003cFinanceRecord\u003e getFilteredFinanceList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void setFinanceRecord(FinanceRecord target, FinanceRecord editedFinanceRecord) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void deleteFinanceRecord(FinanceRecord target) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public ReadOnlyFinanceAccount getFinanceAccount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public FinanceRecord getFinanceRecord(InventoryRecord inventoryRecord) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public FinanceRecord getFinanceRecord(Integer id) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void updateFilteredInventoryList(Predicate\u003cInventoryRecord\u003e predicate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    public void updateFilteredFinanceList(Predicate\u003cFinanceRecord\u003e predicate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 9,
      "FizzyAgent": 97,
      "howtoosee": 6
    }
  },
  {
    "path": "src/test/java/nustorage/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/nustorage/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "package nustorage.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import static nustorage.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "import nustorage.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "\u003c?import nustorage.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FizzyAgent"
        },
        "content": "\u003cfx:root type\u003d\"nustorage.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FizzyAgent": 1,
      "-": 5
    }
  }
]
