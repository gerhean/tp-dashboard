[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "## Team Project by team T12-3: PlaNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Are you still struggling with all your projects and modules? Do you want to have a sense of how much time you spent"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "on each of them? PlaNus is here to help! By providing a clear data visualisation of various aspects of your project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "life, such as time spent, productivity and so on, PlaNus helps you to maintain a better work-life balance and plan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "better for choosing your future workloads!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Site Map"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[Developers Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Acknowledgement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 16,
      "-": 4,
      "MarcTzh": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Zhou Zijian"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cimg src\u003d\"images/bobbyzhouzijian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[homepage](http://www.zijianzhou.com/)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[github](https://github.com/BobbyZhouZijian)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[portfolio](team/bobbyzhouzijian.md)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Tech Lead, Git Expert"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Responsibilities: Scheduling and Tracking"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "### Marcus Tan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cimg src\u003d\"images/marctzh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "[[github](http://github.com/marctzh)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "[[portfolio](team/marctzh.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* Responsibilities: UI and Testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "### Gabriella Teh"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "\u003cimg src\u003d\"images/gabriellateh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[github](http://github.com/GabriellaTeh)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[[portfolio](team/gabriellateh.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* Responsibilities: Documentation, deliverables and deadlines"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "### Li Beining"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "\u003cimg src\u003d\"images/dearvae.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "[[github](http://github.com/dearvae)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "[[portfolio](team/dearvae.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Developer, Figma Expert"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* Responsibilities: Integration"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "### Li Gangwei"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cimg src\u003d\"images/nuovonatura.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "[[github](http://github.com/nuovonatura)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "[[portfolio](team/nuovonatura.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* Role: Developer, JavaFX Expert"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* Responsibilities: UI and Code Quality"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 11,
      "-": 31,
      "dearvae": 6,
      "MarcTzh": 6,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 3. The user executes `add n/David …` to add a new task. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* NUS Student"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* has a lot of project works"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* wants to track productivity"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* wants to track workload"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dearvae"
        },
        "content": "**Value proposition**: Allows NUS students to manage their tasks and schedule faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| Priority | As a …                  | I want to …                                | So that I can…                      |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| -------- | ----------------------- | ------------------------------------------ | ----------------------------------- |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | new user                | have a help command                        | easily access the user guide.       |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | user                    | add new task to my list                    |                                     |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | student                 | know when my tasks are due                 |                                     |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user                    | maintain a list of tasks I currently have  |                                     |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user with a lot of task | delete my task after it is not relevant    | be focused on the unfinished tasks. |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* * *`  | user                    | mark my task as done after it is completed | track the status of the task        |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | find tasks by module                       |                                     |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | find tasks by due date                     |                                     |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | mark my task as done after it is completed |                                     |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| `* * *`  | user                    | find tasks by title                        |                                     |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dearvae"
        },
        "content": "| `* *  `  | user                    | find tasks by category                     |                                     |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "| `* * *`  | user                    | edit my tasks                              |                                     |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "(For all use cases below, the **System** is `PlaNus` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 01: Add a task**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to add a specific task to the list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus adds the task."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1a. The given index is invalid."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 02: Delete a task**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to list tasks."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    3. User requests to delete a specific task in the list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    4. PlaNus deletes the task."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 3a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 03: List all tasks**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to list tasks."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 2a. The list is empty."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 04: Request help**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests help."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows available commands."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 05: Mark a task as done**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to list tasks."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows a list of tasks."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    3. User requests to mark a specific tasks in the list as done."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    4. PlaNus marks the task as done."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 3a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 06: Find a task**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to find task with specified search phrase(s) in specified attribute(s)."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows a list of tasks that match the specified search phrase(s) in the specified attribute(s)."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 07: Edit a task**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to edit values of specified attribute(s) of a task."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus shows task with updated attribute(s)."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1a. The given index is invalid."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1a1. PlaNus shows an error message."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "- 1b. The given value of an attribute is invalid."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  - 1b1. PlaNus shows an error message."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Use case 08: Exit application**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    1. User requests to exit application."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    2. PlaNus exits application."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "2. Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "   \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "   \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "4. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using a mouse."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "5. The product should be easy to use by a novice with no experience of using a task management application."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "6. The size of built-in module data should not exceed 10mb."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "7. Documentation should be easy to read with proper highlighting."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "8. The source code should be open source."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 40c48479e0967772ef6be58268c9d0236e38d3f4"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Task**: A task is a collection of details about a specific task that needs to be done, including description, title, date and time."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. Deleting a task while all tasks are being shown"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "   1. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "      Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| ---- | ---- |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "|      |      |"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 16,
      "-": 339,
      "dearvae": 12,
      "MarcTzh": 169
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "![PlanusLogo](images/PlanusLogo.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "User Guide v1.3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "PlaNus is a desktop app for **managing tasks, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Show all commands : `help`](#show-all-commands--help)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [List all tasks : `list`](#list-all-tasks--list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Add a task: `add`](#add-a-task-add)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Delete a task : `delete`](#delete-a-task--delete)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Mark a task as done: `done`](#mark-a-task-as-done-done)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Find a task : `find`](#find-a-task-by-attribute-find)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * [Edit a task : `edit`](#edit-a-task-edit`)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * [Exit the program : `exit`](#exit-the-program--exit)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* [Command summary](#command-summary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "**Notes about the command format**\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  e.g. in `add title:TITLE`, `TITLE` is a parameter which can be used as `title:homework 1`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* Items in square brackets are optional input. e.g `desc:DESCRIPTION` \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  `[desc:DESCRIPTION]` can be used as `title:homework 1 desc:science project` or just as `title:homework 1`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  e.g. `done INDEX...` can be used as (i.e. 0 times), `done 1 2 3`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "  e.g. if the command specifies `title:TITLE desc:DESCRIPTION`, `desc:DESCRIPTION title:TITLE` is also acceptable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Show all commands : `help`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### List all tasks : `list`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Shows a list of all tasks in PlaNus."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "![list tasks](images/ListTasks.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Add a task: `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Adds a task of the specified type to PlaNus."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Format: `add title:TITLE type:TYPE_OF_TASK [desc:DESCRIPTION] [date:DATE_TIME]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* Adds the task of the specified `type:TYPE_OF_TASK` to PlaNus."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* The type must be of the following types(case-sensitive):"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * todo"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * deadline"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* `add title:return book type:todo` Adds a task with title return book and type todo to PlaNus."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* `add title:Birthday party type:event desc:Frank’s birthday party date:01-01-2020 18:00`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  Adds a task with title “Birthday party” , type event,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  description “Frank’s birthday party” , and date and time “01-01-2020 18:00” to PlaNus."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Delete a task : `delete`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Deletes the specified task from PlaNus."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* Deletes the task(s) at the specified `INDEX`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `list` followed by `delete 1 2` deletes the 1st task followed by the 2nd task in the results of the `list` command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* `find title:homework` followed by `delete 1` deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Mark a task as done: `done`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Marks a specified task in PlaNus as done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Format: `done INDEX...`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* Marks the task(s) at the specified `INDEX...` as done"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* The index refers to the index number shown in the displayed task list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* `list` followed by `done 2 3` marks the 2nd and the 3rd tasks in the results of the `list` command status to be done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* `find title:homework` followed by `done 1` marks the 1st task in the results of the `find` command status to be done."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Find a task by attribute: `find`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Finds a task by a set of defined attribute by the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Format: `find ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Available attributes in v1.3 include:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `title:` find all tasks with the search phrase in the given title"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `desc:` find all tasks with the search phrase in the given description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `type:` find all tasks of the given type"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `date:` find all tasks with the given date and/or time"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `find title:play games` will list all tasks with title that includes the phrase `play games`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* `find type:todo` will list all tasks with the type `todo`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `find title:dinner type:todo` will list all tasks with a title that includes `dinner` and of the type `todo`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `find date:01-01-2020` will list all tasks with the date 01-01-2020"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "### Edit a task: `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Finds a task by a set of defined attribute by the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Format: `edit ATTRIBUTE_1:NEW_VALUE ATTRIBUTE_2:NEW_VALUE ...`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Available attributes in v1.3 include:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `title`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `desc`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `type`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `date`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `edit 1 title:play games` will edit the first task in the results of the `list` command, changing its title to `play games` and type of task to `todo`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* `find title:homework` followed by`edit 2 date:01-01-2020` will edit the 1st task in the results of the `find` command, changing its date to 01-01-2020"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "### Exit the program : `exit`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dearvae"
        },
        "content": "Exits PlaNus."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dearvae"
        },
        "content": "**Q**: How do I start the application?\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dearvae"
        },
        "content": "**A**: In command prompt, go to the folder the application resides in and type: java - jar planus.jar"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| Action     | Format, Examples                                             |"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| ---------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Add**    | `add title:TITLE type:TYPE_OF_TASK [desc:DESCRIPTION] [date:DATE_TIME]` \u003cbr\u003e e.g. `add title:return book type:todo` |"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Delete** | `delete INDEX...` \u003cbr\u003e e.g. `delete 3`                       |"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **List**   | `list`                                                       |"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Help**   | `help`                                                       |"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Done**   | `done INDEX...`\u003cbr\u003e e.g. `done 1 2 3`                        |"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Find**   | `find ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...` \u003cbr\u003e e.g.`find title:dinner type:todo` |"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "| **Exit**   | `exit`                                                       |"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 11,
      "BobbyZhouZijian": 23,
      "-": 82,
      "dearvae": 8,
      "MarcTzh": 39,
      "GabriellaTeh": 14
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "title: PlaNus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "**PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If you are interested in using PlaNus, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* If you are interested about developing PlaNus, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 13
    }
  },
  {
    "path": "docs/team/bobbyzhouzijian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "title: Zhou Zijian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dbobbyzhouzijian\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Added documentation for the features `list` [\\#59](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/59)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    * Added hyperlinks to Table of Content [\\#74](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/74)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#56](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/56),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  [\\#61](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/61), [\\#64](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/64),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "  [\\#65](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/65)"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 28
    }
  },
  {
    "path": "docs/team/dearvae.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "title: Li Beining\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddearvae\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Documentation**: (to be updated)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "dearvae": 2,
      "GabriellaTeh": 21
    }
  },
  {
    "path": "docs/team/gabriellateh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "title: Gabriella Teh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dgabriellateh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) (to be updated)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    * Added documentation for the features `add` [\\#78](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/78)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    * Added documentation for the features `delete` [\\#65](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/65)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "GabriellaTeh": 26
    }
  },
  {
    "path": "docs/team/marctzh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "title: Marcus Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmarctzh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) (to be updated)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Documentation**: (to be updated)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "MarcTzh": 22
    }
  },
  {
    "path": "docs/team/nuovonatura.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "title: Li Gangwei\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Project management**: Update the README and website pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * Update the README and website markdowns to be consistent with our project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * Managed releases `v1.1 - v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dnuovonatura\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    * Added documentation for the features `done` [\\#62](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/62)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    * Formatted the user guide [\\#72](https://github.com/AY2021S1-CS2103T-T12-3/tp/pull/72)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (to be updated)"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 26
    }
  },
  {
    "path": "docs/team/template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "## Project: PlaNus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "PlaNus is a desktop application for **managing tasks, optimized for use via a Command Line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "type fast, PlaNus can get your tasks managed faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.task.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "MarcTzh": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       Person taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       Person editedTask \u003d createEditedPerson(taskToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       if (!taskToEdit.isSamePerson(editedTask) \u0026\u0026 model.hasPerson(editedTask)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       model.setPerson(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "       tasks.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 244,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.JsonPlanusStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.PlanusStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PlaNus ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStorage planusStorage \u003d new JsonPlanusStorage(userPrefs.gePlanusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storage \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s planus and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The data from the sample planus will be used instead if {@code storage}\u0027s planus is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * or an empty planusk will be used instead if errors occur when reading {@code storage}\u0027s planus."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Optional\u003cReadOnlyPlanus\u003e planusOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            planusOptional \u003d storage.readPlanus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!planusOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample task list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d planusOptional.orElseGet(SampleDataUtil::getSamplePlanus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d new Planus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            initialData \u003d new Planus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty task list\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"Starting PlaNus \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PlaNus ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 159,
      "MarcTzh": 16,
      "GabriellaTeh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String LOG_FILE \u003d \"planus.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_INVALID_TASKS_DISPLAYED_INDEX \u003d \"One or more task indexes provided are invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_INDEX \u003d \"Please do not include duplicate indexes.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_INCORRECT_TASK_STATUS \u003d \"One or more targeted task is already completed.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Please check your command carefully.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "dearvae": 4,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *   Ignores case"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *       matchesWordIgnoreCase(\"ABc def\", \"abc\", true) \u003d\u003d true // a full match, ignore case"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *       matchesWordIgnoreCase(\"ABc def\", \"ABadncbas\") \u003d\u003d false //not a match"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param word cannot be null, cannot be empty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static boolean matchesWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return isMatched(sentence.toLowerCase(), preppedWord.toLowerCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static boolean isMatched(String sentence, String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int keywordLength \u003d keyword.length();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        int taskLength \u003d sentence.length();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // if keyword is longer or is empty, no match can be found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (keywordLength \u003e taskLength || keywordLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d taskLength - keywordLength; ++i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            boolean matchFound \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            for (int j \u003d 0; j \u003c keywordLength; ++j) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                if (sentence.charAt(i + j) !\u003d keyword.charAt(j)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    matchFound \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (matchFound) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 29,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the Planus."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see seedu.address.model.Model#getPlanus()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ReadOnlyPlanus getPlanus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "MarcTzh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.PlanusParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final PlanusParser planusParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        planusParser \u003d new PlanusParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Command command \u003d planusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            storage.savePlanus(model.getPlanus());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getPlanus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getPlanusFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 4,
      "-": 68,
      "MarcTzh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Adds a task to the PlaNus task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to PlaNus. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + PREFIX_DATE_TIME + \"DATE_TIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TITLE + \"Do work \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + PREFIX_DATE_TIME + \"01-01-2020 12:00 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Science experiment \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + PREFIX_TYPE + \"event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in PlaNus.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 3,
      "-": 38,
      "GabriellaTeh": 6,
      "MarcTzh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Clears PlaNus."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"PlaNus has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.setPlanus(new Planus());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "MarcTzh": 2,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from PlaNus."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "MarcTzh": 8,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the PlaNus."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \": mark the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Parameters: INDEX (one or more positive integers that is separated by a white space)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Task: %1$s is marked as complete.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Index[] targetIndexes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Creates an DoneCommand to mark tasks with {@code targetIndexes} as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneCommand(Index[] targetIndexes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] tasksToMarkAsDone \u003d new Task[targetIndexes.length];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        checkDuplicateIndex();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (targetIndexes[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToMarkAsDone[i] \u003d lastShownList.get(targetIndexes[i].getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (!allHaveIncompleteStatus(tasksToMarkAsDone)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INCORRECT_TASK_STATUS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        model.markAsDone(tasksToMarkAsDone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new CommandResult(buildMessage(tasksToMarkAsDone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param tasks that is been marked as done"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * returns message built by the list of tasks done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static String buildMessage(Task[] tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            message +\u003d String.format(MESSAGE_DONE_TASK_SUCCESS, tasks[i].getTitle()) + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndexes, ((DoneCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private void checkDuplicateIndex() throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndexes.length; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            for (int j \u003d i + 1; j \u003c targetIndexes.length; j++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                if (targetIndexes[i].equals(targetIndexes[j])) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_DUPLICATE_TASK_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private boolean allHaveIncompleteStatus(Task[] tasksToMarkAsDone) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksToMarkAsDone.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (tasksToMarkAsDone[i].statusIs(State.COMPLETE)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 93,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Edits the details of an existing task in PlaNus task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + \"[\" + PREFIX_DATE_TIME + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + PREFIX_DATE_TIME + \"02-02-2020 12:00 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + PREFIX_DESCRIPTION + \"johndoe,example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in PlaNus.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        DateTime updatedDateTime \u003d editTaskDescriptor.getDateTime().orElse(taskToEdit.getDateTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Type updatedType \u003d editTaskDescriptor.getType().orElse(taskToEdit.getType());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return new Task(updatedTitle, updatedDateTime, updatedDescription, updatedType, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, dateTime, description, type, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 11,
      "BobbyZhouZijian": 13,
      "-": 143,
      "GabriellaTeh": 16,
      "MarcTzh": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PlaNus as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Finds and lists all tasks in PlaNus whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks with the specified attribute\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"containing the specified search phrase (case-insensitive)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Parameters: ATTRIBUTE_1:SEARCH_PHRASE ATTRIBUTE_2:SEARCH_PHRASE ...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"For list of all available attribute, please refer to the user guide by typing \u0027help\u0027 command\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" title:meet zijian type:todo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final TaskContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public FindCommand(TaskContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 32,
      "GabriellaTeh": 1,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Lists all tasks in PlaNus task list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "MarcTzh": 3,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    PREFIX_DESCRIPTION, PREFIX_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_TYPE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DateTime dateTime \u003d DateTime.defaultDateTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Description description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Task task \u003d new Task(title, dateTime, description, type, tagList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 2,
      "-": 44,
      "dearvae": 8,
      "GabriellaTeh": 4,
      "MarcTzh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Prefix PREFIX_DATE_TIME \u003d new Prefix(\"date:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 1,
      "BobbyZhouZijian": 1,
      "-": 11,
      "MarcTzh": 1,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            Index[] indexes \u003d ParserUtil.parseVarargsIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new DoneCommand(indexes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE_TIME,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            editTaskDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            editTaskDescriptor.setDateTime(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            editTaskDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 4,
      "BobbyZhouZijian": 5,
      "-": 64,
      "GabriellaTeh": 4,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                                            PREFIX_DESCRIPTION, PREFIX_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                            PREFIX_DESCRIPTION, PREFIX_DATE_TIME, PREFIX_TYPE, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            predicate.setKeyword(PREFIX_TITLE, argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            predicate.setKeyword(PREFIX_DATE_TIME, argMultimap.getValue(PREFIX_DATE_TIME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            predicate.setKeyword(PREFIX_DESCRIPTION, argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            predicate.setKeyword(PREFIX_TYPE, argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 34,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Parses {@code oneBasedIndexes} into an {@code Index array} and returns it. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Index[] parseVarargsIndex(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String[] splited \u003d oneBasedIndexes.trim().split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d new Index[splited.length];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c splited.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splited[i])) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            indexes[i] \u003d Index.fromOneBased(Integer.parseInt(splited[i]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Parses a {@code String type} into an {@code Type}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 9,
      "BobbyZhouZijian": 9,
      "-": 89,
      "dearvae": 16,
      "GabriellaTeh": 9,
      "MarcTzh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PlanusParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class PlanusParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 75,
      "dearvae": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Sets the user prefs\u0027 PlaNus file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setPlanusFilePath(Path planusFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces PlaNus data with the data in {@code planus}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setPlanus(ReadOnlyPlanus planus);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns PlaNus */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ReadOnlyPlanus getPlanus();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in PlaNus."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must exist in PlaNus."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Mark the given array of tasks to be done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The tasks must exist in PlaNus."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    void markAsDone(Task[] targets);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code task} must not already exist in PlaNus."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in PlaNus."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "dearvae": 2,
      "MarcTzh": 22,
      "GabriellaTeh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Planus planus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Initializes a ModelManager with the given planus and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ModelManager(ReadOnlyPlanus planus, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(planus, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + planus + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus \u003d new Planus(planus);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.planus.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this(new Planus(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return userPrefs.gePlanusFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath(Path planusFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planusFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(planusFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planus \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanus(ReadOnlyPlanus planus) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus.resetData(planus);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus.hasTask(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.removeTask(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Task[] targets) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.markAsDone(targets);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.setTask(target, editedTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code versionedPlanus}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus.equals(other.planus)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "dearvae": 1,
      "MarcTzh": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Planus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Planus implements ReadOnlyPlanus {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates an Planus using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus(ReadOnlyPlanus toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Resets the existing data of this {@code Planus} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData(ReadOnlyPlanus newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the PlaNUS task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Adds a task to PlaNus."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task must not already exist in the PlaNus task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code target} must exist in the PlaNus task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Mark the given tasks {@code targets} in the list as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * task in targets must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Task[] targets) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(targets);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        tasks.markAsDone(targets);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Removes {@code key} from this {@code Planus}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code key} must exist in PlaNus."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof Planus // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 tasks.equals(((Planus) other).tasks));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "dearvae": 9,
      "MarcTzh": 33,
      "GabriellaTeh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPlanus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Unmodifiable view of an PlaNus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface ReadOnlyPlanus {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path gePlanusFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Path planusFilePath \u003d Paths.get(\"data\" , \"planus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        setPlanusFilePath(newUserPrefs.gePlanusFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path gePlanusFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath(Path planusFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planusFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planusFilePath \u003d planusFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 planusFilePath.equals(o.planusFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Objects.hash(guiSettings, planusFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + planusFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "MarcTzh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Represents a Tag in the PlaNus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s date and time in PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            \"DateTime should be in the format of dd-MM-yyyy HH:mm.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            \"^(3[01]|[12][0-9]|0[1-9])-(1[0-2]|0[1-9])-[0-9]{4} (2[0-3]|[01]?[0-9]):([0-5]?[0-9])$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String DEFAULT_DATE_TIME \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        value \u003d dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a default {@code DateTime}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Caveat: Only called by defaultDateTime method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private DateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        value \u003d DEFAULT_DATE_TIME;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a given string is a valid dateTime number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs an empty DateTime object if the user does not provide the dateTime field."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Caveat: Only called when the user does not key in this field."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static DateTime defaultDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new DateTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "dearvae": 17,
      "MarcTzh": 1,
      "GabriellaTeh": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Represents a Task\u0027s description in the PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Comprises of a few sentences representing a brief description of the content of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions should only contain alphanumerical values\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"as well as comma, period, question mark and exclamation mark, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"should also not be blank or start with space\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            + \"example \u003d\u003e desc:Tell Zijian to review my PR!!! Repeat, this is urgent!!! You get it?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum},.!?][\\\\p{Alnum},.!? ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a default {@code Description}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Caveat: Only called by the defaultDescription method."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Description() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        value \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Returns if a given string is a valid description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs an empty Description object if the user does not provide the description field."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Caveat: Only called when the user does not key in this field."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Description defaultDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Description();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 60,
      "dearvae": 14,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * A task\u0027s state can be either complete or imcomplete."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    COMPLETE(\"Complete\"), INCOMPLETE(\"Incomplete\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private String state;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    State(String state) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * returns a State of corresponding text."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static State toState(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (State s : State.values()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (s.state.equalsIgnoreCase(text)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                return s;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 28,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s Status in the PlaNus task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            \"The value is from the enum class State\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public final State value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Constructs a {@code Status}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param state of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Status(State state) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.value \u003d state;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Constructs a default {@code Status} that has a state of incomplete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Status() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        value \u003d State.INCOMPLETE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns a default Status object which has a state of incomplete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static Status defaultStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Status();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Return true if the state in param is same as value, else return false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean is(State state) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value.equals(state);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 value.equals(((Status) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 61,
      "GabriellaTeh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task in the PlaNus task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public Task(Title title, DateTime dateTime, Description description, Type type, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(title, dateTime, description, type, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d Status.defaultStatus();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public Task(Title title, DateTime dateTime, Description description, Type type, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                Status status) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        requireAllNonNull(title, dateTime, description, type, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Returns true if the task\u0027s status is in the given State."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * @param state"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public boolean statusIs(State state) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return status.is(state);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if both tasks of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 (otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                || otherTask.getDescription().equals(getDescription()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Task(title, dateTime, description, type, tags, new Status(State.COMPLETE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                \u0026\u0026 otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 otherTask.getType().equals(getType())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        return Objects.hash(title, dateTime, description, type, tags, status);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        builder.append(\" Status: \").append(getStatus());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 8,
      "BobbyZhouZijian": 7,
      "-": 75,
      "dearvae": 32,
      "MarcTzh": 18,
      "GabriellaTeh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " * Tests that a {@code Task}\u0027s given attribute matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class TaskContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public TaskContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.keywords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void setKeyword(Prefix attribute, String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e extendedKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (keywords.containsKey(attribute)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            extendedKeywords \u003d keywords.get(attribute);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        extendedKeywords.add(keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        keywords.put(attribute, extendedKeywords);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Map.Entry\u003cPrefix, List\u003cString\u003e\u003e entry : keywords.entrySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            Prefix prefix \u003d entry.getKey();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            List\u003cString\u003e words \u003d entry.getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (isMatched(prefix.getPrefix(), words, task)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (!(other instanceof TaskContainsKeywordsPredicate)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate casted \u003d (TaskContainsKeywordsPredicate) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        for (Prefix key : keywords.keySet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            if (!casted.keywords.containsKey(key) || !keywords.get(key).equals(casted.keywords.get(key))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private boolean isMatched(String prefix, List\u003cString\u003e words, Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"title:\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"desc:\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getDescription().value, keyword));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"date:\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getDateTime().value, keyword));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (prefix.equals(\"type:\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            return words.stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.matchesWordIgnoreCase(task.getType().value, keyword));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s title in the PlaNus task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            \"Title should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "MarcTzh": 16,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": " * Represents a Task\u0027s type in the PlaNus task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Types of task that a user can create."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public enum TypeOfTask {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DEADLINE(\"deadline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private final String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        TypeOfTask(String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return this.type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String ACCEPTED_TYPES \u003d listAcceptedTypes();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d String.format(\"Type can only be one of the following: %s.\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            ACCEPTED_TYPES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        value \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static boolean isValidType(String testType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(testType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (TypeOfTask types : TypeOfTask.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            String type \u003d types.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (type.equals(testType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns all possible types of task a user can create."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @return a String containing all possible types of task a user can create."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static String listAcceptedTypes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ArrayList\u003cString\u003e listOfAcceptedTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (TypeOfTask types : TypeOfTask.values()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            listOfAcceptedTypes.add(types.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String acceptedTypes \u003d String.join(\", \", listOfAcceptedTypes);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return acceptedTypes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                \u0026\u0026 value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 10,
      "-": 37,
      "MarcTzh": 42,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTasks(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * tasks uses Task#isSameTasks(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * unique in terms of identity in the UniqueTasksList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Replaces the task in the list with {@code tasks} done version."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * each task in tasks must exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void markAsDone(Task[] tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        requireNonNull(tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            int index \u003d internalList.indexOf(tasks[i]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            internalList.set(index, tasks[i].markAsDone());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "dearvae": 16,
      "MarcTzh": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Contains utility methods for populating {@code Planus} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            new Task(new Title(\"Borrow books\"), DateTime.defaultDateTime(), Description.defaultDescription(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                new Type(\"todo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                getTagSet(\"friends\"), new Status(State.COMPLETE)),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            new Task(new Title(\"Assignment 1\"), new DateTime(\"25-11-2020 09:00\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    new Description(\"Programming Assignment 2 of CS3230, Very hard.\"), new Type(\"deadline\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            new Task(new Title(\"CCA Orientation\"), new DateTime(\"16-01-2021 13:00\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    Description.defaultDescription(), new Type(\"event\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            new Task(new Title(\"Do laundry\"), new DateTime(\"16-10-2020 17:00\"), Description.defaultDescription(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    new Type(\"todo\"), getTagSet(\"what\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            new Task(new Title(\"CS2105 tutorial\"), new DateTime(\"15-10-2020 16:00\"), new Description(\"Remember to do \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                    + \"tutorial questions before the tutorial\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    new Type(\"event\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    getTagSet(\"friends\"), new Status(State.COMPLETE)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            new Task(new Title(\"Return books\"), DateTime.defaultDateTime(), Description.defaultDescription(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    new Type(\"todo\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static ReadOnlyPlanus getSamplePlanus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus sampleAb \u003d new Planus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 22,
      "-": 30,
      "dearvae": 2,
      "MarcTzh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title, @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "           @JsonProperty(\"description\") String description, @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        dateTime \u003d source.getDateTime().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d source.getStatus().value.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final DateTime modelDateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (dateTime \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDateTime \u003d DateTime.defaultDateTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // tentatively description field is not allowed to be empty"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (description \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        final Status modelStatus \u003d new Status(State.toState(status));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Task(modelTitle, modelDateTime, modelDescription, modelType, modelTags, modelStatus);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 10,
      "BobbyZhouZijian": 9,
      "-": 56,
      "dearvae": 28,
      "GabriellaTeh": 10,
      "MarcTzh": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPlanusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A class to access Planus data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonPlanusStorage implements PlanusStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlanusStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonPlanusStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return readPlanus(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Similar to {@link #readPlanus()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Optional\u003cJsonSerializablePlanus\u003e jsonPlanus \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                filePath, JsonSerializablePlanus.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!jsonPlanus.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return Optional.of(jsonPlanus.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        savePlanus(planus, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Similar to {@link #savePlanus(ReadOnlyPlanus)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        requireNonNull(planus);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePlanus(planus), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "MarcTzh": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePlanus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * An Immutable Planus that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "@JsonRootName(value \u003d \"planus\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "class JsonSerializablePlanus {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Constructs a {@code JsonSerializablePlanus} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonSerializablePlanus(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Converts a given {@code ReadOnlyPlanus} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlanus}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public JsonSerializablePlanus(ReadOnlyPlanus source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Planus} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planus \u003d new Planus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (planus.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            planus.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "MarcTzh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PlanusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Represents a storage for {@link Planus}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface PlanusStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns Planus data as a {@link ReadOnlyPlanus}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see #getPlanusFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Saves the given {@link ReadOnlyPlanus} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @param planus cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see #savePlanus(ReadOnlyPlanus)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public interface Storage extends PlanusStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Path getPlanusFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    void savePlanus(ReadOnlyPlanus planus) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "MarcTzh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Manages storage of Planus data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private PlanusStorage planusStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PlanusStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public StorageManager(PlanusStorage planusStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planusStorage \u003d planusStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Planus methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusStorage.getPlanusFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return readPlanus(planusStorage.getPlanusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Optional\u003cReadOnlyPlanus\u003e readPlanus(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planusStorage.readPlanus(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        savePlanus(planus, planusStorage.getPlanusFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planusStorage.savePlanus(planus, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "MarcTzh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t12-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPlanusFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 189,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planus level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private CheckBox statusSign;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox dateTimeHolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private HBox descriptionHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        type.setText(task.getType().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadStatus(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDescription(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        loadDateTime(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadStatus(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (task.getStatus().value.equals(State.COMPLETE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            statusSign.setSelected(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status.setText(task.getStatus().value.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDateTime(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (task.getDateTime().equals(DateTime.defaultDateTime())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(dateTimeHolder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            dateTime.setText(task.getDateTime().value.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private boolean loadDescription(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        if (task.getDescription().equals(Description.defaultDescription())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            card.getChildren().remove(descriptionHolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            description.setText(task.getDescription().value.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 48,
      "-": 50,
      "dearvae": 2,
      "MarcTzh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "MarcTzh": 15,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/planus.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "         title\u003d\"PlaNus\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    \u003cImage url\u003d\"@/images/planus.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 2,
      "-": 56,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cCheckBox fx:id\u003d\"statusSign\" alignment\u003d\"CENTER\" disable\u003d\"true\" mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/CheckBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    \u003cVBox fx:id\u003d\"card\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Status:\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Type:\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox fx:id\u003d\"dateTimeHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Date \u0026amp; Time:\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cHBox fx:id\u003d\"descriptionHolder\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "               \u003cLabel text\u003d\"Description:\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 45,
      "BobbyZhouZijian": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/planus.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(serializableTestClass.getTitle(), SerializableTestClass.getTitleTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                StringUtil.matchesWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            -\u003e StringUtil.matchesWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.matchesWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"01-01-2020 18:00\", \"01-02-2020\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"todo\", \"todu\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // mismatched"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"bbbbccc\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(StringUtil.matchesWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 24,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.storage.JsonPlanusStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage planusStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new JsonPlanusStorage(temporaryFolder.resolve(\"planus.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Setup LogicManager with JsonPlanusIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage planusStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new JsonPlanusIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPlanus.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DATE_TIME_DESC_AMY + DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static class JsonPlanusIoExceptionThrowingStub extends JsonPlanusStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private JsonPlanusIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void savePlanus(ReadOnlyPlanus planus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 2,
      "BobbyZhouZijian": 1,
      "-": 134,
      "MarcTzh": 23,
      "GabriellaTeh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskInList \u003d model.getPlanus().getTaskList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "MarcTzh": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_TASK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task cook \u003d new TaskBuilder().withTitle(\"Cook dinner\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task wash \u003d new TaskBuilder().withTitle(\"Wash dishes\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        AddCommand addCookCommand \u003d new AddCommand(cook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        AddCommand addWashCommand \u003d new AddCommand(wash);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(addCookCommand.equals(addCookCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        AddCommand addCookCommandCopy \u003d new AddCommand(cook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(addCookCommand.equals(addCookCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(addCookCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(addCookCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(addCookCommand.equals(addWashCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public Path getPlanusFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setPlanusFilePath(Path planusFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setPlanus(ReadOnlyPlanus newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        public void markAsDone(Task[] targets) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * A Model stub that always accepts the task being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public ReadOnlyPlanus getPlanus() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return new Planus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "dearvae": 1,
      "MarcTzh": 56,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_emptyPlanus_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_nonEmptyPlanus_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.setPlanus(new Planus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String VALID_DATE_TIME_AMY \u003d \"31-12-2020 17:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String VALID_DATE_TIME_BOB \u003d \"01-01-2020 00:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"amy,example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"bob,example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String VALID_TYPE_AMY \u003d \"todo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"deadline\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String DATE_TIME_DESC_AMY \u003d \" \" + PREFIX_DATE_TIME + VALID_DATE_TIME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String DATE_TIME_DESC_BOB \u003d \" \" + PREFIX_DATE_TIME + VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String TYPE_DESC_AMY \u003d \" \" + PREFIX_TYPE + VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String TYPE_DESC_BOB \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Homework\u0026\"; // \u0027\u0026\u0027 not allowed in titles"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String INVALID_DATE_TIME_DESC \u003d \" \" + PREFIX_DATE_TIME"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            + \"32-11-2000 19:00\"; // 32nd day not allowed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"bob@yahoo\"; // \u0027@\u0027 not allowed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE; // empty string not allowed for type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DESC_AMY \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_AMY).withDescription(VALID_DESCRIPTION_AMY).withType(VALID_TYPE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DESC_BOB \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_BOB).withDescription(VALID_DESCRIPTION_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus expectedPlanus \u003d new Planus(actualModel.getPlanus());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedPlanus, actualModel.getPlanus());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * {@code model}\u0027s task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final String[] splitTitle \u003d task.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, splitTitle[0]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 6,
      "BobbyZhouZijian": 12,
      "-": 80,
      "GabriellaTeh": 10,
      "MarcTzh": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanus().getTaskList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "MarcTzh": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] tasksToDone \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyValidIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] tasksToDone \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex, };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_duplicatedIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_DUPLICATE_TASK_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_incorrectStatusTask_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_THIRD_TASK};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INCORRECT_TASK_STATUS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_manyInvalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex1 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex2 \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex1, outOfBoundIndex2};"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneValidIndexFilteredList_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Task[] tasksToDone \u003d new Task[indexes.length];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            tasksToDone[i] \u003d model.getFilteredTaskList().get(indexes[i].getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.buildMessage(tasksToDone));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedModel.markAsDone(tasksToDone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_oneInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {outOfBoundIndex};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanus().getTaskList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void execute_mixValidInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, outOfBoundIndex};"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexes);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASKS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] firstIndex \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] secondIndex \u003d {INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(firstIndex);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(secondIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(firstIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 175,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planus(model.getPlanus()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Task editedTask \u003d taskInList.withTitle(VALID_TITLE_BOB).withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planus(model.getPlanus()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planus(model.getPlanus()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planus(model.getPlanus()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // edit task in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task taskInList \u003d model.getPlanus().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanus().getTaskList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "GabriellaTeh": 3,
      "MarcTzh": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withDateTime(VALID_DATE_TIME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 3,
      "BobbyZhouZijian": 4,
      "-": 41,
      "GabriellaTeh": 3,
      "MarcTzh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicate.setKeyword(PREFIX_TITLE, \"first\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        secondPredicate.setKeyword(PREFIX_TITLE, \"second\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Parses {@code userInput} into a {@code TaskContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private TaskContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Arrays.asList(userInput.split(\"\\\\s+\")).forEach(input -\u003e predicate.setKeyword(PREFIX_TITLE, input));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 13,
      "-": 57,
      "MarcTzh": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        model \u003d new ModelManager(getTypicalPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPlanus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "MarcTzh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // multiple dateTimes - last dateTime accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DATE_TIME_DESC_AMY + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + TYPE_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + DATE_TIME_DESC_AMY + DESCRIPTION_DESC_AMY + TYPE_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // missing dateTime field"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedTask \u003d new TaskBuilder(AMY).withTags().withDefaultDateTime().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + TYPE_DESC_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        // missing description field"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        expectedTask \u003d new TaskBuilder(AMY).withTags().withDefaultDescription().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + DATE_TIME_DESC_AMY + TYPE_DESC_AMY,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + VALID_TYPE_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + VALID_DATE_TIME_BOB + VALID_DESCRIPTION_BOB + VALID_TYPE_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid dateTime"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + INVALID_DATE_TIME_DESC + DESCRIPTION_DESC_BOB + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + INVALID_DESCRIPTION_DESC + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_TYPE_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                        + INVALID_TYPE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOB + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + TYPE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 17,
      "BobbyZhouZijian": 7,
      "-": 67,
      "dearvae": 8,
      "GabriellaTeh": 27,
      "MarcTzh": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dearvae"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dearvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dearvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dearvae"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void parse_oneValidArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(indexes));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void parse_manyValidArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        Index[] indexes \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new DoneCommand(indexes));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dearvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dearvae": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_TIME_DESC, DateTime.MESSAGE_CONSTRAINTS); // invalid dateTime"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid desc"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, Type.MESSAGE_CONSTRAINTS); // invalid type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid dateTime followed by valid description"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_TIME_DESC + DESCRIPTION_DESC_AMY, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // valid dateTime followed by invalid dateTime. The test case for invalid dateTime followed by valid dateTime"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_TIME_DESC_BOB + INVALID_DATE_TIME_DESC, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + INVALID_DESCRIPTION_DESC + VALID_TYPE_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                        + VALID_DATE_TIME_AMY, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + DESCRIPTION_DESC_AMY + TYPE_DESC_AMY + TITLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_BOB).withDescription(VALID_DESCRIPTION_AMY).withType(VALID_TYPE_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_BOB + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // dateTime"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATE_TIME_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // type"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withType(VALID_TYPE_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_TIME_DESC_AMY + TYPE_DESC_AMY + DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                + TAG_DESC_FRIEND + DATE_TIME_DESC_AMY + TYPE_DESC_AMY + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                + DATE_TIME_DESC_BOB + TYPE_DESC_BOB + DESCRIPTION_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE_TIME_DESC + DATE_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATE_TIME_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BOB + INVALID_DATE_TIME_DESC + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                + DATE_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 16,
      "BobbyZhouZijian": 11,
      "-": 131,
      "GabriellaTeh": 27,
      "MarcTzh": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"Meet Alice\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"play\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser, \" title:Meet Alice desc:play\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertParseSuccess(parser, \" \\n title:Meet Alice  \\t desc:play \\t \\n\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 9,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@te movie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"1-1-2020 12:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String INVALID_TYPE \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@example\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rate movie\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String VALID_TYPE \u003d \"todo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"rachel,example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATE_TIME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseDateTime(VALID_DATE_TIME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDateTime() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertEquals(expectedDateTime, ParserUtil.parseDateTime(dateWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(INVALID_TYPE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void parseType_validValueWithoutWhitespace_returnsType() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(VALID_TYPE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void parseType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(typeWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 13,
      "BobbyZhouZijian": 14,
      "-": 137,
      "MarcTzh": 18,
      "GabriellaTeh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PlanusParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class PlanusParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private final PlanusParser parser \u003d new PlanusParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"title:foo\", \"desc:bar\", \"type:baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"foo\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"bar\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TYPE, \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertEquals(new FindCommand(predicate), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 13,
      "-": 82,
      "MarcTzh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.PlanusBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(new Planus(), new Planus(modelManager.getPlanus()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlanusFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_validPath_setsPlanusFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager.setPlanusFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(path, modelManager.getPlanusFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskNotInPlanus_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager.addTask(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(modelManager.hasTask(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planus \u003d new PlanusBuilder().withTask(ALICE).withTask(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus differentPlanus \u003d new Planus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager \u003d new ModelManager(planus, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(planus, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different planus -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPlanus, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, ALICE.getTitle().title);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        modelManager.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planus, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        differentUserPrefs.setPlanusFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planus, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 5,
      "-": 97,
      "MarcTzh": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PlanusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class PlanusTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final Planus planus \u003d new Planus();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(Collections.emptyList(), planus.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planus.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData_withValidReadOnlyPlanus_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus newData \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(newData, planus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStub newData \u003d new PlanusStub(newTasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e planus.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e planus.hasTask(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskNotInPlanus_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(planus.hasTask(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(planus.hasTask(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInPlanus_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(planus.hasTask(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e planus.getTaskList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * A stub ReadOnlyPlanus whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static class PlanusStub implements ReadOnlyPlanus {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        PlanusStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 3,
      "-": 62,
      "MarcTzh": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setPlanusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlanusFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "MarcTzh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // null dateTime number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid dateTime numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-13-2000 12:00\")); // month greater than 12"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"32-01-1200\")); // day greater than 31"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-12-2020\")); // no time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"5-6-2020 12:00\")); // no leading zero for day and month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // valid dateTime numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"05-09-2020 18:00\")); // date and month with leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"12-12-2020 12:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabriellaTeh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peterjack@-\")); // invalid symbols used."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // invalid symbols used."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(Description.isValidDescription(\" fdsjkfsd\")); // start with space."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"amy,example.com\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"abc\")); // minimal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"testlocalhost\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"123  145\")); // white space allowed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"sadf !!!!\")); // exclamation mark allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"????????sdfsdf ?????adsfaf???\")); // question mark allowed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(Description.isValidDescription(\"this is a trolling test case.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                + \"Happy debugging! Are you enjoying it?\")); // long description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BobbyZhouZijian": 45,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "public class TaskContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicateKeywordList.forEach(word -\u003e firstPredicate.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        secondPredicateKeywordList.forEach(word -\u003e secondPredicate.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate firstPredicateCopy \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        firstPredicateKeywordList.forEach(word -\u003e firstPredicateCopy.setKeyword(PREFIX_TITLE, word));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void test_findMatchedKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"Play\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Play Games\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"League of Legends\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Play\").withDescription(\"League of Legends\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // Multiple keywords with partial match"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TYPE, \"tod\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withType(\"todo\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"mEeT aLiCe\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Meet Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void test_findMatchedKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DATE_TIME, \"01-01-2020 19:00\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDateTime(\"01-02-2019 18:00\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // title Keywords does not match title"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TITLE, \"01-01-2020 12:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withTitle(\"Alice\").withDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "                .withDescription(\"alice,email.com\").withType(\"event\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // title Keywords does not match type"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_TYPE, \"deadline\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withType(\"event\").withDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .withDescription(\"alice,email.com\").withType(\"event\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // title Keywords does not match description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate \u003d new TaskContainsKeywordsPredicate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        predicate.setKeyword(PREFIX_DESCRIPTION, \"play outside\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withType(\"event\").withDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                .withDescription(\"alice,email.com\").withType(\"event\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 2,
      "BobbyZhouZijian": 46,
      "MarcTzh": 53,
      "GabriellaTeh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.isSameTask(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.isSameTask(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // different dateTime and description -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                                 .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "                                                 .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // same title, same dateTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // same title, same type, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDateTime(VALID_DATE_TIME_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // same title, same dateTime, same type, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDateTime(VALID_DATE_TIME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 5,
      "-": 45,
      "MarcTzh": 33,
      "GabriellaTeh": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Title.isValidTitle(\"sleep*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"do homework\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Do 2nd lecture\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Do Homework\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Remember to do homework when I get home\")); // long titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Type(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void constructor_invalidType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        String invalidType \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void isValidType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // invalid types"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertFalse(Type.isValidType(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        assertFalse(Type.isValidType(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(Type.isValidType(\"abcdefg\")); // not a valid type of task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        // valid types"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Type.isValidType(\"todo\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Type.isValidType(\"event\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(Type.isValidType(\"deadline\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 33,
      "MarcTzh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTask(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ALICE).withType(VALID_TYPE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTask(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTask(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTask_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        expectedUniqueTaskList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 3,
      "-": 86,
      "MarcTzh": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"R@te movie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"1-1-2020 12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String INVALID_TYPE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String VALID_TITLE \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d BENSON.getDateTime().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private static final String VALID_TYPE \u003d BENSON.getType().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private static final String VALID_STATUS \u003d BENSON.getStatus().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(BENSON, task.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(INVALID_TITLE, VALID_DATE_TIME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(null, VALID_DATE_TIME, VALID_DESCRIPTION, VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, INVALID_DATE_TIME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, null, VALID_DESCRIPTION, VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, VALID_DATE_TIME, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, VALID_DATE_TIME, null, VALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, VALID_DATE_TIME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        INVALID_TYPE, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        String expectedMessage \u003d Type.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public void toModelType_nullType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_TITLE, VALID_DATE_TIME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                VALID_DESCRIPTION, null, VALID_TAGS, VALID_STATUS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                new JsonAdaptedTask(VALID_TITLE, VALID_DATE_TIME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "                        VALID_TYPE, invalidTags, VALID_STATUS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 7,
      "BobbyZhouZijian": 7,
      "-": 52,
      "dearvae": 19,
      "MarcTzh": 28,
      "GabriellaTeh": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPlanusStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonPlanusStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPlanusStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPlanus(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPlanus\u003e readPlanus(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new JsonPlanusStorage(Paths.get(filePath)).readPlanus(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertFalse(readPlanus(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"notJsonFormatPlanus.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_invalidTaskPlanus_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"invalidTaskPlanus.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readPlanus_invalidAndValidTaskPlanus_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPlanus(\"invalidAndValidTaskPlanus.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void readAndSavePlanus_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPlanus.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus original \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage jsonPlanusStorage \u003d new JsonPlanusStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus readBack \u003d jsonPlanusStorage.readPlanus(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        original.addTask(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        original.removeTask(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        readBack \u003d jsonPlanusStorage.readPlanus(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        original.addTask(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        jsonPlanusStorage.savePlanus(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        readBack \u003d jsonPlanusStorage.readPlanus().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus_nullPlanus_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePlanus(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Saves {@code planus} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private void savePlanus(ReadOnlyPlanus planus, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            new JsonPlanusStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                    .savePlanus(planus, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void savePlanus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePlanus(new Planus(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePlanusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class JsonSerializablePlanusTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePlanusTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTaskPlanus.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path INVALID_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskPlanus.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskPlanus.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_typicalTaskFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus planusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus typicalTasksPlanus \u003d TypicalTasks.getTypicalPlanus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(planusFromFile, typicalTasksPlanus);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASKS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void toModelType_duplicateTask_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonSerializablePlanus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "                JsonSerializablePlanus.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePlanus.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "MarcTzh": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        userPrefs.setPlanusFilePath(Paths.get(\"planus.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "MarcTzh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalPlanus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.ReadOnlyPlanus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        JsonPlanusStorage planusStorage \u003d new JsonPlanusStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storageManager \u003d new StorageManager(planusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void planusReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "         * {@link JsonPlanusStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPlanusStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus original \u003d getTypicalPlanus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        storageManager.savePlanus(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        ReadOnlyPlanus retrieved \u003d storageManager.readPlanus().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertEquals(original, new Planus(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public void getPlanusFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        assertNotNull(storageManager.getPlanusFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "MarcTzh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor.setTitle(task.getTitle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        descriptor.setDateTime(task.getDateTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        descriptor.setType(task.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Sets the {@code Title} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public EditTaskDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Sets the {@code Type} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public EditTaskDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 7,
      "MarcTzh": 70,
      "GabriellaTeh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PlanusBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class to help with building PlaNus objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " *     {@code Planus planus \u003d new PlanusBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class PlanusBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Planus planus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus \u003d new Planus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder(Planus planus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.planus \u003d planus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Adds a new {@code Task} to the {@code Planus} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public PlanusBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        planus.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Planus build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return planus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcTzh": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            + \"  \\\"title\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private static final String TITLE_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static String getTitleTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return TITLE_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d getTitleTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import seedu.address.model.task.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"School work\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final String DEFAULT_DATE_TIME \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"6 midterms next week.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public static final State DEFAULT_STATUS \u003d State.INCOMPLETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE_TIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d new Status(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        title \u003d taskToCopy.getTitle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        dateTime \u003d taskToCopy.getDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        type \u003d taskToCopy.getType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        status \u003d taskToCopy.getStatus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Sets the {@code Title} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "     * Sets the {@code Type} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "    public TaskBuilder withType(String type) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Sets the {@code dateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public TaskBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building to be default DateTime."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a DateTime field."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public TaskBuilder withDefaultDateTime() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.dateTime \u003d DateTime.defaultDateTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building to be default description."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Simulates the situation that the task is created without a description field."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public TaskBuilder withDefaultDescription() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.description \u003d Description.defaultDescription();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     * Sets the {@code Status} of the {@code Task}  that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dearvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    public TaskBuilder withStatus(State state) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        this.status \u003d new Status(state);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dearvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dearvae"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dearvae"
        },
        "content": "        return new Task(title, dateTime, description, type, tags, status);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 8,
      "BobbyZhouZijian": 8,
      "-": 52,
      "dearvae": 32,
      "GabriellaTeh": 9,
      "MarcTzh": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        sb.append(PREFIX_TITLE + task.getTitle().title + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        sb.append(PREFIX_DATE_TIME + task.getDateTime().value.toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        sb.append(PREFIX_TYPE + task.getType().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.title).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "        descriptor.getDateTime().ifPresent(dateTime -\u003e sb.append(PREFIX_DATE_TIME).append(dateTime.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "        descriptor.getDescription().ifPresent(desc -\u003e sb.append(PREFIX_DESCRIPTION).append(desc.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TYPE).append(type.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 3,
      "BobbyZhouZijian": 3,
      "-": 38,
      "GabriellaTeh": 3,
      "MarcTzh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "MarcTzh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "MarcTzh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.Planus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dearvae"
        },
        "content": "import seedu.address.model.task.State;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Task ALICE \u003d new TaskBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withType(\"event\").withDescription(\"alice,example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            .withDateTime(\"01-01-2020 12:00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static final Task BENSON \u003d new TaskBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withType(\"event\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "            .withDescription(\"johnd,example.com\").withDateTime(\"02-02-2020 12:00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task CARL \u003d new TaskBuilder().withTitle(\"Carl Kurz\").withDateTime(\"03-03-2020 12:00\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dearvae"
        },
        "content": "            .withDescription(\"heinz,example.com\").withType(\"event\").withStatus(State.COMPLETE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task DANIEL \u003d new TaskBuilder().withTitle(\"Daniel Meier\").withDateTime(\"04-04-2020 12:00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            .withDescription(\"cornelia,example.com\").withType(\"event\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task ELLE \u003d new TaskBuilder().withTitle(\"Elle Meyer\").withDateTime(\"05-05-2020 12:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withDescription(\"werner,example.com\").withType(\"event\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task FIONA \u003d new TaskBuilder().withTitle(\"Fiona Kunz\").withDateTime(\"06-06-2020 12:00\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withDescription(\"lydia,example.com\").withType(\"event\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task GEORGE \u003d new TaskBuilder().withTitle(\"George Best\").withDateTime(\"07-07-2020 12:00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withDescription(\"anna,example.com\").withType(\"event\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task HOON \u003d new TaskBuilder().withTitle(\"Hoon Meier\").withDateTime(\"08-08-2020 12:00\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withDescription(\"stefan,example.com\").withType(\"event\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task IDA \u003d new TaskBuilder().withTitle(\"Ida Mueller\").withDateTime(\"09-09-2020 12:00\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            .withDescription(\"hans,example.com\").withType(\"event\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task AMY \u003d new TaskBuilder().withTitle(VALID_TITLE_AMY).withDateTime(VALID_DATE_TIME_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMY).withType(VALID_TYPE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabriellaTeh"
        },
        "content": "    public static final Task BOB \u003d new TaskBuilder().withTitle(VALID_TITLE_BOB).withDateTime(VALID_DATE_TIME_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nuovonatura"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BobbyZhouZijian"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "     * Returns an {@code Planus} with all the typical tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static Planus getTypicalPlanus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        Planus ab \u003d new Planus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcTzh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nuovonatura": 5,
      "BobbyZhouZijian": 3,
      "-": 31,
      "dearvae": 2,
      "GabriellaTeh": 13,
      "MarcTzh": 24
    }
  }
]
