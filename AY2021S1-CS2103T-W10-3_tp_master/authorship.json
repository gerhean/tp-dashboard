[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[![CI Status](https://github.com/se-edu/AY2021S1-CS2103T-W10-3/workflows/Java%20CI/badge.svg)](https://github.com"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/AY2021S1-CS2103T-W10-3/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* This is **a desktop application designed for team leaders of small software projects.** While it has a Graphical"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Interface, Taskmania is primarily designed to be written in a command line fashion such that commands guide the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "through the application. This is ideal for a user who is a fast typer as this user would never have to reach"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "for a mouse and hence save time that way."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* Some project leaders manage their team over Whatsapp / Telegram which can get cumbersome and difficult to keep"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " track of and we want to provide a way for them to see at a glance the progress of their team thus far to better"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  gauge what has to be done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* Some Use cases for Taskmania include:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Create new software projects to manage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Adding team members to each project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Multiple team members spanning different projects"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Modifying information of each team member"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Viewing tasks to be done at a glance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### Useful links"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-w10-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-w10-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* External libraries used: [JavaFX](https://openjfx.io/)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 26,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    archiveName \u003d \u0027maincatalogue.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 5,
      "-": 70,
      "lll-jy": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[[Visit our homepage](https://ay2021s1-cs2103t-w10-3.github.io/tp/)]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "You can reach us at the repoUrl `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### Niaaz Wahab"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "\u003cimg src\u003d\"images/geniaaz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[[github](https://github.com/geniaaz)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[[portfolio](team/geniaaz.md)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* Responsibilities: Developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Li Jiayu"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cimg src\u003d\"images/lll-jy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[github](http://github.com/lll-jy)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[portfolio](team/lll-jy.md)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Responsibilities: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Tian Fang"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "\u003cimg src\u003d\"images/t-fang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[github](http://github.com/T-Fang)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[portfolio](team/T-Fang.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Responsibilities: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Tan Chia Qian"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "\u003cimg src\u003d\"images/tcqian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[github](http://github.com/TCQian)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[portfolio](team/TCQian.md)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* Responsibilities: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Lucas Tai"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cimg src\u003d\"images/lucastai98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[github](http://github.com/lucastai98)]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "[[portfolio](team/lucastai98.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCQian"
        },
        "content": "* Responsibilities: Developer"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 13,
      "-": 31,
      "TCQian": 3,
      "lll-jy": 20
    }
  },
  {
    "path": "docs/Configuration.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Configuration guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Certain properties of the application can be controlled (e.g user preferences file location, logging level) through"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "the configuration file (default: `config.json`)."
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " of this repository."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "your repo with it so that the badge"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "root directory:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "do the rest."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Update the version number in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "file you created."
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 16,
      "-": 72
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W10-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W10-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* [**`UI`**](#ui-component): The User Interface of the App."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* defines its *API* in an `interface` with the same projectName as the Component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name} Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " the command `delete 1`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ProjectListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W10-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "1. `Logic` component uses the `MainCatalogueParser` class to parse the user command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager` (only commands with correct scope will be generated: refer to \"Scoping feature\")."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a project)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W10-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* stores the main catalogue data, which is essentially a list of `Project`s, each of which has a few `Participant`s who can do tasks and attend meetings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cProject\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* can save the main catalogue data in json format and read it back."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Scoping feature"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The scoping mechanism is facilitated by an `enum` class `Status` in `MainCatalogue`. Possible values of `Status` are `CATALOGUE`, `PROJECT`, `PERSON`, and `TASK`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The possible values of `Status` form a hierarchy structure as follows. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `CATALOGUE`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * `PROJECT`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * `TASK`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * `PERSON`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "A lower-level scope always belongs to any parent scopes. For example, if the app is currently in `PROJECT` scope, it is "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "also in the `CATALOGUE` scope. However, it is not necessarily in `TASK` scope because `TASK` is a child level of `PROJECT`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "and it is definitely not in `PERSON` scope because `PERSON` is parallel to `PROJECT`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The `status` of `MainCatalogue` is open to be accessed in other `Model` components and `Logic` components by a public getter."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The `MainCatalogue` has a field `project` which is an `Optional` object of `Project`. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "This is a pointer to the project that is expected to be the focus for the application if it is in the `PROJECT` or lower status."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Similarly, there is a pointer in each `Project` to keep the task of focus if the application is in `TASK` status."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The switch of `status` is implemented by the following operations:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `MainCatalogue#enter(Project project)` — Switches to `PROJECT` status and updates the project on view to the given project."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `MainCatalogue#enterTask(Task task)` — Switches to `TASK` status and updates the task on view to the given task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `MainCatalogue#quit()` — Switches to the parent status, and clear the lower-level pointer."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "These operations are exposed in `Model` and `Logic` interfaces with the same name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "In the GUI design of the application, the three columns correspond to three levels of the status. The left column refers to the top level,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "which is `CATALOGUE`, and it thus consists of a list of projects. The middle column refers to the middle level, which can be `PROJECT`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "or `PERSON`, and it shows the details of the project or person of focus as stored in `MainCatalogue`. The right column refers to the bottom"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "level, which can be `TASK`, and it shows the details of the object this status refers to that is of focus as stored in its parent object ("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "project or person)."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Users are allowed to switch the scoping status while using the app using user input commands. Relevant commands include:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `StartCommand` — Enters a project with its index in the current filtered list of projects and switches to `PROJECT` status. This corresponds to `enter` method."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `ViewTaskCommand` — Requests to view the detailed information of a task. This corresponds to `enterTask` method."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `LeaveCommand` — Leaves the current object of focus, i.e. Switches to the parent status and clear the lower-level pointer. This corresponds to `quit` method."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "All commands have a restriction on the scope. This is seen in `CommandParser`. If a command is invoked but the application is not in the correct scoping status, an `InvalidScopeException`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "would be thrown and an error message would be shown on the GUI."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 1. The user launches the application. The default status of scope is `CATALOGUE`, and `project` in `MainCatalogue` is initialized to an empty `Optional` object."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingStep1](images/ScopingStep1.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** At this stage, commands at non-`CATALOGUE` level cannot be executed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The following sequence diagram shows how scoping works in the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingSequence](images/ScopeSequence.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 2. The user executes `start 3` command to view the details of the project of index 3 in the main catalogue. The `start` command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "calls `enter`, causing a switch of scoping status and assignment of `project` of focus in `MainCatalogue`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingStep2](images/ScopingStep2.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `start` command calls `enter` method in model, causing a switching of level and updates the project of focus."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The following sequence diagram shows the execution of start command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![StartCommandSequence](images/StartCommandSequence.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 3. The user executes `viewtask 5` command to view the details of the task of index 5 in the filtered task list of current project."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The `viewtask` command calls `enterTask`, causing a switch of scoping status and assignment of `taskOnView` in the current project."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingStep3](images/ScopingStep3.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `viewtask` command calls `enterTask` method in model, causing a switching of level and updates the task of focus."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The following sequence diagram shows the execution of view task command."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ViewTaskCommandSequence](images/ViewTaskCommandSequence.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 4. The user executes `start 2` command to view details of project of index 2 in the current list of projects instead."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The scope is switched to `PROJECT`, project of focus is updated to a new project and the task on view is updated to empty."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingStep4](images/ScopingStep4.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 5. The user executes `leave` command to go to the parent status."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Currently the application is at `PROJECT` status, so after execution of `leave` command, the new status would be `CATALOGUE`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The `leave` command calls `quit` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingStep5](images/ScopingStep5.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The `leave` command calls `quit` method in model, causing a switching of level and updates the project and task of focus."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The following sequence diagram shows the execution of leave command. Note that the leave command will do nothing if the application is already in the `CATALOGUE` scope."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![LeaveCommandSequence](images/LeaveCommandSequence.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The following activity diagram summarizes the scoping features when a user executes a new command:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "![ScopingActivityDiagram](images/ScopingActivityDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "##### Aspect: How the scope is checked"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Alternative 1 (current choice):** Parses a command only if the scoping is valid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Cons: May increase coupling because parser needs to know the status."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Alternative 2:** Checks the validity of scope of a command upon execution."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Pros: Will not increase coupling with parser."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Cons: The scoping features of each command are not explicitly seen, and may increase coupling with command."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "### Filtering feature"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "The implementation of task filter and meeting filter is similar. We will use task filter as an example to explain how the filtering mechanism works. The task filtering mechanism is facilitated by the predicte `taskFilter` kept in the Project class. When `UI` component requested for the filtered and sorted task list, the task list filtered by the `taskFilter` will be returned. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Tasks can be filtered by following attributes of a Task (using command `filtert PREFIX/ATTRIBUTE`):"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- the Github user name `GitUserName` of one of the task\u0027s assignees (prefix: `ta/`)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- the task\u0027s name: `taskName` (prefix: `tn/`)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- the task\u0027s deadline: `deadline` (prefix: `td/`)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- the task\u0027s progress: `progress` (prefix: `tp/`)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- whether the task is done: `isDone` (prefix: `done/`)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "The predicate is generated in the `TaskFilterCommandParser` and encapsulated by the `TaskFilterCommand` that the paser returns. When the `TaskFilterCommand` is executed, the `taskFilter` of the current project will be updated and  `UI` will be refreshed automatically."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "When the user want to clear the filter using `allt` , the `taskFilter` of the current project will be changed to a predicate that always returns true. Then, the `UI` will correspondingly show all the tasks in the current project."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Given below is an example usage scenario and how the task filtering mechanism behaves at each step:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Step 1. The user uses `start` to open a project called \"Taskmania\". Suppose there are currently three tasks in this project: `task1`, `task2`, and `task3`. There are three persons involved: a person named \"Tan Chia Qian\" whose Github username is \"TCQian\", a person named \"Tian Fang\" whose Github username is \"T-Fang\" and a person named \"Li Jiayu\" whose Github username is \"lll-jy\".  `task1` is assigned to \"Tan Chia Qian\" and \"Tian Fang\", `task2` is assigned to \"Tian Fang\", and `task3` is assigned to \"Li Jiayu\"."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "![FilterStep1](images/FilterStep1.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Step 2. The user executes `filtert ta/T-Fang` command to find all tasks that have assignee whose Github username is \"T-Fang\". the command is eventually passed to `TaskFilterCommandParser` and the parser will identify the type of the filtering condition using the prefix entered and create the corresponding task predicate. In this case, `ta/` indicates that a predicate that filter tasks by their assignees\u0027 Github usernames should be created. Then when the `TaskFilterCommand` return by the parser is executed by the `LogicManager`, the `TaskFilterCommand` will get the current project (\"Taskmania\") from the `Model` and update the `taskFilter` predicate inside the \"Taskmania\" project. Therefore, the filtered task list of \"Taskmania\" will only contain `task1` and `task2`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "![FilterSequenceDiagram](images/FilterSequenceDiagram.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `TaskFilterCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Step 3. After seeing tasks that has been assign to \"Tian Fang\", the user wants to take a look at other tasks in \"Taskmania\". The user executes `allt` to see all the tasks in the \"Taskmania\". the `MainCataloguePaser` parses the command and creates a `AllTasksCommand`. When the `AllTasksCommand` is executed, it will get the current project (\"Taskmania\") from the `Model` and call the `showAllTasks()` method inside the \"Taskmania\" project. Then the `taskFilter` inside \"Taskmania\" will be replaced by a predicate that always returns true and all the tasks will be shown."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "![AllTasksSequenceDiagram](images/AllTasksSequenceDiagram.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "In the example above, the users can also filter the task list in different ways and the `taskFilter` predicate in \"Taskmania\" will be updated correspondingly:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert tn/Filter` : `task2` and `task3` will be displayed"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert tp/50`: `task3` will be displayed"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert done/false`:`task1` and `task3` will be displayed"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert td/19-10-2020 13:30:00 `:`task1` will be displayed"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a task filter command:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "![TaskFilterActivityDiagram](images/TaskFilterActivityDiagram.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "##### Aspect: Which attribute of assignees should be used to filter tasks"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 1 (current choice):** Assignee\u0027s Github username"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: Avoid viewing tasks of another person with the same personName. (Github username is unique)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: The user might not always remember the GitHub usernames of team members."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 2:** Assignee\u0027s personName"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: More intuitive when there are no team members with the same name."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: If two team members have the same name, the task filter by their name will display tasks that have been assigned to any of them."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "##### Aspect: Whether to clear filter when user re-enters the project"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 1 (current choice):** Keep filters and display filtered tasks/meetings when the user re-enters the project"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: Task/meeting list remains unchanged (e.g. the user don\u0027t have to filter everytime (s)he re-enters the same project if (s)he only wants to see tasks assigned to him/her ) ."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: Users might forget there are other tasks if they don\u0027t use `allt` to check."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 2:** Clear filter when the user re-enters the project"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: The user always gets to see all the tasks every time (s)he enters the project."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: The user have to filter everytime (s)he re-enters the same project if (s)he only wants to see tasks assigned to him/her."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "##### Aspect: Which data structure is better for filtering tasks in a project"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 1 (current choice):** Use `Set\u003cTask\u003e` to store the tasks"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: There will be no duplicated tasks in the `set`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: Need extra steps to convert the set into a `Stream`, and convert the `Stream` into a  `List`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Alternative 2:** Use `List\u003cTask\u003e`to"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Pros: Has built-in method to filter the task list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * Cons: The same task might be duplicated in the `List`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### New Teammate feature"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The implementation of New Teammate involves both the storing of the New Teammate in memory through the use of `Participation` as well as storing the Teammate in the JSON file on the hard disk using the `Storage` class. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The New Teammate created is added in the following places:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - global static variable `allPeople` in the Person class "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - within the project it was created for, in the associated Participation class"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The New Teammate command has to be prefixed with `newteammate` and include **all** of the following fields:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - `mn/` prefix followed by the name of the new teammate"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - `mg/` prefix followed by the teammate\u0027s Github User Name"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - `mp/` prefix followed by the phone number of the teammate"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - `me/` prefix followed by the email of teammate"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - `ma/` prefix followed by the address of the teammate"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " - *Each of the fields above is validated upon entry by the user, and failing the validation, will display to the user that the command failed, and requesting the user to try again.*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The teammate is created in the project scope and assigned to that project. Further assignment of that user to other projects can be done in the scope of other projects."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Given below is an example usage scenario and how the `NewTeammate` mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Step 1: The user enters `start 1` for example to start project 1 from the mainscreen.The user is greeted with the projects list on the left, and the description of the project in the centre."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "![MainscreenUi](images/MainscreenUi.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Step 2: The user enters a New Teammate command such as `newteammate mn/John Ivy mg/Ivydesign98 mp/82938281 me/imjon@gmail.com ma/13 Cupertino Loop`. The command text is passed into `LogicManager` (an implementation of Logic) which passes the raw text into the `MainCatalogueParser` to validate the first command word, which in this case is `newteammate`. A new instance of `TeammateCommandParser` class is then created which proceeds to parse the various fields of the command. Any invalid fields such as invalid field prefixes or invalid format of data would throw an exception at this stage. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "If the fields are all valid, a new `Person` object would be created in the same class and passed into the `NewTeammateCommand` class. "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Within the `NewTeammateCommand` class, an instance of `NewTeammateCommand` is created, along with an instance of the teammate created in the same class and this instance of `Command` is passed back to `LogicManager`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "LogicManager then calls the method `execute` of the NewTeammateCommand which stores the teammate into the respective project\u0027s participation list, and for the project to be stored in the teammate\u0027s participation list. While seeming to increase coupling, it however keeps both classes separate and would not break each other when something is changed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The diagram below summarises what is happening above with the help of a sequence diagram:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "![NewTeammateSequenceDiagramImagae](images/NewTeammateSequenceDiagram.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The diagram below gives a short overview on what happens when a user\u0027s input is received:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "![NewTeammateActivityDiagramImagae](images/NewTeammateActivityDiagram.png)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedMainCatalogue`. It extends `MainCatalogue` with an undo/redo history, stored internally as an `mainCatalogueStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `VersionedMainCatalogue#commit()` — Saves the current main catalogue state in its history."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `VersionedMainCatalogue#undo()` — Restores the previous main catalogue state from its history."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `VersionedMainCatalogue#redo()` — Restores a previously undone main catalogue state from its history."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitMainCatalogue()`, `Model#undoMainCatalogue()` and `Model#redoMainCatalogue()` respectively."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedMainCatalogue` will be initialized with the initial main catalogue state, and the `currentStatePointer` pointing to that single main catalogue state."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th project in the main catalogue. The `delete` command calls `Model#commitMainCatalogue()`, causing the modified state of the main catalogue after the `delete 5` command executes to be saved in the `mainCatalogueStateList`, and the `currentStatePointer` is shifted to the newly inserted main catalogue state."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new project. The `add` command also calls `Model#commitMainCatalogue()`, causing another modified main catalogue state to be saved into the `mainCatalogueStateList`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitMainCatalogue()`, so the main catalogue state will not be saved into the `mainCatalogueStateList`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 4. The user now decides that adding the project was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoMainCatalogue()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous main catalogue state, and restores the main catalogue to that state."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial MainCatalogue state, then there are no previous MainCatalogue states to restore. The `undo` command uses `Model#canUndoMainCatalogue()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoMainCatalogue()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the main catalogue to that state."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `mainCatalogueStateList.size() - 1`, pointing to the latest main catalogue state, then there are no undone MainCatalogue states to restore. The `redo` command uses `Model#canRedoMainCatalogue()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the main catalogue, such as `list`, will usually not call `Model#commitMainCatalogue()`, `Model#undoMainCatalogue()` or `Model#redoMainCatalogue()`. Thus, the `mainCatalogueStateList` remains unchanged."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitMainCatalogue()`. Since the `currentStatePointer` is not pointing at the end of the `mainCatalogueStateList`, all main catalogue states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire main catalogue."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the project being deleted)."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* team leader managing software projects"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* has a growing number of projects and team members to manage"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* prefer desktop apps over mobile apps "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* is tech-savvy and reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "**Value proposition**: manage projects, team members, and tasks on a unified platform as opposed to scattered on"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " different messaging platforms"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* * *`  | project team leader                        | see tasks assigned to members  | better know the progress of my team                                    |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* * *`  | project team leader                        | add a project                  |                      |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* *`  | project team leader                        | view projects of a member      | assess a specific member\u0027s workload |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* *`    | project team leader                | view a dashboard of my project   | see at a glance what needs to be done for a project               |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* * *`      | forgetful user | add in members\u0027 information           | keep track of my members\u0027 contact information                                                 |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "| `* * *`    | fast typing user               | use a Command line type Interface   | have higher efficiency when managing my team\u0027s workload               |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "*(More to be added)*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " (A member refers to a member of a team in one of the projects managed by the team leader( `user` ))"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "TCQian"
        },
        "content": "#### System: Project Profile Tracking System (PTS)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Use Case: UC1 - Create New Project**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Actor:** Project Team Leader"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Team leader creates a new project profile."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "2. PTS asks for the details of project such as project projectName, project due date and project team members."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "TCQian"
        },
        "content": "3. Team leader keys in the details."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "TCQian"
        },
        "content": "4. PTS stores the project profile into the data file."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * 3a. The given details are not valid."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   * 3a1. PTS shows an error message."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Use Case: UC2 - Edit Existing Project Profile**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Actor:** Project Team Leader"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Precondition:** The project profile to be changed is existing."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Team leader chooses to edit a project profile."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "2. PTS asks for the projectName of the project which project profile is to be edited."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "3. Team leader keys in the projectName of the project."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "4. PTS asks for the new infomation of project such as project projectName, project due date and project team members."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "TCQian"
        },
        "content": "5. Team leader keys in the details."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "TCQian"
        },
        "content": "6. PTS stores the team member\u0027s profile into the data file. "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "      "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * 3a. The given projectName is not found."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   * 3a1. PTS shows an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * 5b. The given information is not valid."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * 5b1. PTS shows an error message."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "TCQian"
        },
        "content": "#### System: Team Members Tracking System (TMTS)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Use Case: UC3 - Add Team Members**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Actor:** Project Team Leader"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Team leader create a new team member profile."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "TCQian"
        },
        "content": "2. TMTS asks for the details of the team member such as projectName, deadline, repoUrl and projectDescription."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "TCQian"
        },
        "content": "3. Team leader keys in the details."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "TCQian"
        },
        "content": "4. TMTS stores the team member\u0027s profile into the data file."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "      "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * 3a. The given details are not valid."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   * 3a1. TMTS shows an error message."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Use Case: UC4 - Update Team Members**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Actor:** Project Team Leader"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Precondition:** The team member\u0027s profile to be changed is existing."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Team leader chooses to edit a team member\u0027s profile."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "2. PTS asks for the projectName of the team member whose profile is to be edited."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "3. Team leader keys in the projectName of the team member."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "TCQian"
        },
        "content": "4. TMTS asks for the new information of team member such as projectName, deadline and repoUrladdress and projectDescription.."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "TCQian"
        },
        "content": "5. Team leader keys in the details."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "TCQian"
        },
        "content": "6. TMTS stores the team member\u0027s profile into the data file."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "      "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * 3a. The given projectName is not found."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   * 3a1. PTS shows an error message."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * 5b. The given information is not valid."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * 5b1. TMTS shows an error message."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Use Case: UC5 - View Team Member On The Task**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Actor:** Project Team Leader"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**Precondition:** The team member\u0027s profile and the task are existing."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "TCQian"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Team leader chooses to view the profile of the task assignee."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "TCQian"
        },
        "content": "2. TMTS asks for the task number."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "TCQian"
        },
        "content": "3. Team leader keys in the task number."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "TCQian"
        },
        "content": "4. TMTS shows the profile of the task assignee."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * 3a. The given task number is not found."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   * 3a1. TMTS shows an error message."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### System: Project Management System (PMS)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC6 - Start the project**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1.  User requests to start a project with its index."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS shows the dashboard of the project."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "      "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The given index is not valid"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message. "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC7 - Add new task**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. User requests to add a task in a project with specifications such as projectName, deadline, etc."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. PMS adds the task with given specifications."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. User requests to assign the task to a team member."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. PMS associates the task with the team member."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The application has not started any project."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message. "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a2. User _starts the project_ (UC6)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case resumes at 1."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1b. The input format for adding a task is invalid."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1b1. PMS shows an error message. "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1b2. Repeat 1 until adding task is successful."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case resumes at 3."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 3a. The input task index is invalid or the team member is not found in the project."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 3a1. PMS shows an error message."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 3a2. Repeat 3 until assignment of task is successful."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 3b. The task has already been associated with the team member."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 3b1. PMS shows an error message."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC8 - Delete a task**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. User requests to delete a task in a project with its index."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS deletes the task in the project."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The application has not started any project."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message. "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1b. The index for the task is invalid."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1b1. PMS shows an error message. "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC9 - Find a task**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. User requests to find a task based on its projectName, description, deadline, etc."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS shows the list of filtered tasks with given specifications."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC10 - Prioritises a task**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. User requests to prioritise a task in a project with its index."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS prioritises the task."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The application has not started any project."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message. "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1b. The input index of task is invalid."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1b1. PMS shows an error message. "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1c. The task has already be prioritised."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1c1. PMS outputs a message and do nothing else. "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Use case: UC11 - Task assignment**"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. User requests to assign a task in the project with its index to a teammate of the project."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS associates the task with the participation of the teammate in the project."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The application has not started any project."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message. "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1b. The input index of task is invalid."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1b1. PMS shows an error message. "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1c. The projectName of person does not exist in the project."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1c1. PMS shows an error message. "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1d. The task has already been assigned to the teammate."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1d1. PMS shows a message and do nothing else. "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Use case: UC12 - Filter tasks**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Actor**: User"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**MSS**:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "1. User requested a filtered list of tasks matching his/her predicate"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "2. PMS displays the filtered list of tasks matching the predicate"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- 1a. The application has not started any project."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * 1a1. PMS shows an error message"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- 1b. the filter is empty"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  - 1b1. PMS shows an error message"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- 1c. the input format is incorrect"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  - 1c1. PMS shows an error message and the correct format."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Use case: UC13 - View Tasks of a Person**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Actor:** User"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "1. User requests to view all tasks assigned to a teammate by filtering tasks (UC12)."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "2. PMS displays the filtered list of tasks that are associated with the person in the project."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * 1a. The application has not started any project."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   * 1a1. PMS shows an error message"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * 2b. The teammate does not exist in the project."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "   "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   * 2b1. PMS shows an error message. "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   "
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1.  Should work on any _mainstream OS_ (tested on Windows, Mac, Linux) as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "2.  Should be able to hold up to 30 projects and 150 members without a noticeable drop in performance."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "3.  Can function without an internet connection."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) "
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "5.  There are checks for the inputs the user gives, and corresponding tips are presented if the input format is incorrect."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "6.  There are `help` commands to tell the user what command does what."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "7.  Information is presented in a pleasing way."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "8.  New user can learn the software easily and quickly (so that other team members can help organize or add tasks if they want to)"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "9.  Tests are written for important components, and every working prototype must pass all the test first."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "10.  Code is written in an easy-to-maintain manner (e.g. no extremely long function)."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Member**: A person belonging to a member of a team leader\u0027s team."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Task**: Something that has to be done with relation to a project to complete it."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Project**: A project with a deadline, tasks, and members allocated to those tasks."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Deleting a project"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. Deleting a project while all projects are being shown"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   1. Prerequisites: List all projects using the `list` command. Multiple projects in the list."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "      Expected: No project is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 171,
      "GeNiaaz": 118,
      "-": 299,
      "TCQian": 63,
      "lll-jy": 274
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [MainCatalogue’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "lll-jy": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "# User Guide for Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "## Contents"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- Features in global scope"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  - Get help `help` "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  - Exit application `exit`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  - Features associated with initialising project "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    - Creating new project `new project `"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    - Start working on an existing project `start `"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- Features in project scope"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  - Task related features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Check the project dashboard `dashboard `"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - List all tasks `list`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Delete a task `delete `"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Locate tasks by keyword `find `"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Give a task a certain level of priority `prioritise `"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Viewing tasks allocated to a team member `viewtask `"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Assign task to a team member `assign `"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    - Filter tasks by assignee/deadline/task name `filter `"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  - Teammate related features "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Create new teammate `new teammate `"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Add existing teammates of other projects to participate in this project `involves `"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Update teammate details (person portfolio) `updatetm teammate `"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Update participation details (tasks and project-specific information) `updatept participation `"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Remove a teammate in the project `remove teammate `"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - View tasks allocated to a particular teammate `task participants `"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  - Scoping related features "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    - Return to main catalogue `leave`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Download the latest `Taskmania.jar` from [here](https://github.com/AY2021S1-CS2103T-W10-3/tp)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your TaskMania."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   Some commands you can try:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   * **`list`** : Lists all projects."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  e.g `n/NAME [tg/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  e.g. `[tg/TAG]…​` can be used as ` ` (i.e. 0 times), `tg/friend`, `tg/friend tg/family` etc."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* One and only one Item in parenthesis should be supplied by user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  e.g. `(ta/ASSIGNEE NAME)||(td/DEADLINE)||(tn/TASK NAME)` can be used as \"ta/Alice\", \"td/31-12-2020 10:00:00\" or as \"tn/group meeting\", but not as \"ta/Alice td/31-12-2020 10:00:00\" or \"\"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**:information_source: Notes about scoping:**\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "The hierarchy of command scoping is as follows:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* `CATALOGUE` (i.e. global)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * `PROJECT`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * `TASK`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * `PERSON`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "\u003cbr\u003eA lower-level scope always belongs to any parent scopes. For example, if the app is currently in `PROJECT`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "scope, it is also in the `CATALOGUE` scope. However, it is not necessarily in `TASK` scope because `TASK` is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "a child level of `PROJECT` and it is definitely not in `PERSON` scope because `PERSON` is parallel to `PROJECT`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## **Features** in global scope"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### Creating a new project `add project `"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Adds a project to the project list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Format: `add project n/NAME d/DUEDATE t/TEAM`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "TEAM is any number of names separated by “ “ spaces."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Examples: `add project n/Taskmania d/2020-09-09 t/Niaaz Lucas Jiayu` Adds a new project with the projectName Taskmania, due date 9 Sep 2020 with team members, Niaaz, Lucas and Jiayu."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "### Starting work on an existing project `start `"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Initialises the project specified."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Format: `start INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "- Initialises the project at the specified INDEX."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "- The index refers to the index number shown in the displayed project list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Examples: `start 2` Initialises the second project in the project list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## **Features** in project scope"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### **Task**-related features"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Check the project dashboard `dashboard `"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "Shows a summary of the important information regarding the project."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "Format: `dashboard`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### List all tasks `list`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Shows a list of all tasks in the task list sorted by priority."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Instruction:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Type the command \u0027list\u0027 into the command line."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Outcome: A list of tasks will be shown. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Delet a task `delete `"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Deletes the specified task from your task list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Instruction:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. List out the list of tasks(Use `list` command) to look for the number of task to be deleted."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Type the command `delete` with the number of the task to be deleted. (eg. `delete 2` deletes the 2nd task in the task list.)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. List out the list of tasks to see the new list of tasks without the deleted tasks."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Outcome: The task is removed from the list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Locate tasks by keyword `find `"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Finds tasks whose descriptions contain the given keyword."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- The search is case-insensitive. e.g run will match Run."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- Only the description is searched."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Instruction: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Type the command `find` with the `KEYWORD` which might be found in the projectName of the task that the user is looking for.(eg. `find read` to find  the task \u0027todo reading\u0027)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Outcome: List of tasks with the projectName containing the keyword will be shown."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Give a task a certain level of priority `prioritise `"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Assigns a level of priority to the specified task."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Format: `prioritise INDEX1, INDEX2`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- Assigns a priority level of `INDEX2` to the task at specified `INDEX1`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- `INDEX1` refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- Both `INDEX1` and `INDEX2` must be a positive integer 1, 2, 3, …"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Instruction:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. List out the list of tasks(Use `list` command) to look for the number of task to be assigned with a priority level."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TCQian"
        },
        "content": "1. Type the command `prioritise` with the number of task which the user wants to assign a priority level to it, followed by a `,` , then the number of the priority level.(eg. `prioritise 2,3` to assign the second task in the task list with a priority level of 3."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Outcome: The task is assigned with the priority level."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### View tasks allocated to a team member `view `"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "Displays a list of tasks allocated to the specified members."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "Format: `view NAME`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `NAME` refers to the projectName of the team member when it was first input during project creation."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "Example: `view Niaaz` Displays a list of tasks allocated to Niaaz."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Assign tasks to a team member `assign `"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Assigns a task to a team member. A task can be assigned to multiple members, and a member can have multiple tasks."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `assign INDEX NAME`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `INDEX` refers to the task index in the current displaying list of tasks."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `NAME` refers to the projectName of the team member."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `assign 1 Niaaz` Assigns the task currently with index 1 to Niaaz."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Filter tasks by assignee/deadline/task name `filtert `"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Filters tasks by assignee, deadline, task name, progress, or whether they are completed. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Format: ``filtert (ta/ASSIGNEE NAME)||(td/DEADLINE)||(tn/TASK NAME)||(tp/PROGRESS)||(done/ISDONE)`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert (ta/ASSIGNEE NAME)` retrieves all tasks that have assignee named `ASSIGNEE NAME`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert (td/DEADLINE)` retrieves all the tasks whose deadlines are`DEADLINE`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert (tn/TASK NAME)` retrieves all the tasks whose task names contain `TASK NAME`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert (tn/PROGRESS)` retrieves all the tasks whose progress match the `PROGESS`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "- `filtert (done/ISDONE)` retrieves all the completed tasks when `ISDONE` is true, or all the unfinished tasks when `ISDONE` is false."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "1. `filtert ta/Alice` displays the filtered list of tasks that have assignee named Alice."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "2. `filtert td/31-12-2020 10:00:00` displays the filtered list of tasks whose deadlines are at 10am on 31/12/2020."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "3. `filtert tn/group meeting` displays the filtered list of tasks whose task names contain \"group meeting\"."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "4. `filtert tn/50` displays the filtered list of tasks that are 50% complete."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "5. `filtert done/false` displays the filtered list of all the unfinished tasks."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Show all the tasks `allt `"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Displays all the tasks in the current project."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Format: `allt`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Outcome: All the tasks in the current project will be shown in the task list"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Show all the meetings `allm `"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Displays all the meetings in the current project."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Format: `allm`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "Outcome: All the meetings in the current project will be shown in the meeting list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### **Teammate**-related features"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Create new teammate `new teammate `"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Adds a new teammate to a project"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `new NAME p/PHONE_NUMBER e/EMAIL`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "- `NAME` refers to the projectName of the teammate"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `PHONE_NUMBER` refers to the teammate\u0027s contact number"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TCQian"
        },
        "content": "- `EMAIL` refers to the teammate\u0027s repoUrl"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TCQian"
        },
        "content": "Example: `new Lucas p/94311421 e/lucastai98@gmail.com` Instantiates teammate Lucas with the specified contact number and repoUrl"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Add existing teammates of other projects to participate in this project `involves `"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Involves an existing teammate in other projects to the current project"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `involves NAME`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "- `NAME` refers to the projectName of the teammate; by this, we should guarantee that teammates of all projects have different names if they are different people"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `involves Lucas` for `Lucas` that participates in another existing project"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Update teammate details (person portfolio) `updatetm teammate `"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Updates person particulars of person portfolio of a teammate"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `updatetm NAME [n/NAME] [p/PHONE_NUMBER] [e/EMAIL]`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `updatetm Lucas p/12345678` Resets the contact number of `Lucas` to `12345678`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "#### Update participation details (tasks and project-specific information) `update participation `"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Updates the participation details of the teammate, such as his/her role"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `updatept NAME [r/ROLE]`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `ROLE` refers to the role of the teammate in the project, i.e., team member or leader"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `updatept Lucas r/LEADER` Sets the existing teammate in the project, `Lucas`, as the leader of the project."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Remove a teammate in the project `remove teammate `"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Removes an existing teammate in the project"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `removetm NAME`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `removetm Lucas` Removes the existing teammate in the project, `Lucas`, from the current project"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### View teammates participated in a particular task `task participants `"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Views the information of all teammates participating in a particular task"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `task participants TASK_NUMBER`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "- `TASK_NUMBER` refers to the task number in the project"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Example: `task participants 1` Displays the teammates that are assigned to do task 1"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### **Scoping**-related features"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "#### Return to main catalogue `leave`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Switch to the scope of a level of higher hierarchy."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Format: `leave`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "contains the data of your previous Taskmania home folder."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Action | Format, Examples | Scope"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "--------|------------------|-------"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Get Help** | `help` | global scope"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Add Project** | `add project n/NAME d/DUEDATE t/TEAM` \u003cbr\u003e e.g., `add project n/Taskmania d/2020-09-09 t/Niaaz Lucas` | global scope"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Start** | `start INDEX`\u003cbr\u003e e.g., `start 3` | global scope"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**List Out The List Of Tasks** | `list` | project scope"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Delete Task** | `delete INDEX` \u003cbr\u003e eg. `delete 2` | project scope"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Find KEYWORD** | `find KEYWORD` \u003cbr\u003e eg. `find read` | project scope"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Give A Task A Priority Level** | `prioritise INDEX1, INDEX2` \u003cbr\u003e eg. `prioritise 2,3` | project scope "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Assign A Task To A Teammate** | `assign INDEX NAME` \u003cbr\u003e e.g. `assign 1 Niaaz` | project scope"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Filter Tasks by Assignee/Deadline/Task Name** | ``filtert (ta/ASSIGNEE NAME)||(td/DEADLINE)||(tn/TASK NAME)||(tp/PROGRESS)||(done/ISDONE)``\u003cbr\u003ee.g. `filtert ta/Alice` | project scope"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Show all the tasks** | `allt` | project scope "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "**Show all the meetings** | `allm` | project scope "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**View Details of A Task** | `viewtask INDEX` \u003cbr\u003e eg. `viewtask 1` | project scope"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**New Teammate** | `new NAME p/PHONE_NUMBER e/EMAIL` \u003cbr\u003e e.g., `new Lucas p/94311421 e/lucastai98@gmail.com` | project scope"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Involve Teammate** | `involves NAME` \u003cbr\u003e e.g., `involves Lucase` | project scope"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Update Teammate** | `updatetm NAME [n/NAME] [p/PHONE_NUMBER] [e/EMAIL]` \u003cbr\u003e e.g., `updatetm Lucas p/12345678` | project scope"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Update Participation** | `updatept NAME [r/ROLE]` \u003cbr\u003e e.g., `updatept Lucas r/LEADER` | project scope"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Remove Teammate** | `removetm NAME` \u003cbr\u003e e.g., `removetm Lucas` | project scope"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**View Teammates of Task** | `task participants TASK_NUMBER` \u003cbr\u003e e.g., `task participants 1` | project scope"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**Return To Catalogue Page** | `leave` | project scope"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "T-Fang": 41,
      "GeNiaaz": 41,
      "-": 99,
      "TCQian": 43,
      "lll-jy": 113,
      "lucastai98": 5
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: MainCatalogue Level-3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**MainCatalogue is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* If you are interested in using MainCatalogue, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* If you are interested about developing MainCatalogue, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "lll-jy": 4
    }
  },
  {
    "path": "docs/team/T-Fang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: Tian Fang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Project: Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Added basic dependencies of Participation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * What it means: basic management of Participation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added dependencies of it in and related collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added related test cases."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Model modification**: Update Participation class and create corresponding methods in Project. (Pull request: Pull request [\\#71](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/71))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * What it means: Participation class is updated after creation of Meeting class and Task class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * What changes made:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added more methods in Participation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **New Feature**: Added task/meeting filter commands. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    (Pull request: Pull request [\\#96](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/96))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    (Pull request: Pull request [\\#135](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/135))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Created TaskFilterCommand and MeetingFilterCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Created relevant parsers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Allowed user to filter tasks by assignee, deadline, or task name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Allowed user to filter meeting by meeting name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added relevant test cases."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **New Feature**: Added commands to show all the tasks/meetings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    (Pull Request [\\#138](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/138))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Created AllTasksCommand and AllMeetingsCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Updated MainCatalogueParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dT-Fang\u0026tabRepo\u003dAY2021S1-CS2103T-W10-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Enhancements to existing features**: Update task filter to support filtering by progress/isDone (Pull Request [\\#138](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/138))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * What changes made: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        * Added more prefixes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        * Updated relevant parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "* **Enhancements to existing features**: Add Deadline support to AddTaskCommand and task filter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    (Pull Request [\\#139](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/139))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * What changes made: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        * Allowed user to create tasks with deadlines(optional)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        * Fully supported filter tasks by deadline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added documentation for basic task-related features."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Came up with the first draft of feature list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added `filtert` feature guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added `allt` and `allm` feature guides (Pull Request [\\#149](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/149))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Wrote first draft of non-functional requirements. (Pull Request [\\#54](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/54))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Added and updated Use Cases related to `filter`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Wrote the design of the `Logic` component. (Pull Request [\\#131](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/131))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    * Wrote the implentation of filtering features. (Pull Request [\\#146](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/146))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Updated `README.md` for team repository."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 38,
      "lll-jy": 26
    }
  },
  {
    "path": "docs/team/TCQian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: Tan Chia Qian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Project: Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "* **Model modification**: Refactored some attributes for Person in AB3 to attributes for Project in Taskmania.(Pull request [\\#72](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/72), [\\#76](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/76))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: refactors person.Phone -\u003e project.Deadline, person.Email -\u003e project.RepoUrl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * refactored based on attributes for Person in AB3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * changed all methods that has dependency on relevant attributes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * updated test cases accordingly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "* **GUI modification**: Enhanced the GUI for Milestone v1.2. (Pull request [\\#101](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/101))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * What it means: makes the GUI show the list of projects on the left half while the certain project profile is shown on the right half"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * removed the status of the ProjectCard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * removed the extra information of a project to be shown on the ProjectCard."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * added a new attribute in ModelManager which is the project that will be shown on the project dashboard."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * updated methods in dependent classes to allow access to the new attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * created a ProjectDashboard class and the corresponding ProjectDashboard.fxml file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * created a EmptyProjectDashboard class and the corresponding EmptyProjectDashboard.fxml file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * added these two instances to the MainWindow class;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    * updated test cases of the MainWindow class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dTCQian\u0026tabRepo\u003dAY2021S1-CS2103T-W10-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Set up GitHub organization of team repository"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * User Guide: (Pull request [\\#52](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/52))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added documentation for advanced task-related features."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "  * Developer Guide: (Pull request [\\#53](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/53))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Came up with the outline of Use Cases."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Wrote the Use Cases for first draft of ProjectProfile Tracking System."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Wrote the Use Cases for first draft of Team Members Tracking System."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Set up milestones in GitHub"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "TCQian": 15,
      "lll-jy": 41
    }
  },
  {
    "path": "docs/team/geniaaz.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: Wahab Niaaz\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "## Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dGeNiaaz\u0026tabRepo\u003dAY2021S1-CS2103T-W10-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Model modification**{24/09/20}: Added the Person model and its attributes. (Pull requests [\\#13](https://github"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ".com/AY2021S1-CS2103T-W10-3/tp/pull/13), [\\#17](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/17))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: persons that participates in projects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * copied the original Person class in AB3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * adapted dependencies accordingly. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Model modification** {6/10/20}: Refactored some attributes for Person in AB3 to attributes for Project in Taskmania"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ". (Pull requests [\\#66](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/66), [\\#74](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/66), [\\#80](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/80))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: refactors person.Name -\u003e project.ProjectName, person.Address -\u003e project.ProjectDescription, person.Tags -\u003e project.ProjectTags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * refactored based on attributes for Person in AB3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * changed all methods that has dependency on relevant attributes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * updated test cases accordingly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **New Feature** {13/10/20}: Create new Command to add Teammates to a project. (Pull requests [\\#98](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/98) )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * What it means: Command allows teammates to be added to a project, with associations created between project and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * What changes made:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * Created NewTeammateCommandParser class to parse command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * Created NewTeammateCommand class to handle the logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * Created ParsePersonUtil class to handle the validating of variables passed in to NewTeammateCommand  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **New Feature** {18/10/20}: Create new Command to edit Teammates  (Pull requests [\\#123](https://github.com/AY2021S1-CS2103T-W10-3/tp/pul/123))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Changes made: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * EditTeammate now can change attributes of Teammates"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Enhancements to existing features** {18/10/20}: Update NewTeammate to take in prefixes (Pull requests [\\#123](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/123))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Changes made: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * AddTeammate now uses prefixes to allow user to add attributes in any order they wish with appropriate prefixes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Enhancements to existing features** {18/10/20}: Update tests for Teammate Commands (Pull requests [\\#141](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/123))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Changes made: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    * Tests added to increase path coverage for Teammate classes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Came up with the content outline of the first draft of modified User Guide."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added general introduction of the application (Pull request [\\#27](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/27))."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Modified the original AB3 UG on manipulation of persons to fit for Taskmania\u0027s management for project."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Adapted first draft for target user profile, value proposition, and user stories to the format that fit in Developer Guide."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added glossaries in the first draft (Pull request [\\#44](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/44))."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 49,
      "lll-jy": 21
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Project: MainCatalogue Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "MainCatalogue - Level 3 is a desktop main catalogue application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "lll-jy": 2
    }
  },
  {
    "path": "docs/team/lll-jy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: Li Jiayu\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Came up with the overall structure for Taskmania and a guideline for adapting from AB3."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Refactored Person in AB3 as Project and AddressBook as MainCatalogue. (Pull request [\\#2](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/2))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: projects are the list of objects the application mainly holds, and main catalogue holds all projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * replaced all person with project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * replaced all addressBook with mainCatalogue. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Created Task object and added basic dependencies. (Pull request: Pull request [\\#21](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/21))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: a task in a project that can be assigned to teammates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created the class from scratch;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added dependencies of it in Project, Participation, and related collections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added related test cases."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **UI modification**: Added another status for Project card. (Pull request: Pull request [\\#63](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/63))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added status field in relevant model and logic classes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * modified the ProjectCard to accommodate 2 different scope status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * allowed the GUI to output different status of ProjectCard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added relevant test cases."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **New Feature**: Added navigation commands. (Pull request: Pull request [\\#63](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/63), [\\#120](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/120))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created StartCommand, ViewTaskCommand and LeaveCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created relevant parsers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * allowed change of scope status and ProjectCard status by these commands;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added relevant test cases;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * fixed bugs to accommodate later implementations."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **New Feature**: Added assign command. (Pull request: Pull request [\\#87](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/87))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created AssignCommand and AssignCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created relevant methods in MainCatalogueParser and model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added relevant test cases."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dlll-jy\u0026tabRepo\u003dAY2021S1-CS2103T-W10-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Managed all contributions of Model modifications."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added the teammate-related features\u0027 guide. (Pull Request [\\#46](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/46))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added the guide for scoping commands. (Pull Request [\\#89](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/89), [\\#122](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/122))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Wrote the Use Cases for first draft of Project Management System. (Pull Request [\\#49](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/49))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Wrote the design of `Model` component. (Pull Request [\\#124](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/124))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Wrote the implentation of scoping features. (Pull Request [\\#126](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/126))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Updated the first draft for `AboutUs.md`. (Pull Request [\\#46](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/46))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 70
    }
  },
  {
    "path": "docs/team/lucastai98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "title: Lucas Tai\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Project: Taskmania"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Taskmania (based off AB3) is a **desktop app for a project leader to manage team members and tasks** to be finished in a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " software project, optimized for use via a Command Line Interface (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " Graphical User Interface (GUI). If you can type fast, Taskmania can allow you to manage your team faster than "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " a traditional point and click interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Created Participation object. (Pull request: Pull request [\\#18](https://github.com/AY2021S1-CS2103T-W10-3/tp/pull/18))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: an association class keeping track of who participates in what project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created the class from scratch."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Model modification**: Created Meeting object and added basic dependencies."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What it means: a meeting of a project that teammates can attend."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * What changes made: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * created the class from scratch;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added dependencies of it in Project, Participation, and related collections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * added related test cases."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dlucastai98\u0026tabRepo\u003dAY2021S1-CS2103T-W10-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Came up with the content outline of the first draft of modified User Guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Added user guide for dashboard-related features, including project dashboard and task dashboard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  * Added all user stories of first draft to issue tracker"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 46
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "This command allows users of the MainCatalogue application to add optional remarks to people in their main "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "catalogue and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "`ResultDisplay`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Changes the remark of an existing project in the main catalogue."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `MainCatalogueParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the project identified \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"by the index number used in the last project listing. \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "if our code is functioning as intended."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ".commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param index of the project in the filtered project list to edit the remark"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param remark of the project to be updated to"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ".logic.parser` package. The class must extend the `Parser"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "` interface."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "provided for the function to understand what it does."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ":information_source: Don’t forget to update `MainCatalogueParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of project data. We achieve that by working with the `Project` model. Each field in a Project is implemented as a separate class (e.g. a `Name` object represents the project’s projectName). That means we should add"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " a `Remark` class so that we can use a `Remark` object to represent a remark given to a project."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Create a new `Remark` in `seedu.address"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ".model.project`. Since a `Remark` is a field that is similar to `Address`, we can"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " reuse a significant bit of code."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "A copy-paste and search-replace later, you should have something like "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "[this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "constrains and thus does not require input"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each project."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Simply add the following to [`seedu.address"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ".ui.ProjectCard`](https://github.com/se-edu/addressbook-level3/commit"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`ProjectCard.java`:**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Then insert the following into [`main/resources/view/ProjectListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`ProjectListCard.fxml`:**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "## Modify `Project` to support a `Remark` field"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Since `ProjectCard` displays data from a `Project`, we need to update `Project` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Modify `Project`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "We change the constructor of `Project` to take a `Remark`. We will also need to define new fields and accessors "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "accordingly to store our new addition."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "### Update other usages of `Project`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Unfortunately, a change to `Project` will cause other commands to break, you will have to modify these commands to use"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " the updated `Project`!"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Project` class to find these commands."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "MainCatalogue stores data by serializing `JsonAdaptedProject` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedProject` to work with our new `Project`!"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ":exclamation: You must delete MainCatalogue’s storage file located at `/data/addressbook.json` before running it! Not"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " doing so will cause MainCatalogue to default to an empty main catalogue!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Now that we have finalized the `Project` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`ProjectCard.java`:**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    remark.setText(project.getRemark().value);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " adding in the last few steps."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Project`. Since all fields in a"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " `Project` are immutable, we create a new instance of a `Project` with the values that we want and"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "save it with `Model#setProject()`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Project: %1$s\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Project: %1$s\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getName(), projectToEdit.getPhone(), projectToEdit.getEmail(),"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                projectToEdit.getAddress(), remark, projectToEdit.getTags());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedProject));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code projectToEdit}."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private String generateSuccessMessage(Project projectToEdit) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return String.format(message, projectToEdit);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Following convention, let’s change the projectName of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "This concludes the tutorial for adding a new `Command` to MainCatalogue."
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 52,
      "-": 334,
      "lll-jy": 36
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "When working on MainCatalogue, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Project` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `projectDescription` field from `Project`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "The `projectDescription` field in `Project` is actually an instance of the `seedu.address.model.project.ProjectDescriptionect.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditProjectDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "Let’s try removing references to `Address` in `EditProjectDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Safe delete the field `projectDescription` in `EditProjectDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "1. Remove the usages of `projectDescription` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `projectDescription` field from the `Project` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `projectDescription` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$projectDescription` in each `ProjectCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "![$projectDescription](../images/remove/$projectDescription.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "A quick look at the `ProjectCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`ProjectCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "private Label projectDescription;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`ProjectCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "\u003cLabel fx:id\u003d\"projectDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$projectDescription\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cLabel fx:id\u003d\"repoUrl\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$repoUrl\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `projectDescription` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "**`invalidProjectMainCatalogue.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    \"projectName\": \"Project with invalid projectName field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    \"deadline\": \"21-03-2020 00:00:00\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    \"repoUrl\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    \"projectDescription\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "You can go through each individual `json` file and manually remove the `projectDescription` field."
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 14,
      "-": 77,
      "TCQian": 4,
      "lll-jy": 8
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "![Using the `Search for target by projectName` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Command command \u003d mainCatalogueParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            storage.saveMainCatalogue(model.getMainCatalogue());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    **`MainCatalogueParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`MainCatalogueParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditProjectDescriptor`. Recall that we can verify the contents of `editProjectDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       Project projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       Project editedProject \u003d createEditedProject(projectToEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       if (!projectToEdit.isSameProject(editedProject) \u0026\u0026 model.hasProject(editedProject)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    `JsonMainCatalogue#saveMainCatalogue()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableMainCatalogue`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    **`JsonSerializableMainCatalogue\\#JsonSerializableMainCatalogue()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * Converts a given {@code ReadOnlyMainCatalogue} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    * {@code JsonSerializableMainCatalogue}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "   public JsonSerializableMainCatalogue(ReadOnlyMainCatalogue source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "       projects.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "           source.getProjectList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                 .map(JsonAdaptedProject::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "1. It appears that a `JsonAdaptedProject` is created for each `Project` and then added to the `JsonSerializableMainCatalogue`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "more about the inner workings of MainCatalogue and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    3.  Save the main catalogue in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    5.  Add a new field to `Project`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    6.  Add a new entity to the main catalogue"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 1,
      "-": 223,
      "lll-jy": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.storage.JsonMainCatalogueStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.storage.MainCatalogueStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MainCatalogue ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogueStorage mainCatalogueStorage \u003d new JsonMainCatalogueStorage(userPrefs.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storage \u003d new StorageManager(mainCatalogueStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s main catalogue and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The data from the sample main catalogue will be used instead if {@code storage}\u0027s main catalogue is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * or an empty main catalogue will be used instead if errors occur when reading {@code storage}\u0027s main catalogue."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Optional\u003cReadOnlyMainCatalogue\u003e mainCatalogueOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ReadOnlyMainCatalogue initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            mainCatalogueOptional \u003d storage.readMainCatalogue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (!mainCatalogueOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MainCatalogue\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            initialData \u003d mainCatalogueOptional.orElseGet(SampleDataUtil::getSampleMainCatalogue);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MainCatalogue\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            initialData \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MainCatalogue\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            initialData \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MainCatalogue\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        logger.info(\"Starting MainCatalogue \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Main Catalogue ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "lll-jy": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1080;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1920;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "TCQian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_INVALID_TEAMMATE_DISPLAYED_NAME \u003d \"The name provided for the teammate is not \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"found in the project\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_PROJECTS_LISTED_OVERVIEW \u003d \"%1$d projects listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_INVALID_SCOPE_COMMAND \u003d \"The scope status is expected to be %s but you are\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        + \" now in %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_MEMBER_NOT_PRESENT \u003d \"%s is not a team member of this project.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_REASSIGNMENT_OF_SAME_TASK_TO_SAME_PERSON \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        \"%s is already an assignee of the task.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 10,
      "lll-jy": 7,
      "lucastai98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/GitUserIndex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a unique Git username of a teammate"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * {@code GitUserIndex} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * component wants to communicate with another component, it can send an {@code GitUserIndex} to avoid having to know"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * what base the other component is using for its gitUserIndex. However, after receiving the {@code Index}, that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * component can convert it back to a string if the gitUserIndex will not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class GitUserIndex {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private String uniqueGitUserIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public GitUserIndex(String uniqueGitUserIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.uniqueGitUserIndex \u003d uniqueGitUserIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public String getGitUserName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return uniqueGitUserIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 uniqueGitUserIndex.equals(((GitUserIndex) other).uniqueGitUserIndex)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if {@code s} represents an Integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Will return false for any non Integer input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param s Must be string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 18,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the MainCatalogue."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @see seedu.address.model.Model#getProjectCatalogue()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    ReadOnlyMainCatalogue getMainCatalogue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of projects */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Gets the project to be displayed on dashboard."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @return the project to be displayed on dashboard."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    Optional\u003cProject\u003e getProjectToBeDisplayedOnDashBoard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the task to be displayed on dashboard."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Optional\u003cTask\u003e getTaskToBeDisplayedOnDashboard();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the user prefs\u0027 main catalogue file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Path getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the current status for valid scope."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Status getStatus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Enters the designated project."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void enter(Project project);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Quits the current project view."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void quit();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "TCQian": 6,
      "lll-jy": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.parser.MainCatalogueParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final MainCatalogueParser mainCatalogueParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogueParser \u003d new MainCatalogueParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Command command \u003d mainCatalogueParser.parseCommand(commandText, model.getStatus());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            storage.saveMainCatalogue(model.getProjectCatalogue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ReadOnlyMainCatalogue getMainCatalogue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return model.getProjectCatalogue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Optional\u003cProject\u003e getProjectToBeDisplayedOnDashBoard() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return model.getProjectToBeDisplayedOnDashboard();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cTask\u003e getTaskToBeDisplayedOnDashboard() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return model.getTaskToBeDisplayedOnDashboard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Path getMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return model.getProjectCatalogueFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return model.getStatus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enter(Project project) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void quit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.quit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "TCQian": 8,
      "lll-jy": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Adds a project to the main catalogue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a project to the main catalogue. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_NAME + \"PROJECT NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_REPOURL + \"REPOURL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_DESCRIPTION + \"PROJECT DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_NAME + \"The Blair project \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_DEADLINE + \"29-02-2020 00:00:00\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_REPOURL + \"http://github.com/a/b.git \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_DESCRIPTION + \"Coding in Greenwich \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_TAG + \"challenging \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PREFIX_PROJECT_TAG + \"WFH\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + PREFIX_TASK + \"Write User Guide\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the main catalogue\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public AddCommand(Project project) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 9,
      "-": 37,
      "TCQian": 7,
      "lll-jy": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Clears the main catalogue."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ProjectDescription book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        model.setProjectCatalogue(new MainCatalogue());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 1,
      "-": 18,
      "TCQian": 1,
      "lll-jy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Deletes a project identified using it\u0027s displayed index from the main catalogue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \": Deletes the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "lll-jy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Edits the details of an existing project in the main catalogue."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the project identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"by the index number used in the displayed project list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_NAME + \"PROJECTNAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"[\" + PREFIX_REPOURL + \"REPOURL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_DESCRIPTION + \"PROJECTDESCRIPTION] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_TAG + \"PROJECT TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_DEADLINE + \"29-02-2020 00:00:00 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PREFIX_REPOURL + \"https://github.com/a/a.git\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the main catalogue.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final EditProjectDescriptor editProjectDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param index of the project in the filtered project list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param editProjectDescriptor details to edit the project with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditCommand(Index index, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(editProjectDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.editProjectDescriptor \u003d new EditProjectDescriptor(editProjectDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project editedProject \u003d createEditedProject(projectToEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!projectToEdit.isSameProject(editedProject) \u0026\u0026 model.hasProject(editedProject)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Creates and returns a {@code Project} with the details of {@code projectToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * edited with {@code editProjectDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static Project createEditedProject(Project projectToEdit, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assert projectToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectName updatedProjectName \u003d editProjectDescriptor.getProjectName().orElse(projectToEdit.getProjectName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Deadline updatedDeadline \u003d editProjectDescriptor.getDeadline().orElse(projectToEdit.getDeadline());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        RepoUrl updatedRepoUrl \u003d editProjectDescriptor.getRepoUrl().orElse(projectToEdit.getRepoUrl());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectDescription updatedProjectDescription \u003d editProjectDescriptor.getProjectDescription()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .orElse(projectToEdit.getProjectDescription());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Set\u003cProjectTag\u003e updatedProjectTags \u003d editProjectDescriptor.getProjectTags().orElse("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            projectToEdit.getProjectTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Set\u003cTask\u003e updatedTasks \u003d editProjectDescriptor.getTasks().orElse(projectToEdit.getTasks());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Set\u003cMeeting\u003e updatedMeetings \u003d editProjectDescriptor.getMeetings().orElse(projectToEdit.getMeetings());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return new Project(updatedProjectName, updatedDeadline, updatedRepoUrl, updatedProjectDescription,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                updatedProjectTags, new HashMap\u003c\u003e(), updatedTasks, updatedMeetings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 editProjectDescriptor.equals(e.editProjectDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Stores the details to edit the project with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * corresponding field value of the project."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static class EditProjectDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private ProjectName projectName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        private RepoUrl repoUrl;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private ProjectDescription projectDescription;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private Set\u003cProjectTag\u003e projectTags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        private Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private Set\u003cMeeting\u003e meetings;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public EditProjectDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * A defensive copy of {@code projectTags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public EditProjectDescriptor(EditProjectDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setProjectName(toCopy.projectName);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            setRepoUrl(toCopy.repoUrl);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setProjectDescription(toCopy.projectDescription);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setTags(toCopy.projectTags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            setTasks(toCopy.tasks);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(projectName, deadline, repoUrl, projectDescription, projectTags, tasks);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setProjectName(ProjectName projectName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cProjectName\u003e getProjectName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(projectName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public void setRepoUrl(RepoUrl repoUrl) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            this.repoUrl \u003d repoUrl;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public Optional\u003cRepoUrl\u003e getRepoUrl() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return Optional.ofNullable(repoUrl);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setProjectDescription(ProjectDescription projectDescription) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.projectDescription \u003d projectDescription;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cProjectDescription\u003e getProjectDescription() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(projectDescription);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Sets {@code projectTags} to this object\u0027s {@code projectTags}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * A defensive copy of {@code projectTags} is used internally."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setTags(Set\u003cProjectTag\u003e projectTags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.projectTags \u003d (projectTags !\u003d null) ? new HashSet\u003c\u003e(projectTags) : null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Returns an unmodifiable project tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code projectTags} is null."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cSet\u003cProjectTag\u003e\u003e getProjectTags() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return (projectTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(projectTags)) : Optional.empty();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * Sets {@code tasks} to this object\u0027s {@code tasks}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * A defensive copy of {@code tasks} is used internally."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void setTasks(Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.tasks \u003d (tasks !\u003d null) ? new HashSet\u003c\u003e(tasks) : null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * Returns an unmodifiable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tasks} is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public Optional\u003cSet\u003cTask\u003e\u003e getTasks() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return (tasks !\u003d null) ? Optional.of(Collections.unmodifiableSet(tasks)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Sets {@code tasks} to this object\u0027s {@code tasks}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * A defensive copy of {@code tasks} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setMeetings(Set\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.meetings \u003d (meetings !\u003d null) ? new HashSet\u003c\u003e(meetings) : null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Returns an unmodifiable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tasks} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cSet\u003cMeeting\u003e\u003e getMeetings() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return (meetings !\u003d null) ? Optional.of(Collections.unmodifiableSet(meetings)) : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (!(other instanceof EditProjectDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            EditProjectDescriptor e \u003d (EditProjectDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return getProjectName().equals(e.getProjectName())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    \u0026\u0026 getRepoUrl().equals(e.getRepoUrl())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    \u0026\u0026 getProjectDescription().equals(e.getProjectDescription())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    \u0026\u0026 getProjectTags().equals(e.getProjectTags())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \u0026\u0026 getTasks().equals(e.getTasks());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 53,
      "-": 116,
      "TCQian": 28,
      "lll-jy": 57,
      "lucastai98": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Main Catalogue as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "lll-jy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Finds and lists all projects in main catalogue whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all projects whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                String.format(Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW, model.getFilteredProjectList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "lll-jy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "lll-jy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Lists all projects in the main catalogue to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "lll-jy": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Starts a project identified using it\u0027s displayed index from the main catalogue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \": Starts the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_START_PROJECT_SUCCESS \u003d \"Started Project: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public StartCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToStart \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(projectToStart);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_PROJECT_SUCCESS, projectToStart));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StartCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " * Adds a project to the main catalogue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the project. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + PREFIX_PROJECT_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + PREFIX_TASK_PROGRESS + \"TASK PROGRESS PERCENT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + PREFIX_TASK_IS_DONE + \"TASK STATUS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + \"[\" + PREFIX_TASK_DEADLINE + \"TASK DEADLINE] \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + PREFIX_PROJECT_NAME + \"Create new Person Class \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + PREFIX_TASK_PROGRESS + \"35 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_IS_DONE + \"true \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_DEADLINE + \"29-02-2020 00:00:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        project.addTask(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 4,
      "lucastai98": 57,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/AllMeetingsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Shows all the meetings in the current project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class AllMeetingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \": clear meeting filter and view all the meetings\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_ALL_MEETINGS_SUCCESS \u003d \"These are all the meetings in this project\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public AllMeetingsCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assert(model !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.showAllMeetings();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_MEETINGS_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            || other instanceof AllMeetingsCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/AllTasksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Shows all the tasks in the current project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class AllTasksCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \": clear task filter and view all the tasks\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_ALL_TASKS_SUCCESS \u003d \"These are all the tasks in this project\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public AllTasksCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assert(model !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.showAllTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new CommandResult(MESSAGE_ALL_TASKS_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            || other instanceof AllTasksCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/AssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Assigns a task to a person with participation in the current project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \": Assigns the task identified by the index number used in the displayed task list to the team member\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"that participates in the current project with his/her name.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer), NAME (must be present in the project)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 Lucas\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_ASSIGN_TASK_SUCCESS \u003d \"Assigns task: %1$s to %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final String assignee;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates an AssignCommand that assigns the task of the given index to the intended assignee."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public AssignCommand(Index targetIndex, String assignee) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.assignee \u003d assignee;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cTask\u003e lastShownTaskList \u003d project.getFilteredTaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToAssociate \u003d lastShownTaskList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!project.hasParticipation(assignee)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_MEMBER_NOT_PRESENT, assignee));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Participation assignee \u003d project.getParticipation(this.assignee);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (assignee.hasTask(taskToAssociate) || taskToAssociate.hasAssignee(assignee)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_REASSIGNMENT_OF_SAME_TASK_TO_SAME_PERSON,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    assignee.getPerson().getGitUserName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assignee.addTask(taskToAssociate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        taskToAssociate.addAssignee(assignee);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_TASK_SUCCESS, taskToAssociate, assignee));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                || (other instanceof AssignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AssignCommand) other).targetIndex)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 assignee.equals(((AssignCommand) ((AssignCommand) other)).assignee)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 3,
      "GeNiaaz": 1,
      "lll-jy": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " * Edits the details of an existing task in the main catalogue."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittask\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_NAME + \"TASKNAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + \"[\" + PREFIX_TASK_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_DESCRIPTION + \"TASKDESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"[\" + PREFIX_TASK_PROGRESS + \"TASK PROGRESS]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"[\" + PREFIX_TASK_IS_DONE + \"TASK STATUS]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_DEADLINE + \"29-02-2020 00:00:00 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited TASK: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d project.getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        project.deleteTask(taskToEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        project.addTask(editedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        String updatedTaskName \u003d editTaskDescriptor.getTaskName().orElse(taskToEdit.getTaskName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Double updatedProgress \u003d editTaskDescriptor.getProgress().orElse(taskToEdit.getProgress());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Boolean updatedIsDone \u003d editTaskDescriptor.getIsDone().orElse(taskToEdit.isDone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        String updatedTaskDescription \u003d editTaskDescriptor.getTaskDescription()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                .orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Set\u003cParticipation\u003e updatedAssignees \u003d editTaskDescriptor.getAssignees().orElse("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                taskToEdit.getAssignees());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Task updatedTask \u003d new Task(updatedTaskName, updatedTaskDescription, updatedDeadline,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                updatedProgress, updatedIsDone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        updatedTask.getAssignees().addAll(updatedAssignees);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return updatedTask;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private String taskName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private LocalDate publishDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private Double progress;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private Boolean isDone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        private Set\u003cParticipation\u003e assignees;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setTaskName(toCopy.taskName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setTaskDescription(toCopy.description);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setAssignees(toCopy.assignees);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setIsDone(toCopy.isDone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setProgress(toCopy.progress);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            setPublishDate(toCopy.publishDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return CollectionUtil.isAnyNonNull(taskName, deadline, progress,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    description, isDone, publishDate, assignees);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cString\u003e getTaskName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(taskName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setPublishDate(LocalDate date) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.publishDate \u003d date;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cLocalDate\u003e getPublishDate() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(publishDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setProgress(Double progress) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.progress \u003d progress;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cDouble\u003e getProgress() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(progress);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setIsDone(Boolean isDone) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsDone() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(isDone);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setTaskDescription(String taskDescription) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.description \u003d taskDescription;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cString\u003e getTaskDescription() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Sets {@code assignees} to this object\u0027s {@code assignees}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * A defensive copy of {@code assignees} is used internally."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public void setAssignees(Set\u003cParticipation\u003e assignees) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            this.assignees \u003d (assignees !\u003d null) ? new HashSet\u003c\u003e(assignees) : null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Returns an unmodifiable assignees set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code assignees} is null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public Optional\u003cSet\u003cParticipation\u003e\u003e getAssignees() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return (assignees !\u003d null) ? Optional.of(Collections.unmodifiableSet(assignees)) : Optional.empty();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return getTaskName().equals(e.getTaskName())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getTaskDescription().equals(e.getTaskDescription())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getAssignees().equals(e.getAssignees())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getIsDone().equals(e.getIsDone())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getProgress().equals(e.getProgress())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    \u0026\u0026 getPublishDate().equals(getPublishDate());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 3,
      "lucastai98": 247,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/EditTeammateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_GIT_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.index.GitUserIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.PersonName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Edits the details of an existing project in the main catalogue."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class EditTeammateCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editteammate\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    //TODO CHANGE THE IDENTIFIER OF TEAMMATES TO A TEAMMATE \u0027CODE\u0027 instead of simply the name, because teammates can"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    // have the same name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the teammate identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"by the name used in the displayed project list. Git User Name cannot be changed. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"Parameters: NAME (must be a name of an existing teammate) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"[\" + PREFIX_TEAMMATE_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"[\" + PREFIX_TEAMMATE_GIT_USERNAME + \"GIT USERNAME \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"[\" + PREFIX_TEAMMATE_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"[\" + PREFIX_TEAMMATE_EMAIL + \"EMAIL]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"[\" + PREFIX_TEAMMATE_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_NAME + \"Lucas \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_GIT_USERNAME + \"lucas93 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_PHONE + \"92912645 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_EMAIL + \"lucaskia@gmail.com \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_ADDRESS + \"13 lay road\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_EDIT_TEAMMATE_SUCCESS \u003d \"Teammate has been edited: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final GitUserIndex gitUserIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final EditTeammateDescriptor editTeammateDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param gitUserIndex of the teammate in the teammate list in the project to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param editTeammateDescriptor details to edit the project with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public EditTeammateCommand(GitUserIndex gitUserIndex, EditTeammateDescriptor editTeammateDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(gitUserIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(editTeammateDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.gitUserIndex \u003d gitUserIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.editTeammateDescriptor \u003d new EditTeammateDescriptor(editTeammateDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d project.getTeammates();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!project.getTeammatePresence(gitUserIndex)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEAMMATE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        int indexOfteammate \u003d project.getTeammateIndex(gitUserIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person teammateToEdit \u003d lastShownList.get(indexOfteammate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedTeammate \u003d createEditedTeammate(teammateToEdit, editTeammateDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.removeParticipation(teammateToEdit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.addParticipation(editedTeammate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TEAMMATE_SUCCESS, editedTeammate));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static Person createEditedTeammate(Person teammateToEdit, EditTeammateDescriptor editTeammateDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assert teammateToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        PersonName updatedTeammateName \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.getTeammateName().orElse(teammateToEdit.getPersonName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        GitUserName gitUserName \u003d teammateToEdit.getGitUserName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Phone updatedPhone \u003d editTeammateDescriptor.getPhone().orElse(teammateToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Email updatedEmail \u003d editTeammateDescriptor.getEmail().orElse(teammateToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Address updatedAddress \u003d editTeammateDescriptor.getAddress()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .orElse(teammateToEdit.getAddress());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        HashMap\u003cProjectName, Participation\u003e updatedParticipation \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.getParticipation().orElse(teammateToEdit.getParticipations());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // TODO: take note gitUserName is not changed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new Person(updatedTeammateName, gitUserName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            updatedParticipation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!(other instanceof EditTeammateCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditTeammateCommand e \u003d (EditTeammateCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return gitUserIndex.equals(e.gitUserIndex)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 editTeammateDescriptor.equals(e.editTeammateDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Stores the details to edit the teammate (Person) with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * corresponding field value of the teammate (Person)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static class EditTeammateDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private PersonName name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private GitUserName gitUserName;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        private HashMap\u003cProjectName, Participation\u003e listOfParticipations \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public EditTeammateDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public EditTeammateDescriptor(EditTeammateDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setTeammateName(toCopy.name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setGitUserName(toCopy.gitUserName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            setParticipation(toCopy.listOfParticipations);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, listOfParticipations);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setTeammateName(PersonName name) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cPersonName\u003e getTeammateName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setGitUserName(GitUserName gitUserName) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.gitUserName \u003d gitUserName;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cGitUserName\u003e getGitUserName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(gitUserName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Sets {@code listOfParticipations} to this object\u0027s {@code listOfParticipations}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * A defensive copy of {@code listOfParticipations} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public void setParticipation(HashMap\u003cProjectName, Participation\u003e listOfParticipations) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.listOfParticipations \u003d (listOfParticipations !\u003d null)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                ? new HashMap\u003c\u003e(listOfParticipations)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Returns an unmodifiable assignees set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code assignees} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         * TODO: THIS MAY FAIL, + 5 lines down"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public Optional\u003cHashMap\u003cProjectName, Participation\u003e\u003e getParticipation() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return (listOfParticipations !\u003d null)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                ? Optional.of(listOfParticipations)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (!(other instanceof EditTeammateDescriptor)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            EditTeammateDescriptor e \u003d (EditTeammateDescriptor) other;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return getTeammateName().equals(e.getTeammateName())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 getParticipation().equals(e.getParticipation());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 252
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/LeaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Leaves the project view and go back to the main catalogue view."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class LeaveCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"leave\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \": Leaves the project detail view and go back to the main catalogue view.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_LEAVE_SUCCESS \u003d \"Returned to the main catalogue page\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public LeaveCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.quit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(MESSAGE_LEAVE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                || other instanceof LeaveCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/MeetingFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_FILTER_BY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Filters meetings by meeting name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class MeetingFilterCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filterm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \": Filter and show meetings with given predicate\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \"Parameters: (\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_MEETING_FILTER_BY_NAME + \"MEETING NAME)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" (\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_MEETING_FILTER_BY_NAME + \"cs2103 weekly meeting)\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_FILTER_MEETING_SUCCESS \u003d \"Here are the filtered meetings:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private final Predicate\u003cMeeting\u003e predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Creates a filter command with the given predicate."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param predicate the predicate used to filter meetings"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public MeetingFilterCommand(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.updateMeetingFilter(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FILTER_MEETING_SUCCESS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/NewTeammateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_GIT_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Creates a new person within a project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class NewTeammateCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newteammate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new teammate as a part of this project\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"\\nParameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_NAME + \"TEAMMATE NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_GIT_USERNAME + \"GIT USERNAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_TEAMMATE_ADDRESS + \"ADDRESS\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" mn/Lucas mg/LucasTai98 mp/93824823 me/lucas@gmail.com ma/18 Evelyn Road\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_ASSIGN_TASK_SUCCESS \u003d \"New Teammate added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Creates an new teammate that is associated with the project"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public NewTeammateCommand(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        toAdd.addProject(project);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.addParticipation(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_TASK_SUCCESS, toAdd.getGitUserNameString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            || (other instanceof NewTeammateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 toAdd.equals(((NewTeammateCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 59,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/TaskFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_ASSIGNEE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Filters tasks by assignee\u0027s name, task name or deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class TaskFilterCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filtert\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \": Filter and show tasks with given predicate\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \"Parameters: (\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_ASSIGNEE + \"ASSIGNEE NAME)||(\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_DEADLINE + \"DEADLINE)||(\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_NAME + \"TASK NAME)||(\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_PROGRESS + \"DEADLINE)||(\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_IS_DONE + \"DEADLINE)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" (\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_ASSIGNEE + \"Alice)||(\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_DEADLINE + \"31-12-2020 10:00:00)||(\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_NAME + \"group meeting)||(\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_PROGRESS + \"50)||(\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        + PREFIX_TASK_IS_DONE + \"false)\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_FILTER_TASK_SUCCESS \u003d \"Here are the filtered tasks:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private final Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Creates a filter command with the given predicate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param predicate the predicate used to filter tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public TaskFilterCommand(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.updateTaskFilter(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FILTER_TASK_SUCCESS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 59,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/project/ViewTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Requests to view the details of an existing task in the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ViewTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewtask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the details of the task identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            + \"by the index number used in the displayed task list. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_VIEW_TASK_SUCCESS \u003d \"Started TASK: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ViewTaskCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getProjectToBeDisplayedOnDashboard().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d project.getFilteredTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enterTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_TASK_SUCCESS, task));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!(other instanceof ViewTaskCommand)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand e \u003d (ViewTaskCommand) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimapUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME, PREFIX_DEADLINE, PREFIX_REPOURL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                        PREFIX_PROJECT_DESCRIPTION, PREFIX_PROJECT_TAG, PREFIX_TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PROJECT_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                PREFIX_PROJECT_DESCRIPTION, PREFIX_DEADLINE, PREFIX_REPOURL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectName projectName \u003d ParserUtil.parseProjectName(argMultimap.getValue(PREFIX_PROJECT_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        RepoUrl repoUrl \u003d ParserUtil.parseRepoUrl(argMultimap.getValue(PREFIX_REPOURL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectDescription projectDescription \u003d ParserUtil.projectDescription(argMultimap.getValue("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                PREFIX_PROJECT_DESCRIPTION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Set\u003cProjectTag\u003e projectTagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_PROJECT_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Set\u003cTask\u003e taskList \u003d ParserUtil.parseTasks(argMultimap.getAllValues(PREFIX_TASK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Set\u003cMeeting\u003e meetingList \u003d ParserUtil.parseMeetings(argMultimap.getAllValues(PREFIX_MEETING));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Project project \u003d new Project(projectName, deadline, repoUrl, projectDescription, projectTagList,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                new HashMap\u003c\u003e(), taskList, meetingList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new AddCommand(project);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 10,
      "-": 30,
      "TCQian": 11,
      "lucastai98": 5,
      "lll-jy": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimapUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME, PREFIX_TASK_PROGRESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                        PREFIX_TASK_IS_DONE, PREFIX_TASK_DEADLINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PROJECT_NAME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                PREFIX_TASK_PROGRESS, PREFIX_TASK_IS_DONE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        String taskName \u003d ParserUtil.parseTaskBasicInformation(argMultimap.getValue(PREFIX_PROJECT_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        double taskProgress \u003d Double.parseDouble("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                ParserUtil.parseTaskBasicInformation(argMultimap.getValue(PREFIX_TASK_PROGRESS).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        boolean taskStatus \u003d Boolean.parseBoolean("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                ParserUtil.parseTaskBasicInformation(argMultimap.getValue(PREFIX_TASK_IS_DONE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Deadline taskDeadline \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            taskDeadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TASK_DEADLINE).orElse(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Task task \u003d new Task(taskName, null, taskDeadline, taskProgress, taskStatus);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 9,
      "GeNiaaz": 2,
      "lucastai98": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimapUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class ArgumentMultimapUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Checks there is only one of the given prefixes is present."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param argumentMultimap  the map containing the prefixes and the corresponding Strings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param prefixes  prefixes to check"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return  true if only one of the prefixes is present, and false otherwise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static boolean isOnlyOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.AssignCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * and returns a AssignCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String input \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            String[] info \u003d input.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (info.length !\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(info[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return new AssignCommand(index, info[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 6,
      "lll-jy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"dl/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final Prefix PREFIX_REPOURL \u003d new Prefix(\"ru/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_TAG \u003d new Prefix(\"tg/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"tk/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static final Prefix PREFIX_MEETING \u003d new Prefix(\"mt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    // Prefixes related to Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_TASK_ASSIGNEE \u003d new Prefix(\"ta/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_TASK_NAME \u003d new Prefix(\"tn/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_TASK_DEADLINE \u003d new Prefix(\"td/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_TASK_PROGRESS \u003d new Prefix(\"tp/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_TASK_IS_DONE \u003d new Prefix(\"done/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    // Prefixes related to meeting filters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final Prefix PREFIX_MEETING_FILTER_BY_NAME \u003d new Prefix(\"mtn\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    // Prefixes related to Teammate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_TEAMMATE_ADDRESS \u003d new Prefix(\"ma/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_TEAMMATE_EMAIL \u003d new Prefix(\"me/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_TEAMMATE_GIT_USERNAME \u003d new Prefix(\"mg/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_TEAMMATE_NAME \u003d new Prefix(\"mn/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Prefix PREFIX_TEAMMATE_PHONE \u003d new Prefix(\"mp/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 9,
      "GeNiaaz": 8,
      "-": 10,
      "TCQian": 2,
      "lll-jy": 1,
      "lucastai98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME, PREFIX_DEADLINE, PREFIX_REPOURL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                        PREFIX_PROJECT_DESCRIPTION, PREFIX_PROJECT_TAG, PREFIX_TASK, PREFIX_MEETING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditProjectDescriptor editProjectDescriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editProjectDescriptor.setProjectName(ParserUtil.parseProjectName("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    argMultimap.getValue(PREFIX_PROJECT_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            editProjectDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REPOURL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            editProjectDescriptor.setRepoUrl(ParserUtil.parseRepoUrl(argMultimap.getValue(PREFIX_REPOURL).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editProjectDescriptor.setProjectDescription(ParserUtil.projectDescription(argMultimap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    .getValue(PREFIX_PROJECT_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_PROJECT_TAG)).ifPresent(editProjectDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        parseTasksForEdit(argMultimap.getAllValues(PREFIX_TASK)).ifPresent(editProjectDescriptor::setTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        parseMeetingsForEdit(argMultimap.getAllValues(PREFIX_MEETING)).ifPresent(editProjectDescriptor::setMeetings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!editProjectDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new EditCommand(index, editProjectDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cProjectTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * {@code Set\u003cProjectTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Optional\u003cSet\u003cProjectTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tasks} into a {@code Set\u003cTask\u003e} if {@code tasks} is non-empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * If {@code tasks} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code Set\u003cTask\u003e} containing zero tasks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Optional\u003cSet\u003cTask\u003e\u003e parseTasksForEdit(Collection\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Collection\u003cString\u003e taskSet \u003d tasks.size() \u003d\u003d 1 \u0026\u0026 tasks.contains(\"\") ? Collections.emptySet() : tasks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Optional.of(ParserUtil.parseTasks(taskSet));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e meetings} into a {@code Set\u003cMeeting\u003e} if {@code meetings} is non-empty."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * If {@code meetings} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * {@code Set\u003cMeeting\u003e} containing zero meetings."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Optional\u003cSet\u003cMeeting\u003e\u003e parseMeetingsForEdit("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            Collection\u003cString\u003e meetings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        assert meetings !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (meetings.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Collection\u003cString\u003e meetingSet \u003d meetings.size() \u003d\u003d 1 \u0026\u0026 meetings.contains(\"\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                ? Collections.emptySet() : meetings;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return Optional.of(ParserUtil.parseMeetings(meetingSet));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 13,
      "-": 58,
      "TCQian": 8,
      "lucastai98": 22,
      "lll-jy": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.EditTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME, PREFIX_TASK_DEADLINE, PREFIX_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                        PREFIX_TASK_PROGRESS, PREFIX_TASK_IS_DONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            editTaskDescriptor.setTaskName(ParserUtil.parseTaskBasicInformation("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    argMultimap.getValue(PREFIX_PROJECT_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            editTaskDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TASK_DEADLINE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            editTaskDescriptor.setTaskDescription(ParserUtil.parseTaskBasicInformation(argMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    .getValue(PREFIX_PROJECT_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_PROGRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            editTaskDescriptor.setProgress(Double.parseDouble(ParserUtil.parseTaskBasicInformation(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    .getValue(PREFIX_TASK_PROGRESS).get())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_IS_DONE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            editTaskDescriptor.setIsDone(Boolean.parseBoolean(ParserUtil.parseTaskBasicInformation(argMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    .getValue(PREFIX_TASK_IS_DONE).get())));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tasks} into a {@code Set\u003cTask\u003e} if {@code tasks} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * If {@code tasks} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * {@code Set\u003cTask\u003e} containing zero tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Optional\u003cSet\u003cTask\u003e\u003e parseTasksForEdit(Collection\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Collection\u003cString\u003e taskSet \u003d tasks.size() \u003d\u003d 1 \u0026\u0026 tasks.contains(\"\") ? Collections.emptySet() : tasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return Optional.of(ParserUtil.parseTasks(taskSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 4,
      "lucastai98": 83,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTeammateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.index.GitUserIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.project.EditTeammateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class EditTeammateCommandParser implements Parser\u003cEditTeammateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public EditTeammateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TEAMMATE_NAME, PREFIX_TEAMMATE_PHONE, PREFIX_TEAMMATE_EMAIL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                PREFIX_TEAMMATE_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        GitUserIndex gitUserIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            gitUserIndex \u003d ParsePersonUtil.parseGitUserIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTeammateCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditTeammateCommand.EditTeammateDescriptor editTeammateDescriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new EditTeammateCommand.EditTeammateDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEAMMATE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.setTeammateName(ParsePersonUtil.parsePersonName("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                argMultimap.getValue(PREFIX_TEAMMATE_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEAMMATE_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.setPhone(ParsePersonUtil.parsePhone(argMultimap.getValue(PREFIX_TEAMMATE_PHONE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEAMMATE_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.setEmail(ParsePersonUtil.parseEmail(argMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .getValue(PREFIX_TEAMMATE_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEAMMATE_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            editTeammateDescriptor.setAddress(ParsePersonUtil.parseAddress(argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .getValue(PREFIX_TEAMMATE_ADDRESS).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!editTeammateDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new EditTeammateCommand(gitUserIndex, editTeammateDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tasks} into a {@code Set\u003cTask\u003e} if {@code tasks} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * If {@code tasks} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * {@code Set\u003cTask\u003e} containing zero tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Optional\u003cSet\u003cTask\u003e\u003e parseTeammatesForEdit(Collection\u003cString\u003e teammates) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assert teammates !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (teammates.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Collection\u003cString\u003e teammateSet \u003d teammates.size() \u003d\u003d 1 \u0026\u0026 teammates.contains(\"\") ? Collections.emptySet()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            : teammates;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return Optional.of(ParserUtil.parseTasks(teammates));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "lll-jy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MainCatalogueParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.StartCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.AddTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.AllMeetingsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.AllTasksCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.AssignCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.EditTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.project.EditTeammateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.LeaveCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.MeetingFilterCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.logic.commands.project.NewTeammateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.TaskFilterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.ViewTaskCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.exceptions.InvalidScopeException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class MainCatalogueParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param status    the status of the current scoping"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Command parseCommand(String userInput, Status status) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        case LeaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new LeaveCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        case AllTasksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                return new AllTasksCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        case AllMeetingsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                return new AllMeetingsCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        case TaskFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                return new TaskFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        case MeetingFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                return new MeetingFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        case NewTeammateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return new NewTeammateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        case EditTeammateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                return new EditTeammateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        case ViewTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (status !\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return new ViewTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidScopeException(Status.PROJECT, status);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 24,
      "GeNiaaz": 6,
      "-": 67,
      "lll-jy": 55,
      "lucastai98": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MeetingFilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimapUtil.isOnlyOnePrefixPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_FILTER_BY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.MeetingFilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Parses input {@code String} and creates a MeetingFilterCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class MeetingFilterCommandParser implements Parser\u003cMeetingFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Parses the given input {@code String}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param args  the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return      the filter command whose predicate corresponds to the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @throws ParseException   if the user input does not follow the format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public MeetingFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_MEETING_FILTER_BY_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (!isOnlyOnePrefixPresent(argMultimap, PREFIX_MEETING_FILTER_BY_NAME)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetingFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Predicate\u003cMeeting\u003e predicate \u003d meeting -\u003e true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEETING_FILTER_BY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d meeting -\u003e meeting.getMeetingName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                .contains(argMultimap.getValue(PREFIX_MEETING_FILTER_BY_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new MeetingFilterCommand(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NewTeammateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimapUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_GIT_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.project.NewTeammateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.PersonName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class NewTeammateCommandParser implements Parser\u003cNewTeammateCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewTeammateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * and returns a NewTeammateCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public NewTeammateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TEAMMATE_NAME, PREFIX_TEAMMATE_GIT_USERNAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                PREFIX_TEAMMATE_PHONE, PREFIX_TEAMMATE_EMAIL, PREFIX_TEAMMATE_ADDRESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TEAMMATE_NAME, PREFIX_TEAMMATE_GIT_USERNAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            PREFIX_TEAMMATE_PHONE, PREFIX_TEAMMATE_EMAIL, PREFIX_TEAMMATE_ADDRESS)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewTeammateCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        PersonName name \u003d ParsePersonUtil.parsePersonName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .getValue(PREFIX_TEAMMATE_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        GitUserName gitUserName \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ParsePersonUtil.parseGitUserName(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .getValue(PREFIX_TEAMMATE_GIT_USERNAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Phone phone \u003d ParsePersonUtil.parsePhone(argMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .getValue(PREFIX_TEAMMATE_PHONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Email email \u003d ParsePersonUtil.parseEmail(argMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .getValue(PREFIX_TEAMMATE_EMAIL).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Address address \u003d ParsePersonUtil.parseAddress(argMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .getValue(PREFIX_TEAMMATE_ADDRESS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person teammate \u003d new Person(name, gitUserName, phone, email, address);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new NewTeammateCommand(teammate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParsePersonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.index.GitUserIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.PersonName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Contains utility methods used for parsing strings in NewTeammate Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ParsePersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses {@code gitUserName} into an {@code GitUserIndex} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static GitUserIndex parseGitUserIndex(String gitUserName) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedGitUserName \u003d gitUserName.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (StringUtil.isInteger(trimmedGitUserName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new GitUserIndex(gitUserName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String personName} into a {@code PersonName}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code personName} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static PersonName parsePersonName(String personName) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(personName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedPersonName \u003d personName.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!PersonName.isValidPersonName(personName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(PersonName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new PersonName(trimmedPersonName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String gitUserName} into a {@code GitUserName}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code personName} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static GitUserName parseGitUserName(String gitUserName) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(gitUserName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedGitUserName \u003d gitUserName.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!GitUserName.isValidGitUserName(gitUserName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(GitUserName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new GitUserName(trimmedGitUserName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedphone \u003d phone.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new Phone(trimmedphone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String email} into a {@code Email}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String address} into a {@code Address}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedaddress \u003d address.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new Address(trimmedaddress);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String projectName} into a {@code ProjectName}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code projectName} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static ProjectName parseProjectName(String projectName) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedProjectName \u003d projectName.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectName.isValidProjectName(trimmedProjectName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new ProjectName(trimmedProjectName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String projectDescription} into an {@code ProjectDescription}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code projectDescription} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static ProjectDescription projectDescription(String projectDescription) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectDescription);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedProjectDescription \u003d projectDescription.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectDescription.isValidProjectDescription(trimmedProjectDescription)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(ProjectDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new ProjectDescription(trimmedProjectDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Parses a {@code String repoUrl} into an {@code RepoUrl}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @throws ParseException if the given {@code repoUrl} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static RepoUrl parseRepoUrl(String repoUrl) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        requireNonNull(repoUrl);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String trimmedRepoUrl \u003d repoUrl.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!RepoUrl.isValidRepoUrl(trimmedRepoUrl)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new ParseException(RepoUrl.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return new RepoUrl(trimmedRepoUrl);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses a {@code String projectTag} into a {@code ProjectTag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @throws ParseException if the given {@code projectTag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static ProjectTag parseProjectTag(String projectTag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String trimmedTag \u003d projectTag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectTag.isValidProjectTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new ParseException(ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new ProjectTag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e projectTags} into a {@code Set\u003cProjectTag\u003e}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static Set\u003cProjectTag\u003e parseTags(Collection\u003cString\u003e projectTags) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final Set\u003cProjectTag\u003e projectTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (String tagName : projectTags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            projectTagSet.add(parseProjectTag(tagName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return projectTagSet;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses a {@code String task} into a {@code Task}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Task parseTask(String task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String trimmedTask \u003d task.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new Task(trimmedTask, null, null, 0, false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tasks} into a {@code Set\u003cTask\u003e}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Set\u003cTask\u003e parseTasks(Collection\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(tasks);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (String taskName : tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            taskSet.add(parseTask(taskName));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return taskSet; //TODO: parse tasks in a more meaningful way"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses a {@code String meeting} into a {@code Meeting}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static Meeting parseMeeting(String meeting) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        String trimmedMeeting \u003d meeting.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new Meeting(meeting);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e meetingTiming} into a {@code Set\u003cMeeting\u003e}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static Set\u003cMeeting\u003e parseMeetings(Collection\u003cString\u003e meetings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireNonNull(meetings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        final Set\u003cMeeting\u003e meetingSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        for (String meetingTime : meetings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            meetingSet.add(parseMeeting(meetingTime));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return meetingSet;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Parses a {@code String info}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @throws ParseException if the given {@code info} is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static String parseTaskBasicInformation(String info) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        requireNonNull(info);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        String trimmedInfo \u003d info.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (!Task.isValidAttribute(trimmedInfo)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            throw new ParseException(Task.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return trimmedInfo;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 9,
      "GeNiaaz": 33,
      "-": 72,
      "TCQian": 19,
      "lucastai98": 32,
      "lll-jy": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.StartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Parses input arguments and creates a new StartCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public StartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new StartCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskFilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimapUtil.isOnlyOnePrefixPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_ASSIGNEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.TaskFilterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " * Parses input {@code String} and creates a TaskFilterCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class TaskFilterCommandParser implements Parser\u003cTaskFilterCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Parses the given input {@code String}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param args  the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return      the filter command whose predicate corresponds to the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @throws ParseException   if the user input does not follow the format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public TaskFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TASK_ASSIGNEE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                PREFIX_TASK_DEADLINE, PREFIX_TASK_NAME, PREFIX_TASK_PROGRESS, PREFIX_TASK_IS_DONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (!isOnlyOnePrefixPresent(argMultimap, PREFIX_TASK_ASSIGNEE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            PREFIX_TASK_DEADLINE, PREFIX_TASK_NAME, PREFIX_TASK_PROGRESS, PREFIX_TASK_IS_DONE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d task -\u003e true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_ASSIGNEE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            GitUserName assigneeGitUserName \u003d ParsePersonUtil.parseGitUserName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                .getValue(PREFIX_TASK_ASSIGNEE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d task -\u003e task.hasAssigneeWhoseGitNameIs(assigneeGitUserName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TASK_DEADLINE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d task -\u003e task.isDueOn(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d task -\u003e task.getTaskName()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                .contains(argMultimap.getValue(PREFIX_TASK_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_PROGRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            double progress \u003d Double.parseDouble("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                ParserUtil.parseTaskBasicInformation(argMultimap.getValue(PREFIX_TASK_PROGRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d task -\u003e task.getProgress() \u003d\u003d progress;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK_IS_DONE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                ParserUtil.parseTaskBasicInformation(argMultimap.getValue(PREFIX_TASK_IS_DONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            predicate \u003d task -\u003e task.isDone() \u003d\u003d isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return new TaskFilterCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 67,
      "GeNiaaz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.ViewTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ViewTaskCommandParser implements Parser\u003cViewTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ViewTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new ViewTaskCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MainCatalogue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Wraps all data at the main-catalogue level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Duplicates are not allowed (by .isSameProject comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class MainCatalogue implements ReadOnlyMainCatalogue {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Optional\u003cProject\u003e project;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        status \u003d Status.CATALOGUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogue() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates an MainCatalogue using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogue(ReadOnlyMainCatalogue toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Resets the existing data of this {@code MainCatalogue} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void resetData(ReadOnlyMainCatalogue newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //// project-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the main catalogue."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Adds a project to the main catalogue."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project must not already exist in the main catalogue."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code target} must exist in the main catalogue."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the main"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * catalogue."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Removes {@code key} from this {@code MainCatalogue}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code key} must exist in the main catalogue."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void removeProject(Project key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //// project-specific-level operations TODO: may add more"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //// scoping operations"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enter(Project project) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        status \u003d Status.PROJECT;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.project \u003d Optional.of(projects.getProject(project));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void quit() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (status \u003d\u003d Status.PROJECT) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            status \u003d Status.CATALOGUE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.project \u003d Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (status \u003d\u003d Status.TASK) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            status \u003d Status.PROJECT;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            project.get().updateTaskOnView(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (status \u003d\u003d Status.CATALOGUE) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.project \u003d Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enterTask(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        status \u003d Status.TASK;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.get().updateTaskOnView(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return projects.asUnmodifiableObservableList().size() + \" projects\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                || (other instanceof MainCatalogue // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 projects.equals(((MainCatalogue) other).projects));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return projects.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "lll-jy": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the user prefs\u0027 main catalogue file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    Path getProjectCatalogueFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Sets the user prefs\u0027 main catalogue file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    void setProjectCatalogueFilePath(Path mainCatalogueFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces main catalogue data with the data in {@code mainCatalogue}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    void setProjectCatalogue(ReadOnlyMainCatalogue mainCatalogue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /** Returns the MainCatalogue */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    ReadOnlyMainCatalogue getProjectCatalogue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the main catalogue."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Deletes the given project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project must exist in the main catalogue."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code project} must not already exist in the main catalogue."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code target} must exist in the main catalogue."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the main"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * catalogue."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered project list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Updates the filter of the filtered project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    //boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    //void deletePerson(Person person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    //void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the current status for valid scope."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Status getStatus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Enters the designated project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void enter(Project project);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Quits the current project view."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void quit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Enters the designated task of the current project."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void enterTask(Task task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Updates the project to be displayed on dashboard."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @param project project to be displayed on dashboard"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    void updateProjectToBeDisplayedOnDashboard(Project project);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Gets the project to be displayed on dashboard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @return project to be displayed on dashboard wrapped in Optional box."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    Optional\u003cProject\u003e getProjectToBeDisplayedOnDashboard();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Updates the task to be displayed on dashboard."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void updateTaskToBeDisplayedOnDashboard(Task task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the task to be displayed on dashboard."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Optional\u003cTask\u003e getTaskToBeDisplayedOnDashboard();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "TCQian": 20,
      "lll-jy": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Represents the in-memory model of the main catalogue data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final MainCatalogue mainCatalogue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Optional\u003cProject\u003e projectToBeDisplayedOnDashboard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Optional\u003cTask\u003e taskToBeDisplayedOnDashboard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Initializes a ModelManager with the given mainCatalogue and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ModelManager(ReadOnlyMainCatalogue mainCatalogue, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(mainCatalogue, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        logger.fine(\"Initializing with main catalogue: \" + mainCatalogue + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.mainCatalogue \u003d new MainCatalogue(mainCatalogue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(this.mainCatalogue.getProjectList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.projectToBeDisplayedOnDashboard \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this(new MainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Path getProjectCatalogueFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return userPrefs.getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void setProjectCatalogueFilePath(Path mainCatalogueFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(mainCatalogueFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        userPrefs.setMainCatalogueFilePath(mainCatalogueFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MainCatalogue \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void setProjectCatalogue(ReadOnlyMainCatalogue mainCatalogue) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.mainCatalogue.resetData(mainCatalogue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public ReadOnlyMainCatalogue getProjectCatalogue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue.hasProject(project);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.removeProject(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.addProject(project);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.setProject(target, editedProject);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scoping modifiers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue.getStatus();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enter(Project project) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.enter(project);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        updateProjectToBeDisplayedOnDashboard(project);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void quit() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.quit();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enterTask(Task task) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.enterTask(task);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        updateTaskToBeDisplayedOnDashboard(task);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the internal list of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code versionedMainCatalogue}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue.equals(other.mainCatalogue)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 filteredProjects.equals(other.filteredProjects);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project To Be Displayed On DashBoard Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Updates the project to be displayed on project dashboard."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @param project project to be displayed on dashboard"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void updateProjectToBeDisplayedOnDashboard(Project project) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.projectToBeDisplayedOnDashboard \u003d Optional.of(project);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Optional\u003cProject\u003e getProjectToBeDisplayedOnDashboard() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return projectToBeDisplayedOnDashboard;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void updateTaskToBeDisplayedOnDashboard(Task task) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.taskToBeDisplayedOnDashboard \u003d Optional.of(task);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cTask\u003e getTaskToBeDisplayedOnDashboard() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return taskToBeDisplayedOnDashboard;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "TCQian": 24,
      "lll-jy": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyMainCatalogue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Unmodifiable view of an main catalogue"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public interface ReadOnlyMainCatalogue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an unmodifiable view of the projects list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * This list will not contain any duplicate projects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the current status for valid scope."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Status getStatus();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Enters a designated project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void enter(Project project);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Quits the current project view."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void quit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Enters a designated task of a project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void enterTask(Task task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "lll-jy": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Path getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    CATALOGUE, PROJECT, PERSON, TASK; //TODO: May add more"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Path mainCatalogueFilePath \u003d Paths.get(\"data\" , \"maincatalogue.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        setMainCatalogueFilePath(newUserPrefs.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Path getMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogueFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setMainCatalogueFilePath(Path mainCatalogueFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(mainCatalogueFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.mainCatalogueFilePath \u003d mainCatalogueFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 mainCatalogueFilePath.equals(o.mainCatalogueFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Objects.hash(guiSettings, mainCatalogueFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mainCatalogueFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "lll-jy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/InvalidScopeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Signals operations on an invalid scope status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class InvalidScopeException extends ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Status expected;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Status actual;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates an InvalidScopeException with the expected and actual scope status specified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public InvalidScopeException(Status expected, Status actual) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(String.format(Messages.MESSAGE_INVALID_SCOPE_COMMAND, expected, actual));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.actual \u003d actual;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Status getExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return expected;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Status getActual() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return actual;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!(o instanceof InvalidScopeException)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        InvalidScopeException that \u003d (InvalidScopeException) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return getExpected() \u003d\u003d that.getExpected()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u0026\u0026 getActual() \u003d\u003d that.getActual();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Objects.hash(getExpected(), getActual());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private LocalDate publishDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Temporal duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private int frequency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private LocalDateTime lastHappenAt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private String note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Constructor for meeting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Date and timing for the meeting should be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @param localDateTime date and time of meeting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public Meeting(String localDateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireAllNonNull(localDateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        startDateTime \u003d LocalDateTime.parse(localDateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Finishes a meeting."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public String getMeetingName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public LocalDate getPublishDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return publishDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public Temporal getDuration() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public int getFrequency() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public LocalDateTime getLastHappenAt() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return lastHappenAt;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public String getNote() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setPublishDate(LocalDate publishDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.publishDate \u003d publishDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setDuration(Temporal duration) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setFrequency(int frequency) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setLastHappenAt(LocalDateTime lastHappenAt) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.lastHappenAt \u003d lastHappenAt;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setNote(String note) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "lucastai98": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Project\u0027s address in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * otherwise \" \" (a blank string) would become a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param address A valid address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Project\u0027s email in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns if a given string is valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/GitUserName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Project\u0027s name in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGitUserName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class GitUserName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        \"Git User Name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Validation criteria for a Git UserName"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author GeNiaaz-reused"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused and adapted from https://github.com/shinnn/github-username-regex"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z\\\\d](?:[a-zA-Z\\\\d]|-(?\u003d[a-zA-Z\\\\d])){0,38}$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public final String fullGitUserName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Constructs a {@code GitUserName}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param gitUserName A valid User\u0027s unique Git Username."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public GitUserName(String gitUserName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(gitUserName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        checkArgument(isValidGitUserName(gitUserName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        fullGitUserName \u003d gitUserName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if a given string is a valid gitUserName."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isValidGitUserName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullGitUserName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            || (other instanceof GitUserName // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 fullGitUserName.equals(((GitUserName) other).fullGitUserName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullGitUserName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 57,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code GitUserName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean test(Person project) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                        project.getGitUserNameString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Teammate in the team."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private PersonName personName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private GitUserName gitUserName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private HashMap\u003cProjectName, Participation\u003e listOfParticipations \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public Person(PersonName personName, GitUserName gitUserName, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(personName, phone, email, address);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.gitUserName \u003d gitUserName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Overloaded constructor to take in listOfParticipations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public Person(PersonName personName, GitUserName gitUserName, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                  HashMap\u003cProjectName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Participation\u003e listOfParticipations) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireAllNonNull(personName, phone, email, address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.gitUserName \u003d gitUserName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.listOfParticipations \u003d listOfParticipations;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public PersonName getPersonName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return personName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public GitUserName getGitUserName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return gitUserName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public String getGitUserNameString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return gitUserName.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public HashMap\u003cProjectName, Participation\u003e getParticipations() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return this.listOfParticipations;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void updatePersonName(String newPersonNameStr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        personName \u003d new PersonName(newPersonNameStr);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void updateAddress(String newAddressStr) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        address \u003d new Address(newAddressStr);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void updatePhone(String newPhonestr) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        phone \u003d new Phone(newPhonestr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void updateEmail(String newEmailStr) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        email \u003d new Email(newEmailStr);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        listOfParticipations.put(p.getProjectName(), new Participation(this, p));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if both teammates of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * This defines a weaker notion of equality between two teammates."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean isSameTeammate(Person otherTeammate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (otherTeammate \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return otherTeammate !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherTeammate.getGitUserName().equals(getGitUserName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherTeammate.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherTeammate.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 (otherTeammate.getPersonName().equals(getPersonName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            || otherTeammate.getAddress().equals(getAddress()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if both projects have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * This defines a stronger notion of equality between two projects."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person otherProject \u003d (Person) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return otherProject.getPersonName().equals(getPersonName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getGitUserName().equals(getGitUserName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 otherProject.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return Objects.hash(personName, gitUserName, phone, email, address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        builder.append(\" Person name: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getPersonName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Git Username: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getGitUserName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            .append(getAddress());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 83,
      "-": 72,
      "lucastai98": 3,
      "lll-jy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Person\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPersonName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class PersonName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \"Names should only contain letters and single space between words, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([a-zA-Z]+\\\\s)*[a-zA-Z]+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public final String fullPersonName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Constructs a {@code PersonName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param personName A valid personName."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public PersonName(String personName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(personName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        checkArgument(isValidPersonName(personName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        fullPersonName \u003d personName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isValidPersonName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullPersonName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                || (other instanceof PersonName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 fullPersonName.equals(((PersonName) other).fullPersonName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullPersonName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Project\u0027s phone number in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at between 3 and 16 digits inclusive\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,16}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Signals that the operation will result in duplicate Projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * Represents a Project\u0027s deadline in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \"Deadline should only be in the format of dd-MM-yyyy HH:mm:ss, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    + \"and the time should only be in the format of 24-Hour\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\d{2}-\\\\d{2}-\\\\d{4} \\\\d{2}:\\\\d{2}:\\\\d{2})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @param deadline A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        value \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static boolean isValidDeadline(String test) { //todo: check if the deadline is later than the starting time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidDate \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidTime \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            String[] dateTime \u003d test.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            isValidDate \u003d isValidDate(dateTime[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            isValidTime \u003d isValidTime(dateTime[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return isValidDate \u0026\u0026 isValidTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Return true if a given string is a valid date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String[] strings \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        int day \u003d Integer.parseInt(strings[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        int month \u003d Integer.parseInt(strings[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        int year \u003d Integer.parseInt(strings[2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidDay \u003d day \u003c\u003d 31 \u0026\u0026 day \u003e\u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidMonth \u003d month \u003c\u003d 12 \u0026\u0026 month \u003e\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        //year is always valid because it matches the regex as 4 digits of integers (1000 - 9999)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (day \u003d\u003d 29 \u0026\u0026 month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            } else if (year % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                return year % 4 \u003d\u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        } else if ((day \u003d\u003d 30 || day \u003d\u003d 31) \u0026\u0026 month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        } else if (day \u003d\u003d 31 \u0026\u0026 (month \u003d\u003d 4 || month \u003d\u003d 6"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                || month \u003d\u003d 9 || month \u003d\u003d 11)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return isValidDay \u0026\u0026 isValidMonth;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Return true if a given string is a valid time."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String[] strings \u003d time.split(\":\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String hour \u003d strings[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String minute \u003d strings[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String second \u003d strings[2];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidHour \u003d Integer.parseInt(hour) \u003c\u003d 23 \u0026\u0026 Integer.parseInt(hour) \u003e\u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidMinute \u003d Integer.parseInt(minute) \u003c\u003d 59 \u0026\u0026 Integer.parseInt(minute) \u003e\u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        boolean isValidSecond \u003d Integer.parseInt(second) \u003c\u003d 59 \u0026\u0026 Integer.parseInt(second) \u003e\u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return isValidHour \u0026\u0026 isValidMinute \u0026\u0026 isValidSecond;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                \u0026\u0026 value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCQian": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code ProjectName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cProject\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean test(Project project) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    project.getProjectName().fullProjectName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 3,
      "-": 26,
      "lll-jy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Participation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " * Participation class handles the interactions between the different classes involved in the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * List of thing(s) Person can participate in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Set\u003cMeeting\u003e meetings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Constructor for Participation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public Participation(Person person, Project project) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        role \u003d Role.MEMBER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        meetings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Alternative constructor that allows specifying the role of the person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Participation(Person person, Project project, Role role) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        meetings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void changeRole(Role role) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Indicates attendance for the meeting."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @param meeting meeting to attend"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void attends(Meeting meeting) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        meetings.add(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.addMeeting(meeting);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Assigns task to the person"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param task  task to be assigned"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        project.addTask(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Checks whether the person is an attendee of the meeting."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param meeting   meeting to check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return  true if the person is an attendee of the meeting, and false otherwise"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean isAttendeeOf(Meeting meeting) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Checks whether the person has the given task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param task  the task to check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return  true if the person is assigned to do the task, and false otherwise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public GitUserName getAssigneeGitName() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return person.getGitUserName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Project getProject() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "enum Role {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    LEADER, MEMBER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "T-Fang": 53,
      "GeNiaaz": 2,
      "lll-jy": 10,
      "lucastai98": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.index.GitUserIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Represents a Project in the main catalogue."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private static final Predicate\u003cTask\u003e SHOW_ALL_TASKS_PREDICATE \u003d task -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private static final Predicate\u003cMeeting\u003e SHOW_ALL_MEETINGS_PREDICATE \u003d meeting -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final ProjectName projectName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private final RepoUrl repoUrl;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final ProjectDescription projectDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final Set\u003cProjectTag\u003e projectTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final HashMap\u003cGitUserName, Participation\u003e listOfParticipations \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private Predicate\u003cTask\u003e taskFilter \u003d SHOW_ALL_TASKS_PREDICATE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private Predicate\u003cMeeting\u003e meetingFilter \u003d SHOW_ALL_MEETINGS_PREDICATE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Set\u003cTask\u003e tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private final Set\u003cMeeting\u003e meetings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // Display helper"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Optional\u003cTask\u003e taskOnView;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Project(ProjectName projectName, Deadline deadline, RepoUrl repoUrl, ProjectDescription projectDescription,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                   Set\u003cProjectTag\u003e projectTags,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                   HashMap\u003cGitUserName, Participation\u003e listOfParticipations, Set\u003cTask\u003e tasks, Set\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        requireAllNonNull(projectName, deadline, repoUrl, projectDescription, projectTags,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            listOfParticipations, tasks, meetings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.repoUrl \u003d repoUrl;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectDescription \u003d projectDescription;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectTags.addAll(projectTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.listOfParticipations.putAll(listOfParticipations);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.taskOnView \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectName getProjectName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return projectName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public RepoUrl getRepoUrl() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return repoUrl;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectDescription getProjectDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return projectDescription;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public Set\u003cMeeting\u003e getMeetings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return meetings;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return meetings.add(meeting);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return tasks.add(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public boolean deleteTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return tasks.remove(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void updateTaskFilter(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.taskFilter \u003d predicate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void showAllTasks() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.taskFilter \u003d SHOW_ALL_TASKS_PREDICATE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void updateMeetingFilter(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.meetingFilter \u003d predicate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void showAllMeetings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.meetingFilter \u003d SHOW_ALL_MEETINGS_PREDICATE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cTask\u003e getTaskOnView() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return taskOnView;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void updateTaskOnView(Task t) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        taskOnView \u003d Optional.of(t);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Gets all attendees of a specific meeting"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Set\u003cPerson\u003e getAttendeesOfMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        HashSet\u003cPerson\u003e attendees \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (Map.Entry\u003cGitUserName, Participation\u003e entry: listOfParticipations.entrySet()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            attendees.add(entry.getValue().getPerson());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return attendees;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public Set\u003cProjectTag\u003e getProjectTags() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return Collections.unmodifiableSet(projectTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an immutable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Set\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Collections.unmodifiableSet(tasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Adds a participation instance of a Person to a project"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addParticipation(Person p) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        listOfParticipations.put("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            p.getGitUserName(), new Participation(p, this));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Checks whether the project contains a member of the given name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean hasParticipation(String gitUserName) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return listOfParticipations.containsKey(new GitUserName(gitUserName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Gets the Participation with the member name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public Participation getParticipation(String gitUserName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return listOfParticipations.get(new GitUserName(gitUserName));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Deletes the Participation with the member Git UserName."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void deleteParticipation(String gitUserName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (listOfParticipations.containsKey(new GitUserName(gitUserName))) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            listOfParticipations.remove(new GitUserName(gitUserName));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Gets the complete list of Teammates associated with this project"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public List\u003cPerson\u003e getTeammates() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cPerson\u003e listOfPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (Map.Entry\u003cGitUserName, Participation\u003e entry: listOfParticipations.entrySet()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            Person p \u003d entry.getValue().getPerson();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            listOfPersons.add(p);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return listOfPersons;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Checks if name is in teammate list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * TODO: IMPROVE THE WAY A TEAMMATE IS FOUND IN THE LIST"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean getTeammatePresence(GitUserIndex gitUserIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        boolean teammatePresent \u003d false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cPerson\u003e listOfTeammates \u003d this.getTeammates();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (Person teammate : listOfTeammates) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (teammate.getGitUserNameString().equals(gitUserIndex.getGitUserName())) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                teammatePresent \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return teammatePresent;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * returns the index of teammate found in the list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public int getTeammateIndex(GitUserIndex gitUserIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cPerson\u003e listOfTeammates \u003d this.getTeammates();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTeammates.size(); i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (listOfTeammates.get(i).getGitUserNameString().equals(gitUserIndex.getGitUserName())) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        //never reached"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Removes Teammate from Project"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * TODO: UPDATE STORAGE BY REMOVING TEAMMATE"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void removeParticipation(Person teammate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        listOfParticipations.remove(teammate.getGitUserName());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Returns the filtered list of tasks that is last shown."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public List\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return tasks.stream().filter(taskFilter).collect(Collectors.toList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Returns the filtered list of meetings that is last shown."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public List\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return meetings.stream().filter(meetingFilter).collect(Collectors.toList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if both projects of the same projectName have at least one other identity field that is the same."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * This defines a weaker notion of equality between two projects."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean isSameProject(Project otherProject) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (otherProject \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return otherProject !\u003d null"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getProjectName().equals(getProjectName())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u0026\u0026 (otherProject.getDeadline().equals(getDeadline()) || otherProject.getRepoUrl().equals(getRepoUrl()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if both projects have the same identity and data fields."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * This defines a stronger notion of equality between two projects."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project otherProject \u003d (Project) other;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return otherProject.getProjectName().equals(getProjectName())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u0026\u0026 otherProject.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u0026\u0026 otherProject.getRepoUrl().equals(getRepoUrl())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getProjectDescription().equals(getProjectDescription())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            \u0026\u0026 otherProject.getProjectTags().equals(getProjectTags())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 otherProject.getTasks().equals(getTasks());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return Objects.hash(projectName, deadline, repoUrl, projectDescription, projectTags, tasks);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        builder.append(\" Project Name: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getProjectName())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .append(\" Deadline: \")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .append(getDeadline())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .append(getRepoUrl())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" ProjectDescription: \")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(getProjectDescription())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" Project Tags: \");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        getProjectTags().forEach(builder::append);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        builder.append(\" Tasks: \");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        getTasks().forEach(builder::append);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 43,
      "GeNiaaz": 100,
      "-": 63,
      "TCQian": 16,
      "lll-jy": 55,
      "lucastai98": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a Project\u0027s Description in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProjectDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Project Descriptions can take any values, and it should not be \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * The first character of the Project Description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Constructs an {@code ProjectDescription}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param projectDescription A valid projectDescription."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectDescription(String projectDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        checkArgument(isValidProjectDescription(projectDescription), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        value \u003d projectDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isValidProjectDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                || (other instanceof ProjectDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 value.equals(((ProjectDescription) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/ProjectName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Represents a Project\u0027s name in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProjectName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * The first character of the project name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public final String fullProjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Constructs a {@code ProjectName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param projectName A valid projectName."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectName(String projectName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        checkArgument(isValidProjectName(projectName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        fullProjectName \u003d projectName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isValidProjectName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullProjectName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                || (other instanceof ProjectName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 fullProjectName.equals(((ProjectName) other).fullProjectName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return fullProjectName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 15,
      "-": 42,
      "lll-jy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/RepoUrl.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * Represents a Project\u0027s repoURL in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRepoUrl(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class RepoUrl {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The URL must start with a protocol and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"then followed by :// or @ and \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"then it must contain hostname and \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"then followed by username and \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"then followed by a repo name and \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"last part contains .git.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(([A-Za-z0-9]+@|http\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"(|s)\\\\:\\\\/\\\\/)|(http(|s)\\\\:\\\\/\\\\/[A-Za-z0-9]+@))\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"([A-Za-z0-9.]+(:\\\\d+)?)(?::|\\\\/)([\\\\d\\\\/\\\\w.-]+?)(\\\\.git){1}$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Constructs an {@code RepoUrl}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @param repoUrl A valid repoUrl address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public RepoUrl(String repoUrl) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        requireNonNull(repoUrl);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        checkArgument(isValidRepoUrl(repoUrl), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        value \u003d repoUrl;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Returns if a given string is a valid repoUrl."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static boolean isValidRepoUrl(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                || (other instanceof RepoUrl // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                \u0026\u0026 value.equals(((RepoUrl) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCQian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/UniqueProjectList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A list of projects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A project is considered unique by comparing using {@code Project#isSameProject(Project)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * updating of projects uses Project#isSameProject(Project) for equality so as to ensure that the project being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * or updated is unique in terms of identity in the UniqueProjectList. However, the removal of a project uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Project#equals(Object) so as to ensure that the project with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * @see Project#isSameProject(Project)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if the list contains an equivalent project as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Adds a project to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Project getProject(Project project) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!contains(project)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Stream\u003cProject\u003e filtered \u003d internalList.stream().filter(project::isSameProject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return internalList.get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces the project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Removes the equivalent project from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * The project must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Replaces the contents of this list with {@code projects}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if {@code projects} contains only unique projects."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "lll-jy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/DuplicateProjectException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Signals that the operation will result in duplicate Projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/ProjectNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "lll-jy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/ProjectTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Represents a ProjectTag in the main catalogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidProjectTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public final String projectTagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Constructs a {@code ProjectTag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param projectTagName A valid project tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectTag(String projectTagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        requireNonNull(projectTagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        checkArgument(isValidProjectTagName(projectTagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectTagName \u003d projectTagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static boolean isValidProjectTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                || (other instanceof ProjectTag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                \u0026\u0026 projectTagName.equals(((ProjectTag) other).projectTagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return projectTagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return \u0027[\u0027 + projectTagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 15,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Represents a Task of a project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        \"Attributes should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * The first character of an attribute must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public final String taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final LocalDate publishDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final double progress;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private Set\u003cParticipation\u003e assignees;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * name, progress, and isDone should be present and not null. description and deadline can be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Task(String taskName, String description, Deadline deadline, double progress, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireAllNonNull(taskName, progress, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        publishDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.progress \u003d progress;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.assignees \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Returns true if a given string is a valid attribute."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static boolean isValidAttribute(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public LocalDate getPublishDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return publishDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public double getProgress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return progress;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public Set\u003cParticipation\u003e getAssignees() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return assignees;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean hasAssignee(Participation assignee) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return assignees.contains(assignee);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Checks if the task has an assignee whose name matches the given name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * @param assigneeGitUserName the assignee\u0027s name to look for"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return true if this task has an assignee whose name matches the given name,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * and false otherwise"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean hasAssigneeWhoseGitNameIs(GitUserName assigneeGitUserName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return assignees.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            .anyMatch(assignee -\u003e assignee.getAssigneeGitName().equals(assigneeGitUserName));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * Checks if the task is due on the given deadline."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @param deadline  the given deadline to check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     * @return  true if the task is due on the given deadline, and false otherwise"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean isDueOn(Deadline deadline) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assert (deadline !\u003d null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        if (this.deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            return this.deadline.equals(deadline);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public boolean addAssignee(Participation assignee) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        return assignees.add(assignee);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns true if all fields are equal."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Double.compare(task.getProgress(), getProgress()) \u003d\u003d 0"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 getTaskName().equals(task.getTaskName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 (getDescription() \u003d\u003d task.getDescription() || getDescription().equals(task.getDescription()))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 getPublishDate().equals(task.getPublishDate())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            \u0026\u0026 Objects.equals(getDeadline(), task.getDeadline());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Objects.hash(getTaskName(), getDescription(), getPublishDate(), getDeadline(), getProgress(), isDone());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"[\" + taskName + \"]\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // TODO: may add isValidTask method."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 59,
      "GeNiaaz": 2,
      "lll-jy": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Contains utility methods for populating {@code MainCatalogue} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new Project[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Aeroknotty\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new ProjectDescription(\"Made for pilots wanting to tie the \" + \"knot\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTagSet(\"creative\"), new HashMap\u003c\u003e(), getTaskSet(\"Refactor project class\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getMeetingSet(\"2020-10-10\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Basket Web\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    new ProjectDescription(\"Puts all your ususal searches into one place\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    getTagSet(\"internet\", \"iot\"), new HashMap\u003c\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTaskSet(\"Brainstorm user stories\", \"Refine data model\"), getMeetingSet(\"2020-10-10\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Charletan\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new ProjectDescription(\"To nurture a more informed people\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTagSet(\"neighbours\"), new HashMap\u003c\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTaskSet(\"Write UG\"), getMeetingSet(\"2020-10-10\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Dacharie\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    new ProjectDescription(\"kitchen knife subscription service\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTagSet(\"family\"), new HashMap\u003c\u003e(), getTaskSet(\"Delete ProjectDescription attribute\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getMeetingSet(\"2020-10-10\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Iterab\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"), new ProjectDescription(\"Habit tracker\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTagSet(\"classmates\"), new HashMap\u003c\u003e(), getTaskSet(), getMeetingSet(\"2020-10-10\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new Project(new ProjectName(\"Reuletan\"), new Deadline(\"21-04-2021 00:00:00\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new RepoUrl(\"http://github.com/a/b.git\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    new ProjectDescription(\"Brings low cost investment to the \" + \"masses\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                    getTagSet(\"colleagues\"), new HashMap\u003c\u003e(), getTaskSet(\"Write DG\"), getMeetingSet(\"2020-10-10\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static ReadOnlyMainCatalogue getSampleMainCatalogue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue sampleAb \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (Project sampleProject : getSampleProjects()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            sampleAb.addProject(sampleProject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static Set\u003cProjectTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .map(ProjectTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns a task set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Set\u003cTask\u003e getTaskSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .map(s -\u003e new Task(s, null, null, 0, false))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Returns a meeting set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public static Set\u003cMeeting\u003e getMeetingSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                .map(Meeting::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 14,
      "-": 28,
      "TCQian": 5,
      "lll-jy": 21,
      "lucastai98": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private final String repoUrl;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final String projectDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e projectTagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e projectOccupied \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"projectName\") String projectName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                                @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                                @JsonProperty(\"repoUrl\") String repoUrl,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                                @JsonProperty(\"projectDescription\") String projectDescription,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                                @JsonProperty(\"projectTag\") List\u003cJsonAdaptedTag\u003e projectTagged,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                                @JsonProperty(\"occupied\") List\u003cJsonAdaptedTask\u003e projectOccupied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.repoUrl \u003d repoUrl;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectDescription \u003d projectDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (projectTagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            this.projectTagged.addAll(projectTagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (projectOccupied !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.projectOccupied.addAll(projectOccupied);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectName \u003d source.getProjectName().fullProjectName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        deadline \u003d source.getDeadline().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        repoUrl \u003d source.getRepoUrl().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectDescription \u003d source.getProjectDescription().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectTagged.addAll(source.getProjectTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectOccupied.addAll(source.getTasks().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final List\u003cProjectTag\u003e projectProjectTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        for (JsonAdaptedTag projectTag : projectTagged) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            projectProjectTags.add(projectTag.toModelType());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final List\u003cTask\u003e projectTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        final List\u003cMeeting\u003e projectMeetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (JsonAdaptedTask task : projectOccupied) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            projectTasks.add(task.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ProjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectName.isValidProjectName(projectName)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new IllegalValueException(ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final ProjectName modelProjectName \u003d new ProjectName(projectName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (repoUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, RepoUrl.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!RepoUrl.isValidRepoUrl(repoUrl)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new IllegalValueException(RepoUrl.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        final RepoUrl modelRepoUrl \u003d new RepoUrl(repoUrl);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (projectDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                ProjectDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectDescription.isValidProjectDescription(projectDescription)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new IllegalValueException(ProjectDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final ProjectDescription modelProjectDescription \u003d new ProjectDescription(projectDescription);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final Set\u003cProjectTag\u003e modelProjectTags \u003d new HashSet\u003c\u003e(projectProjectTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final Set\u003cTask\u003e modelTasks \u003d new HashSet\u003c\u003e(projectTasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        final Set\u003cMeeting\u003e modelMeetings \u003d new HashSet\u003c\u003e(projectMeetings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return new Project(modelProjectName, modelDeadline, modelRepoUrl, modelProjectDescription,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "            modelProjectTags, new HashMap\u003c\u003e(), modelTasks, modelMeetings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 31,
      "-": 49,
      "TCQian": 23,
      "lll-jy": 25,
      "lucastai98": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Jackson-friendly version of {@link ProjectTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Converts a given {@code ProjectTag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public JsonAdaptedTag(ProjectTag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        tagName \u003d source.projectTagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code ProjectTag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (!ProjectTag.isValidProjectTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            throw new IllegalValueException(ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new ProjectTag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 10,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public final String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final LocalDate publishDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final double progress;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    private final Set\u003cParticipation\u003e assignees;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given {@code taskName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonAdaptedTask(String taskName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //            , String description, LocalDate publishDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //                           Deadline deadline, double progress, boolean isDone,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //                           Set\u003cParticipation\u003e assignees) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.publishDate \u003d publishDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.progress \u003d progress;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        this.assignees \u003d assignees;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        taskName \u003d source.taskName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        publishDate \u003d source.getPublishDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        deadline \u003d source.getDeadline();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        progress \u003d source.getProgress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        //        assignees \u003d source.getAssignees();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public LocalDate getPublishDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return publishDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public double getProgress() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return progress;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public boolean isDone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    @JsonValue"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    public Set\u003cParticipation\u003e getAssignees() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //        return assignees;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new Task(taskName, null, null, 0, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 44,
      "lucastai98": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMainCatalogueStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A class to access MainCatalogue data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class JsonMainCatalogueStorage implements MainCatalogueStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMainCatalogueStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonMainCatalogueStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Path getMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return readMainCatalogue(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Similar to {@link #readMainCatalogue()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Optional\u003cJsonSerializableMainCatalogue\u003e jsonMainCatalogue \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                filePath, JsonSerializableMainCatalogue.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!jsonMainCatalogue.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return Optional.of(jsonMainCatalogue.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        saveMainCatalogue(mainCatalogue, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Similar to {@link #saveMainCatalogue(ReadOnlyMainCatalogue)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        requireNonNull(mainCatalogue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMainCatalogue(mainCatalogue), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "lll-jy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMainCatalogue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * An Immutable MainCatalogue that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "@JsonRootName(value \u003d \"maincatalogue\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "class JsonSerializableMainCatalogue {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Projects list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Constructs a {@code JsonSerializableMainCatalogue} with the given projects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonSerializableMainCatalogue(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts a given {@code ReadOnlyMainCatalogue} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMainCatalogue}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public JsonSerializableMainCatalogue(ReadOnlyMainCatalogue source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Converts this main catalogue into the model\u0027s {@code MainCatalogue} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue mainCatalogue \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (mainCatalogue.hasProject(project)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            mainCatalogue.addProject(project);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "lll-jy": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MainCatalogueStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Represents a storage for {@link MainCatalogue}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public interface MainCatalogueStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Path getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns MainCatalogue data as a {@link ReadOnlyMainCatalogue}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @see #getMainCatalogueFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Saves the given {@link ReadOnlyMainCatalogue} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @param mainCatalogue cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @see #saveMainCatalogue(ReadOnlyMainCatalogue)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "lll-jy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public interface Storage extends MainCatalogueStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Path getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "lll-jy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Manages storage of MainCatalogue data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private MainCatalogueStorage mainCatalogueStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code MainCatalogueStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public StorageManager(MainCatalogueStorage mainCatalogueStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.mainCatalogueStorage \u003d mainCatalogueStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MainCatalogue methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Path getMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogueStorage.getMainCatalogueFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return readMainCatalogue(mainCatalogueStorage.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue(Path filePath)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogueStorage.readMainCatalogue(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        saveMainCatalogue(mainCatalogue, mainCatalogueStorage.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogueStorage.saveMainCatalogue(mainCatalogue, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "lll-jy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EmptyProjectDashboard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * An UI component that displays message of a empty dashboard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class EmptyProjectDashboard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String FXML \u003d \"EmptyProjectDashboard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String EMPTY_DASHBOARD_MSG \u003d \"No project to be shown here.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Creates a {@code ProjectDashboardCode} with the given {@code Project} and index to display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public EmptyProjectDashboard() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        message.setText(EMPTY_DASHBOARD_MSG);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!(other instanceof EmptyProjectDashboard)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        EmptyProjectDashboard card \u003d (EmptyProjectDashboard) other;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return message.getText().equals(card.message.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCQian": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private ProjectDashboard projectDashboard;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private EmptyProjectDashboard emptyProjectDashboard;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private StackPane projectDashboardPlaceHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList(), logic.getStatus());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (logic.getProjectToBeDisplayedOnDashBoard().isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            emptyProjectDashboard \u003d new EmptyProjectDashboard();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            projectDashboardPlaceHolder.getChildren().add(emptyProjectDashboard.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            projectDashboard \u003d new ProjectDashboard(logic.getProjectToBeDisplayedOnDashBoard());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            projectDashboardPlaceHolder.getChildren().add(projectDashboard.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ProjectListPanel getProjectListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return projectListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fillInnerParts();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 191,
      "TCQian": 11,
      "lll-jy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MainCatalogue level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Label projectName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates a {@code ProjectCode} with the given {@code Project} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectName.setText(project.getProjectName().fullProjectName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        deadline.setText(project.getDeadline().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.getProjectTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .sorted(Comparator.comparing(projectTag -\u003e projectTag.projectTagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .forEach(projectTag -\u003e this.tags.getChildren()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .add(new Label(projectTag.projectTagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 6,
      "-": 52,
      "TCQian": 4,
      "lll-jy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectDashboard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class ProjectDashboard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String FXML \u003d \"ProjectDashboard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MainCatalogue level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private HBox dashboardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label projectName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label projectDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label repoUrl;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label header1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label header2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Label header3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private FlowPane teammates;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private FlowPane tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Creates a {@code ProjectDashboardCode} with the given {@code Project} and index to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public ProjectDashboard(Optional\u003cProject\u003e project) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.project \u003d project.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        projectName.setText(this.project.getProjectName().fullProjectName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        deadline.setText(\"Project deadline: \" + this.project.getDeadline().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        header1.setText(\"Project tags: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.project.getProjectTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                .sorted(Comparator.comparing(projectTag -\u003e projectTag.projectTagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                .forEach(projectTag -\u003e this.tags.getChildren()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                        .add(new Label(projectTag.projectTagName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        projectDescription.setText(\"Project description: \" + this.project.getProjectDescription().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        repoUrl.setText(\"Project repourl: \" + this.project.getRepoUrl().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        header2.setText(\"Tasks: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        this.project.getFilteredTaskList()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                .forEach(task -\u003e tasks.getChildren().add(new Label(task.taskName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        header3.setText(\"Teammates: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.project.getTeammates().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .forEach(person -\u003e teammates.getChildren().add(new Label((person.getGitUserNameString()))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        if (!(other instanceof ProjectDashboard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        ProjectDashboard card \u003d (ProjectDashboard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        return project.equals(card.project);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 1,
      "TCQian": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates a {@code ProjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList, Status status) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "TCQian": 2,
      "lll-jy": 15
    }
  },
  {
    "path": "src/main/resources/view/EmptyProjectDashboard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003cLabel fx:id\u003d\"message\" text\u003d\"\\$message\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "TCQian": 10
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                    \u003cVBox fx:id\u003d\"projectList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cVBox minWidth\u003d\"340.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"182.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                     \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"projectDashboardPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "TCQian": 21,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/resources/view/ProjectDashboard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"480.0\" prefWidth\u003d\"720.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"91.0\" prefWidth\u003d\"700.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cLabel id\u003d\"dashboardLabel\" fx:id\u003d\"projectName\" prefHeight\u003d\"84.0\" prefWidth\u003d\"693.0\" styleClass\u003d\"cell_big_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$first\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                        \u003cFont size\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardH1\" fx:id\u003d\"header1\" prefHeight\u003d\"74.0\" prefWidth\u003d\"687.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$header1\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cFlowPane id\u003d\"dashboardPT\" fx:id\u003d\"tags\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"67.0\" prefWidth\u003d\"700.0\" stylesheets\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardDeadline\" fx:id\u003d\"deadline\" prefHeight\u003d\"82.0\" prefWidth\u003d\"694.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$deadline\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardPD\" fx:id\u003d\"projectDescription\" prefHeight\u003d\"85.0\" prefWidth\u003d\"688.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$projectDescription\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardRU\" fx:id\u003d\"repoUrl\" prefHeight\u003d\"74.0\" prefWidth\u003d\"687.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$repoUrl\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardH2\" fx:id\u003d\"header2\" prefHeight\u003d\"74.0\" prefWidth\u003d\"687.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$header1\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cFlowPane id\u003d\"dashboardTask\" fx:id\u003d\"tasks\" layoutX\u003d\"25.0\" layoutY\u003d\"412.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"75.0\" prefWidth\u003d\"700.0\" stylesheets\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cLabel id\u003d\"dashboardH3\" fx:id\u003d\"header3\" prefHeight\u003d\"74.0\" prefWidth\u003d\"687.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@Extensions.css\" text\u003d\"\\$header2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                  \u003cFont size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            \u003cFlowPane id\u003d\"dashboardTM\" fx:id\u003d\"teammates\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"75.0\" prefWidth\u003d\"700.0\" stylesheets\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "TCQian": 63
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        \u003cLabel fx:id\u003d\"projectName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "TCQian": 9,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "  \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "lll-jy": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "TCQian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final Index fifthProjectIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(fifthProjectIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "lll-jy": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPOURL_DESC_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.AI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.storage.JsonMainCatalogueStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonMainCatalogueStorage mainCatalogueStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new JsonMainCatalogueStorage(temporaryFolder.resolve(\"mainCatalogue.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mainCatalogueStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // Setup LogicManager with JsonMainCatalogueIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonMainCatalogueStorage mainCatalogueStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new JsonMainCatalogueIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMainCatalogue.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mainCatalogueStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + PROJECT_NAME_DESC_AMY + DEADLINE_DESC_A + REPOURL_DESC_A"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AI).withTags().withTasks().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.addProject(expectedProject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredProjectList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static class JsonMainCatalogueIoExceptionThrowingStub extends JsonMainCatalogueStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        private JsonMainCatalogueIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 5,
      "-": 132,
      "TCQian": 4,
      "lll-jy": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_NAME_A \u003d \"ToastAI\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_NAME_B \u003d \"Coders without Borders\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_DEADLINE_A \u003d \"21-03-2020 10:00:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_DEADLINE_B \u003d \"31-12-2020 10:00:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String VALID_REPOURL_A \u003d \"https://github.com/valid/a.git\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String VALID_REPOURL_B \u003d \"https://github.com/valid/b.git\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_DESCRIPTION_A \u003d \"Bring AI into every toaster\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_DESCRIPTION_B \u003d \"Better people through code\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_TAG_A \u003d \"hang\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_TAG_B \u003d \"fiend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_PROJECT_TAG_DG \u003d \"DG\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String VALID_TASK_MODEL \u003d \"model\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    //TODO: after Parsing of tasks is refined, may update these to be more meaningful"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_NAME_DESC_AMY \u003d \" \" + PREFIX_PROJECT_NAME + VALID_PROJECT_NAME_A;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_NAME_DESC_BOB \u003d \" \" + PREFIX_PROJECT_NAME + VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String DEADLINE_DESC_A \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_A;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String DEADLINE_DESC_B \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String REPOURL_DESC_A \u003d \" \" + PREFIX_REPOURL + VALID_REPOURL_A;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String REPOURL_DESC_B \u003d \" \" + PREFIX_REPOURL + VALID_REPOURL_B;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_PROJECT_DESCRIPTION"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + VALID_PROJECT_DESCRIPTION_A;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_PROJECT_DESCRIPTION"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_TAG_DESC_FRIEND \u003d \" \" + PREFIX_PROJECT_TAG + VALID_PROJECT_TAG_B;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String PROJECT_TAG_DESC_HUSBAND \u003d \" \" + PREFIX_PROJECT_TAG + VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TASK_DESC_DG \u003d \" \" + PREFIX_TASK + VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String TASK_DESC_MODEL \u003d \" \" + PREFIX_TASK + VALID_TASK_MODEL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_PROJECT_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"29/02/1999 00:00:00\"; // \u0027-\u0027 is used instead of \u0027/\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String INVALID_REPOURL_DESC \u003d \" \" + PREFIX_REPOURL"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + \"https://github.com/a/b\"; // missing \u0027.git\u0027 part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_PROJECT_DESCRIPTION_DESC \u003d \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + PREFIX_PROJECT_DESCRIPTION; // empty string not allowed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    // for addresses"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_PROJECT_TAG_DESC \u003d \" \" + PREFIX_PROJECT_TAG"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final EditCommand.EditProjectDescriptor DESC_A;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final EditCommand.EditProjectDescriptor DESC_B;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        DESC_A \u003d new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_A)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withDeadline(VALID_DEADLINE_A).withRepoUrl(VALID_REPOURL_A).withProjectDescription("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_PROJECT_DESCRIPTION_A)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_B).withTasks(VALID_PROJECT_TAG_DG, VALID_TASK_MODEL).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        DESC_B \u003d new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_B)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withDeadline(VALID_DEADLINE_B).withRepoUrl(VALID_REPOURL_B).withProjectDescription("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_PROJECT_DESCRIPTION_B)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_A, VALID_PROJECT_TAG_B).withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * - the main catalogue, filtered project list and selected project in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        MainCatalogue expectedMainCatalogue \u003d new MainCatalogue(actualModel.getProjectCatalogue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        List\u003cProject\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(expectedMainCatalogue, actualModel.getProjectCatalogue());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the project at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * {@code model}\u0027s main catalogue."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static void showProjectAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final String[] splitName \u003d project.getProjectName().fullProjectName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(1, model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 37,
      "-": 73,
      "TCQian": 15,
      "lll-jy": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditProjectDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class EditProjectDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        EditProjectDescriptor descriptorWithSameValues \u003d new EditProjectDescriptor(DESC_A);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(DESC_A.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(DESC_A.equals(DESC_A));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(DESC_B));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        EditProjectDescriptor editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectName(VALID_PROJECT_NAME_B).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A).withDeadline(VALID_DEADLINE_B).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A).withRepoUrl(VALID_REPOURL_B).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A).withProjectDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A).withTags(VALID_PROJECT_TAG_A).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different tasks -\u003e return false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_A).withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(DESC_A.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 11,
      "-": 32,
      "TCQian": 17,
      "lll-jy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TeammateTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_GIT_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAMMATE_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class TeammateTestUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    // Raw input data testcases"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_NAME_A \u003d \"Jack Nicholson\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_NAME_B \u003d \"Tate Mcrae\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_NAME_C \u003d \"Halsey Mood\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_GIT_USERNAME_A \u003d \"Sparrow32\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_GIT_USERNAME_B \u003d \"Tatey\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_GIT_USERNAME_C \u003d \"Modi\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_PHONE_A \u003d \"92883923\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_PHONE_B \u003d \"92824833\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_PHONE_C \u003d \"83928444\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_EMAIL_A \u003d \"jack@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_EMAIL_B \u003d \"rae1992@hotmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_EMAIL_C \u003d \"modi5001000@live.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_ADDRESS_A \u003d \"32 Lake Road\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_ADDRESS_B \u003d \"4 Hacker Way\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String VALID_TEAMMATE_ADDRESS_C \u003d \"13 Three Quarters\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    // Valid User input with prefixes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_NAME_DESC_A \u003d \" \" + PREFIX_TEAMMATE_NAME + VALID_TEAMMATE_NAME_A;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_NAME_DESC_B \u003d \" \" + PREFIX_TEAMMATE_NAME + VALID_TEAMMATE_NAME_B;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_NAME_DESC_C \u003d \" \" + PREFIX_TEAMMATE_NAME + VALID_TEAMMATE_NAME_C;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_GIT_USERNAME_DESC_A \u003d \" \" + PREFIX_TEAMMATE_GIT_USERNAME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + VALID_TEAMMATE_GIT_USERNAME_A;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_GIT_USERNAME_DESC_B \u003d \" \" + PREFIX_TEAMMATE_GIT_USERNAME"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + VALID_TEAMMATE_GIT_USERNAME_B;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_GIT_USERNAME_DESC_C \u003d \" \" + PREFIX_TEAMMATE_GIT_USERNAME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + VALID_TEAMMATE_GIT_USERNAME_C;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_PHONE_DESC_A \u003d \" \" + PREFIX_TEAMMATE_PHONE + VALID_TEAMMATE_PHONE_A;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_PHONE_DESC_B \u003d \" \" + PREFIX_TEAMMATE_PHONE + VALID_TEAMMATE_PHONE_B;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_PHONE_DESC_C \u003d \" \" + PREFIX_TEAMMATE_PHONE + VALID_TEAMMATE_PHONE_C;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_EMAIL_DESC_A \u003d \" \" + PREFIX_TEAMMATE_EMAIL + VALID_TEAMMATE_EMAIL_A;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_EMAIL_DESC_B \u003d \" \" + PREFIX_TEAMMATE_EMAIL + VALID_TEAMMATE_EMAIL_B;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_EMAIL_DESC_C \u003d \" \" + PREFIX_TEAMMATE_EMAIL + VALID_TEAMMATE_EMAIL_C;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_ADDRESS_DESC_A \u003d \" \" + PREFIX_TEAMMATE_ADDRESS + VALID_TEAMMATE_ADDRESS_A;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_ADDRESS_DESC_B \u003d \" \" + PREFIX_TEAMMATE_ADDRESS + VALID_TEAMMATE_ADDRESS_B;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String TEAMMATE_ADDRESS_DESC_C \u003d \" \" + PREFIX_TEAMMATE_ADDRESS + VALID_TEAMMATE_ADDRESS_C;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    // Invalid user input with prefixes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_TEAMMATE_NAME_DESC_A \u003d \" \" + PREFIX_TEAMMATE_NAME + \"jack#$%\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_TEAMMATE_GIT_USERNAME_DESC_A \u003d \" \" + PREFIX_TEAMMATE_GIT_USERNAME"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        + \"May Theresa\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_TEAMMATE_PHONE_DESC_A \u003d \" \" + PREFIX_TEAMMATE_PHONE + \"3818djfjjd\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_TEAMMATE_EMAIL_DESC_A \u003d \" \" + PREFIX_TEAMMATE_EMAIL + \"hey @\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String INVALID_TEAMMATE_ADDRESS_DESC_A \u003d \" \" + PREFIX_TEAMMATE_ADDRESS + \"  the Platform  \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_newProject_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.addProject(validProject);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(new AddCommand(validProject), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validProject), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Project projectInList \u003d model.getProjectCatalogue().getProjectList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(new AddCommand(projectInList), model, AddCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "TCQian": 2,
      "lll-jy": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelStubAcceptingProjectAdded modelStub \u003d new ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validProject).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validProject), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(Arrays.asList(validProject), modelStub.projectsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validProject);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validProject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PROJECT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project alice \u003d new ProjectBuilder().withProjectName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project bob \u003d new ProjectBuilder().withProjectName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public Path getProjectCatalogueFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public void setProjectCatalogueFilePath(Path mainCatalogueFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public void setProjectCatalogue(ReadOnlyMainCatalogue newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public ReadOnlyMainCatalogue getProjectCatalogue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public Status getStatus() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void enter(Project project) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void quit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void enterTask(Task task) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public void updateProjectToBeDisplayedOnDashboard(Project project) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public Optional\u003cProject\u003e getProjectToBeDisplayedOnDashboard() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void updateTaskToBeDisplayedOnDashboard(Task task) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public Optional\u003cTask\u003e getTaskToBeDisplayedOnDashboard() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * A Model stub that contains a single project."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        private final Project project;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelStubWithProject(Project project) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return this.project.isSameProject(project);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * A Model stub that always accept the project being added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final ArrayList\u003cProject\u003e projectsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return projectsAdded.stream().anyMatch(project::isSameProject);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            projectsAdded.add(project);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        public ReadOnlyMainCatalogue getProjectCatalogue() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new MainCatalogue();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 144,
      "TCQian": 16,
      "lll-jy": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_emptyMainCatalogue_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_nonEmptyMainCatalogue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        expectedModel.setProjectCatalogue(new MainCatalogue());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "TCQian": 1,
      "lll-jy": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showNoProject(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of main catalogue list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectCatalogue().getProjectList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private void showNoProject(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.updateFilteredProjectList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(model.getFilteredProjectList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "TCQian": 3,
      "lll-jy": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(editedProject).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MainCatalogue(model.getProjectCatalogue()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0), editedProject);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index indexLastProject \u003d Index.fromOneBased(model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project lastProject \u003d model.getFilteredProjectList().get(indexLastProject.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ProjectBuilder projectInList \u003d new ProjectBuilder(lastProject);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedProject \u003d projectInList.withProjectName(VALID_PROJECT_NAME_B).withDeadline(VALID_DEADLINE_B)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_A).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_B)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withDeadline(VALID_DEADLINE_B).withTags(VALID_PROJECT_TAG_A).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastProject, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MainCatalogue(model.getProjectCatalogue()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.setProject(lastProject, editedProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, new EditProjectDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project editedProject \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MainCatalogue(model.getProjectCatalogue()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectInFilteredList \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder(projectInFilteredList).withProjectName("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_NAME_B).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_B).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MainCatalogue(model.getProjectCatalogue()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0), editedProject);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_duplicateProjectUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project firstProject \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(firstProject).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PROJECT, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_duplicateProjectFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // edit project in filtered list into a duplicate in main catalogue"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Project projectInList \u003d model.getProjectCatalogue().getProjectList().get(INDEX_SECOND_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new EditProjectDescriptorBuilder(projectInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidProjectIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withProjectName("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_NAME_B).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * but smaller than size of main catalogue"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidProjectIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of main catalogue list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectCatalogue().getProjectList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_B).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, DESC_A);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        EditProjectDescriptor copyDescriptor \u003d new EditProjectDescriptor(DESC_A);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PROJECT, copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PROJECT, DESC_A)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PROJECT, DESC_B)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 13,
      "-": 99,
      "TCQian": 12,
      "lll-jy": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.global.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "lll-jy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.CARACTIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.ELFIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.FANS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_zeroKeywords_noProjectFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_multipleKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Caractive Elfie Fans\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(Arrays.asList(CARACTIVE, ELFIE, FANS), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 5,
      "-": 64,
      "lll-jy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.global.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "lll-jy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "TCQian": 1,
      "lll-jy": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * {@code StartCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(StartCommand.MESSAGE_START_PROJECT_SUCCESS, projectToStart);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(projectToStart);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(StartCommand.MESSAGE_START_PROJECT_SUCCESS, projectToStart);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(projectToStart);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of main catalogue list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectCatalogue().getProjectList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startFirstCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startSecondCommand \u003d new StartCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand startFirstCommandCopy \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(startFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(startFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(startFirstCommand.equals(startSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_validIndexInvalidPerson_throwsCommandException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.deleteParticipation(ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertCommandFailure(assignCommand, model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            String.format(Messages.MESSAGE_MEMBER_NOT_PRESENT, ALICE.getGitUserName()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/AssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Participation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexInvalidPerson_throwsCommandException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.deleteParticipation(ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(assignCommand, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            String.format(Messages.MESSAGE_MEMBER_NOT_PRESENT, ALICE.getGitUserName()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidIndexValidPerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(project.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.addParticipation(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(outOfBoundIndex, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexPersonInvalidAssign_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.addParticipation(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToAssign \u003d project.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Participation assignee \u003d project.getParticipation(ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assignee.addTask(taskToAssign);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(assignCommand, model, String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                Messages.MESSAGE_REASSIGNMENT_OF_SAME_TASK_TO_SAME_PERSON, assignee.getAssigneeGitName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexValidPersonUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.addParticipation(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToAssign \u003d project.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Participation assignee \u003d project.getParticipation(ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_TASK_SUCCESS, taskToAssign, assignee);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        Project projectCopy \u003d new Project(project.getProjectName(), project.getDeadline(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                project.getRepoUrl(), project.getProjectDescription(), project.getProjectTags(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                new HashMap\u003c\u003e(), project.getTasks(), project.getMeetings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectCopy.addParticipation(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // TODO: After refining Participation getters and setters this part can be done fully via getters"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.setProject(project, projectCopy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(projectCopy);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .getParticipation(ALICE.getGitUserNameString()).addTask(taskToAssign);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexValidPersonFilteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.addParticipation(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.updateTaskFilter(x -\u003e true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToAssign \u003d project.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Participation assignee \u003d project.getParticipation(ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.updateTaskFilter(task -\u003e task.getTaskName().contains(taskToAssign.getTaskName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_TASK_SUCCESS, taskToAssign, assignee);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectCopy \u003d new Project(project.getProjectName(), project.getDeadline(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                project.getRepoUrl(), project.getProjectDescription(), project.getProjectTags(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new HashMap\u003c\u003e(), project.getTasks(), project.getMeetings());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        projectCopy.addParticipation(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.setProject(project, projectCopy);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(projectCopy);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .getParticipation(ALICE.getGitUserNameString()).addTask(taskToAssign);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String name \u003d ALICE.getGitUserNameString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AssignCommand assignFirstCommand \u003d new AssignCommand(INDEX_FIRST_TASK, name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AssignCommand assignSecondCommand \u003d new AssignCommand(INDEX_SECOND_TASK, name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AssignCommand assignNullPerson \u003d new AssignCommand(INDEX_FIRST_TASK, \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(assignFirstCommand.equals(assignFirstCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AssignCommand assignFirstCommandCopy \u003d new AssignCommand(INDEX_FIRST_TASK, name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(assignFirstCommand.equals(assignFirstCommandCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(assignFirstCommand.equals(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(assignFirstCommand.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(assignFirstCommand.equals(assignSecondCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(assignFirstCommand.equals(assignNullPerson));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 1,
      "GeNiaaz": 14,
      "lll-jy": 133,
      "lucastai98": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/LeaveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * {@code StartCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class LeaveCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(projectToStart);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LeaveCommand leaveCommand \u003d new LeaveCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d LeaveCommand.MESSAGE_LEAVE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(leaveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new LeaveCommand(), new LeaveCommand());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/NewTeammateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.AI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Contains tests regarding NewTeammateCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class NewTeammateCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_invalidPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new NewTeammateCommand(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_invalidModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand \u003d new NewTeammateCommand(DESC_A);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            newTeammateCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_validModel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand \u003d new NewTeammateCommand(DESC_A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        model.updateProjectToBeDisplayedOnDashboard(AI);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedResult \u003d String.format(NewTeammateCommand.MESSAGE_ASSIGN_TASK_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            DESC_A.getGitUserNameString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        CommandResult commandResult \u003d newTeammateCommand.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedResult, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand1 \u003d new NewTeammateCommand(DESC_A);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand2 \u003d new NewTeammateCommand(DESC_B);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand3 \u003d new NewTeammateCommand(DESC_C);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(newTeammateCommand1.equals(newTeammateCommand1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        NewTeammateCommand newTeammateCommand1copy \u003d new NewTeammateCommand(DESC_A);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(newTeammateCommand1.equals(newTeammateCommand1copy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(newTeammateCommand1.equals(\"this test will return false\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(newTeammateCommand1.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different tasks -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(newTeammateCommand1.equals(newTeammateCommand2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(newTeammateCommand2.equals(newTeammateCommand3));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/TaskFilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "class TaskFilterCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    void execute_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskFilterCommand(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    //TODO: will add more when meeting filter is implemented"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/project/ViewTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ViewTaskCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(project.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskCommand \u003d new ViewTaskCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandFailure(viewTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToView \u003d project.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskCommand \u003d new ViewTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(ViewTaskCommand.MESSAGE_VIEW_TASK_SUCCESS, taskToView);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(project);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enterTask(taskToView);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(viewTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMainCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        model.enter(project);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.updateTaskFilter(x -\u003e true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task taskToView \u003d project.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.updateTaskFilter(task -\u003e task.getTaskName().contains(taskToView.getTaskName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskCommand \u003d new ViewTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectCatalogue(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String expectedMessage \u003d String.format(ViewTaskCommand.MESSAGE_VIEW_TASK_SUCCESS, taskToView);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enter(project);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedModel.enterTask(taskToView);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertCommandSuccess(viewTaskCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String name \u003d ALICE.getPersonName().fullPersonName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskFirstCommand \u003d new ViewTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskSecondCommand \u003d new ViewTaskCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(viewTaskFirstCommand.equals(viewTaskFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand viewTaskFirstCommandCopy \u003d new ViewTaskCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(viewTaskFirstCommand.equals(viewTaskFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(viewTaskFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(viewTaskFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(viewTaskFirstCommand.equals(viewTaskSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REPOURL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPOURL_DESC_A;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPOURL_DESC_B;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_DG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_MODEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_B;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_B;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.AI;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.BOT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(BOT).withTags(VALID_PROJECT_TAG_B).withTasks("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + REPOURL_DESC_B"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG, new AddCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProject));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // multiple project names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_AMY + PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + REPOURL_DESC_B + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG, new AddCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProject));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_A + DEADLINE_DESC_B"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + REPOURL_DESC_B + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG, new AddCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProject));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // multiple repoUrl - last repoUrl accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_A"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + REPOURL_DESC_B + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG, new AddCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProject));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + PROJECT_DESCRIPTION_DESC_AMY + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + TASK_DESC_DG, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // multiple project tags - all accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project expectedProjectMultipleTags \u003d new ProjectBuilder(BOT).withTags(VALID_PROJECT_TAG_B,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG, new AddCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProjectMultipleTags));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // multiple tasks - all accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project expectedProjectMultipleTasks \u003d new ProjectBuilder(BOT).withTasks(VALID_PROJECT_TAG_DG, VALID_TASK_MODEL)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_TAG_DESC_FRIEND + PROJECT_TAG_DESC_HUSBAND + TASK_DESC_DG + TASK_DESC_MODEL,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new AddCommand(expectedProjectMultipleTasks));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AI).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseSuccess(parser, PROJECT_NAME_DESC_AMY + DEADLINE_DESC_A + REPOURL_DESC_A"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + TASK_DESC_DG + TASK_DESC_MODEL, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, VALID_PROJECT_NAME_B + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, PROJECT_NAME_DESC_BOB + VALID_DEADLINE_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + VALID_REPOURL_B"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + VALID_PROJECT_DESCRIPTION_B,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, VALID_PROJECT_NAME_B + VALID_DEADLINE_B + VALID_REPOURL_B"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + VALID_PROJECT_DESCRIPTION_B,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid project name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND, ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            PROJECT_NAME_DESC_BOB + INVALID_DEADLINE_DESC + REPOURL_DESC_B"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // invalid repoUrl"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + INVALID_REPOURL_DESC"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND, RepoUrl.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid project description"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B + INVALID_PROJECT_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND, ProjectDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid project tag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B + REPOURL_DESC_B + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + INVALID_PROJECT_TAG_DESC + VALID_PROJECT_TAG_B, ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_B + REPOURL_DESC_B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + INVALID_PROJECT_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PROJECT_NAME_DESC_BOB + DEADLINE_DESC_B"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + REPOURL_DESC_B"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + PROJECT_DESCRIPTION_DESC_BOB + PROJECT_TAG_DESC_HUSBAND + PROJECT_TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // TODO: may add task if validation is refined."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 69,
      "-": 64,
      "TCQian": 34,
      "lll-jy": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * outside of the AssignCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * same path through the AssignCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_validArgs_returnsAssignCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseSuccess(parser, \"1 Allie32\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "lll-jy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "lll-jy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROJECT_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REPOURL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROJECT_TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPOURL_DESC_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REPOURL_DESC_B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_DG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_MODEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_A;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_A;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_A;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_B;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_A;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_B;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, VALID_PROJECT_NAME_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PROJECT_NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"0\" + PROJECT_NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, ProjectName.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS); // invalid deadline"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_REPOURL_DESC, RepoUrl.MESSAGE_CONSTRAINTS); // invalid repoUrl"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PROJECT_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ProjectDescription.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PROJECT_TAG_DESC, ProjectTag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC + REPOURL_DESC_A, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DESC_B + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Project} being edited,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + PROJECT_TAG_DESC_FRIEND + PROJECT_TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + PROJECT_TAG_DESC_FRIEND + TAG_EMPTY + PROJECT_TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + PROJECT_TAG_DESC_FRIEND + PROJECT_TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            ProjectTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_REPOURL_DESC + VALID_PROJECT_DESCRIPTION_A"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                + VALID_DEADLINE_A,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                ProjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_B + PROJECT_TAG_DESC_HUSBAND + TASK_DESC_DG"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + REPOURL_DESC_A + PROJECT_DESCRIPTION_DESC_AMY + PROJECT_NAME_DESC_AMY + PROJECT_TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TASK_DESC_MODEL;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withProjectName(VALID_PROJECT_NAME_A)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withDeadline(VALID_DEADLINE_B).withRepoUrl(VALID_REPOURL_A).withProjectDescription("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_PROJECT_DESCRIPTION_A)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_A, VALID_PROJECT_TAG_B).withTasks(VALID_PROJECT_TAG_DG,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_TASK_MODEL).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_B + REPOURL_DESC_A;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_B)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                .withRepoUrl(VALID_REPOURL_A).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PROJECT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withProjectName("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_NAME_A).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_A;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_A).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // repoUrl"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REPOURL_DESC_A;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withRepoUrl(VALID_REPOURL_A).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PROJECT_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withProjectDescription(VALID_PROJECT_DESCRIPTION_A).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PROJECT_TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withTags(VALID_PROJECT_TAG_B).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // tasks"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TASK_DESC_MODEL;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withTasks(VALID_TASK_MODEL).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_A + PROJECT_DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            + REPOURL_DESC_A"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + PROJECT_TAG_DESC_FRIEND + DEADLINE_DESC_A + PROJECT_DESCRIPTION_DESC_AMY + REPOURL_DESC_A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + PROJECT_TAG_DESC_FRIEND + TASK_DESC_DG"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + DEADLINE_DESC_B + PROJECT_DESCRIPTION_DESC_BOB + REPOURL_DESC_B + PROJECT_TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TASK_DESC_MODEL;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_B)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withRepoUrl(VALID_REPOURL_B).withProjectDescription(VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_PROJECT_TAG_B,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                VALID_PROJECT_TAG_A).withTasks(VALID_PROJECT_TAG_DG, VALID_TASK_MODEL)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_B;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_B).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REPOURL_DESC_B + INVALID_DEADLINE_DESC + PROJECT_DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                + DEADLINE_DESC_B;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_B).withRepoUrl(VALID_REPOURL_B)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withProjectDescription(VALID_PROJECT_DESCRIPTION_B).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 61,
      "-": 124,
      "TCQian": 29,
      "lll-jy": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "lll-jy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MainCatalogueParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_ASSIGNEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PLAN_MEETING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.VALID_TASK_DEADLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.VALID_TASK_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.VALID_TASK_PROGRESS_HALF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.DeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.StartCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.AddTaskCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.AssignCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.EditTaskCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.LeaveCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.NewTeammateCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.TaskFilterCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.ViewTaskCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.Status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.exceptions.InvalidScopeException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class MainCatalogueParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final MainCatalogueParser parser \u003d new MainCatalogueParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ProjectUtil.getAddCommand(project), Status.CATALOGUE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new AddCommand(project), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, Status.CATALOGUE) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", Status.CATALOGUE) instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased(), Status.CATALOGUE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(project).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                + INDEX_FIRST_PROJECT.getOneBased() + \" \" + ProjectUtil.getEditProjectDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Status.CATALOGUE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PROJECT, descriptor), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, Status.CATALOGUE) instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", Status.CATALOGUE) instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, Status.PROJECT) instanceof ExitCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", Status.PROJECT) instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")), Status.CATALOGUE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, Status.CATALOGUE) instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", Status.CATALOGUE) instanceof HelpCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, Status.PROJECT) instanceof HelpCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", Status.PROJECT) instanceof HelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, Status.CATALOGUE) instanceof ListCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", Status.CATALOGUE) instanceof ListCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        StartCommand command \u003d (StartCommand) parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            StartCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased(), Status.CATALOGUE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new StartCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseCommand_leave() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(LeaveCommand.COMMAND_WORD, Status.PROJECT) instanceof LeaveCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(parser.parseCommand(LeaveCommand.COMMAND_WORD + \" 3\", Status.PROJECT) instanceof LeaveCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseCommand_assign() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AssignCommand command \u003d (AssignCommand) parser.parseCommand("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            AssignCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \" + ALICE.getGitUserName(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Status.PROJECT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(new AssignCommand(INDEX_FIRST_TASK, ALICE.getGitUserNameString()), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        // TaskFilterCommand does not have equal method as one cannot compare two predicates unless they are identical"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assertTrue(parser.parseCommand(TaskFilterCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_ASSIGNEE + ALICE.getGitUserName(), Status.PROJECT) instanceof TaskFilterCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assertTrue(parser.parseCommand(TaskFilterCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_DEADLINE + VALID_TASK_DEADLINE, Status.PROJECT) instanceof TaskFilterCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assertTrue(parser.parseCommand(TaskFilterCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "            + PREFIX_TASK_NAME + VALID_TASK_NAME, Status.PROJECT) instanceof TaskFilterCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseCommand_viewtask() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ViewTaskCommand command \u003d (ViewTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ViewTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(), Status.PROJECT"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new ViewTaskCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            -\u003e parser.parseCommand(\"\", Status.CATALOGUE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Status.CATALOGUE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseCommand_invalidScope_throwsInvalidScopeException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                AssignCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \" + ALICE.getPersonName(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Status.CATALOGUE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "                TaskFilterCommand.COMMAND_WORD + \" \" + PREFIX_TASK_ASSIGNEE + ALICE.getPersonName(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Status.CATALOGUE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand(NewTeammateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                + PersonUtil.getCommandInfo(ALICE), Status.CATALOGUE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand(AddTaskCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                + TaskUtil.getTaskCommand(PLAN_MEETING), Status.CATALOGUE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand(EditTaskCommand.COMMAND_WORD + \" \" + PREFIX_TASK_PROGRESS"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                + \" \" + VALID_TASK_PROGRESS_HALF, Status.CATALOGUE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            parser.parseCommand(ViewTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Status.CATALOGUE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(new InvalidScopeException(Status.PROJECT, Status.CATALOGUE), e);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 17,
      "GeNiaaz": 2,
      "-": 64,
      "lll-jy": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NewTeammateCommandParsertest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.INVALID_TEAMMATE_EMAIL_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.INVALID_TEAMMATE_GIT_USERNAME_DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.INVALID_TEAMMATE_NAME_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.INVALID_TEAMMATE_PHONE_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.TEAMMATE_ADDRESS_DESC_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.TEAMMATE_EMAIL_DESC_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.TEAMMATE_GIT_USERNAME_DESC_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.TEAMMATE_NAME_DESC_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.TEAMMATE_PHONE_DESC_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_ADDRESS_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_EMAIL_A;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_GIT_USERNAME_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_NAME_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_PHONE_A;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_A;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.logic.commands.project.NewTeammateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.PersonName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " * Contains tests for NewTeammateCommandParser (interactions with NewTeammateCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class NewTeammateCommandParsertest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private NewTeammateCommandParser parser \u003d new NewTeammateCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses all fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Tests that all fields are required"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person expectedPerson \u003d DESC_A;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // all fields filled (all compulsory)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseSuccess(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, new NewTeammateCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses when different fields are missing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Checks that the parse fails when each field is missing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewTeammateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, VALID_TEAMMATE_NAME_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing git prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + VALID_TEAMMATE_GIT_USERNAME_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + VALID_TEAMMATE_PHONE_A"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + VALID_TEAMMATE_EMAIL_A + TEAMMATE_ADDRESS_DESC_A, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + VALID_TEAMMATE_ADDRESS_A, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses when different fields give incorrect input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Checks that the parse fails when each field is missing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid personname"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, INVALID_TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, PersonName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid gitUserName"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + INVALID_TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, GitUserName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + INVALID_TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid Email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertParseFailure(parser, TEAMMATE_NAME_DESC_A + TEAMMATE_GIT_USERNAME_DESC_A + TEAMMATE_PHONE_DESC_A"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + INVALID_TEAMMATE_EMAIL_DESC_A + TEAMMATE_ADDRESS_DESC_A, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String INVALID_PROJECT_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"21022020 203333\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String INVALID_REPOURL \u003d \"https://github.com/a/b\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String VALID_PROJECT_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"21-02-2020 20:33:33\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String VALID_REPOURL \u003d \"https://github.com/a/b.git\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final String VALID_TASK_1 \u003d \"Write DG\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final String VALID_TASK_2 \u003d \"Brainstorm user stories\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parseProjectName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProjectName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parseProjectName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseProjectName(INVALID_PROJECT_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parseProjectName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectName expectedProjectName \u003d new ProjectName(VALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectName, ParserUtil.parseProjectName(VALID_PROJECT_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void parseProjectName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String projectNameWithWhitespace \u003d WHITESPACE + VALID_PROJECT_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectName expectedProjectName \u003d new ProjectName(VALID_PROJECT_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectName, ParserUtil.parseProjectName(projectNameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.projectDescription((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.projectDescription(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectDescription expectedProjectDescription \u003d new ProjectDescription(VALID_ADDRESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectDescription, ParserUtil.projectDescription(VALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectDescription expectedProjectDescription \u003d new ProjectDescription(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectDescription, ParserUtil.projectDescription(addressWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseRepoUrl_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRepoUrl((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseRepoUrl_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRepoUrl(INVALID_REPOURL));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseRepoUrl_validValueWithoutWhitespace_returnsRepoUrl() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        RepoUrl expectedRepoUrl \u003d new RepoUrl(VALID_REPOURL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(expectedRepoUrl, ParserUtil.parseRepoUrl(VALID_REPOURL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void parseRepoUrl_validValueWithWhitespace_returnsTrimmedRepoUrl() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String repoUrlWithWhitespace \u003d WHITESPACE + VALID_REPOURL + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        RepoUrl expectedRepoUrl \u003d new RepoUrl(VALID_REPOURL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(expectedRepoUrl, ParserUtil.parseRepoUrl(repoUrlWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProjectTag(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseProjectTag(INVALID_TAG));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectTag expectedProjectTag \u003d new ProjectTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectTag, ParserUtil.parseProjectTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        ProjectTag expectedProjectTag \u003d new ProjectTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectTag, ParserUtil.parseProjectTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Set\u003cProjectTag\u003e actualProjectTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Set\u003cProjectTag\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            expectedProjectTagSet \u003d new HashSet\u003cProjectTag\u003e(Arrays.asList(new ProjectTag(VALID_TAG_1),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            new ProjectTag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedProjectTagSet, actualProjectTagSet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // TODO: task invalid tests"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTask_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTask(null));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTask_validValueWithoutWhitespace_returnsTask() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task expectedTask \u003d new Task(VALID_TASK_1, null, null, 0, false);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedTask, ParserUtil.parseTask(VALID_TASK_1));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTask_validValueWithWhitespace_returnsTrimmedTask() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String taskWithWhitespace \u003d WHITESPACE + VALID_TASK_1 + WHITESPACE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task expectedTask \u003d new Task(VALID_TASK_1, null, null, 0, false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedTask, ParserUtil.parseTask(taskWithWhitespace));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTasks_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTasks(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTasks_emptyCollection_returnsEmptySet() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(ParserUtil.parseTasks(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parseTasks_collectionWithValidTasks_returnsTaskSet() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Set\u003cTask\u003e actualTaskSet \u003d ParserUtil.parseTasks(Arrays.asList(VALID_TASK_1, VALID_TASK_2));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Set\u003cTask\u003e expectedTaskSet \u003d new HashSet\u003cTask\u003e(Arrays.asList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new Task(VALID_TASK_1, null, null, 0, false),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new Task(VALID_TASK_2, null, null, 0, false)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedTaskSet, actualTaskSet);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 32,
      "-": 134,
      "TCQian": 29,
      "lll-jy": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.StartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * outside of the StartCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * same path through the StartCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class StartCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_validArgs_returnsStartCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StartCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskFilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "import seedu.address.logic.commands.project.TaskFilterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "class TaskFilterCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskFilterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    private TaskFilterCommandParser parser \u003d new TaskFilterCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        // empty user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.project.ViewTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * outside of the ViewTaskCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * same path through the ViewTaskCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ViewTaskCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private ViewTaskCommandParser parser \u003d new ViewTaskCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_validArgs_returnsViewTaskCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                new ViewTaskCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MainCatalogueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.APEAKAPP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class MainCatalogueTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final MainCatalogue mainCatalogue \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(Collections.emptyList(), mainCatalogue.getProjectList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainCatalogue.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void resetData_withValidReadOnlyMainCatalogue_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue newData \u003d getTypicalMainCatalogue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(newData, mainCatalogue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void resetData_withDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // Two projects with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTasks(VALID_PROJECT_TAG_DG)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cProject\u003e newProjects \u003d Arrays.asList(APEAKAPP, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogueStub newData \u003d new MainCatalogueStub(newProjects);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e mainCatalogue.resetData(newData));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainCatalogue.hasProject(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_projectNotInMainCatalogue_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            mainCatalogue.hasProject(APEAKAPP));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_projectInMainCatalogue_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        mainCatalogue.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(mainCatalogue.hasProject(APEAKAPP));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_projectWithSameIdentityFieldsInMainCatalogue_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        mainCatalogue.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTasks(VALID_PROJECT_TAG_DG)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(mainCatalogue.hasProject(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mainCatalogue.getProjectList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enterQuit_correctScope_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            mainCatalogue.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            mainCatalogue.enter(APEAKAPP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            mainCatalogue.quit();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enter_nonExistingProject_throwProjectNotFoundException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ProjectNotFoundException.class, () -\u003e mainCatalogue.enter(APEAKAPP));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void enter_sameButNotEqualProject_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        mainCatalogue.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project adapted \u003d new ProjectBuilder(APEAKAPP).withTags().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            mainCatalogue.enter(adapted);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * A stub ReadOnlyMainCatalogue whose projects list can violate interface constraints."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static class MainCatalogueStub implements ReadOnlyMainCatalogue {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        private final ObservableList\u003cProject\u003e projects \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        private Status status \u003d Status.CATALOGUE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogueStub(Collection\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.projects.setAll(projects);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public Status getStatus() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void enter(Project project) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            // TODO: Add content if test case need this."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void quit() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            // TODO: Add content if test case need this."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        public void enterTask(Task task) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            // TODO: Add content if test case need this."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 23,
      "-": 61,
      "lll-jy": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.APEAKAPP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.BRICK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.MainCatalogueBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(new MainCatalogue(), new MainCatalogue(modelManager.getProjectCatalogue()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        userPrefs.setMainCatalogueFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        userPrefs.setMainCatalogueFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setMainCatalogueFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setProjectCatalogueFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setMainCatalogueFilePath_validPath_setsMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        modelManager.setProjectCatalogueFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertEquals(path, modelManager.getProjectCatalogueFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasProject(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_projectNotInMainCatalogue_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .hasProject(APEAKAPP));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void hasProject_projectInMainCatalogue_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(modelManager.hasProject(APEAKAPP));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .getFilteredProjectList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getFilteredProjectList_enterProject_singleProject() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.enter(APEAKAPP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(modelManager.getFilteredProjectList().contains(APEAKAPP));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(1, modelManager.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getFilteredProjectList_quit_fullList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.addProject(APEAKAPP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.addProject(BRICK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        modelManager.enter(APEAKAPP);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        modelManager.quit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(modelManager.getProjectCatalogue().getProjectList(), modelManager.getFilteredProjectList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        MainCatalogue mainCatalogue \u003d new MainCatalogueBuilder().withProject(APEAKAPP).withProject(BRICK).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue differentMainCatalogue \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        modelManager \u003d new ModelManager(mainCatalogue, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mainCatalogue, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different mainCatalogue -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMainCatalogue, userPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String[] keywords \u003d APEAKAPP.getProjectName().fullProjectName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        modelManager.updateFilteredProjectList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mainCatalogue, userPrefs)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        modelManager.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        differentUserPrefs.setMainCatalogueFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mainCatalogue, differentUserPrefs)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 16,
      "-": 100,
      "TCQian": 4,
      "lll-jy": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setMainCatalogueFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMainCatalogueFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "lll-jy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public void constructor_invalidMeeting_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        assertThrows(java.time.format.DateTimeParseException.class, () -\u003e new Meeting(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucastai98": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Address.isValidAddress(\" 13 Evelyn Road\")); // space before address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid address"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"evelyn road\")); // letters only, no capitalization"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Evelyn Road\")); // letters only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"TANJONG RU\")); // letters, fully capitalized"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"12 Evelyn Road\")); // letters with numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"evelyn road #02-453\")); // letters and symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Block 232 Tanjong Pagar Terminal street 22 industrial park 3 Bizman \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"#102-323\")); // long address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 14,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidProjectDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String email \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(email));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // emprty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\" jack@gmail.com\")); // space before email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"test)@gmail.com\")); // parenthesis in email"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@gmail.com\")); // nothing before the @ symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"test$gmail.com\")); // @ symbol not present"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"test@y\")); // domain less than 2 letters long"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"hellofresh@hello.\")); // end email with \u0027.\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Email.isValidEmail(\"hellofresh@h/lo.ga\")); // email with unusual domain"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Email.isValidEmail(\"hellofresh@gmail.com\")); // only letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Email.isValidEmail(\"hello_$fresh@gmail.com\")); // email with special characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Email.isValidEmail(\"hellofresh@helo.ga\")); // email with unusual domain"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 15,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GitUserNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class GitUserNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GitUserName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String projectDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GitUserName(projectDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null gitUserName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid gitUserName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\" \")); // space only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\"-GeNiaaz\")); // hyphen before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\"Lucas Ku\")); // space in name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\"Lucas--de\")); // consecutive hyphen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(GitUserName.isValidGitUserName(\"thisisthebestnameever1111111111111111111\")); // long name \u003e 40"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid gitUserName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(GitUserName.isValidGitUserName(\"D3stiny\")); // alphanumeric name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(GitUserName.isValidGitUserName(\"Lucas-Tai-21\")); // name with hyphens"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(GitUserName.isValidGitUserName(\"thisisthebestnameever111111111111111111\")); // 40 char name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class PersonNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void construtor_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PersonName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidPersonName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String invalidName \u003d \" James\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PersonName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void isValidPersonName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PersonName.isValidPersonName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid person name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"\u0026\")); // only non-alphanumeric character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"Te$la\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"Post Malone the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\"jack  sparrow\")); // double spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(PersonName.isValidPersonName(\" jack sparrow\")); // space before the person name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid person name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(PersonName.isValidPersonName(\"jack\")); // single word, no space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(PersonName.isValidPersonName(\"jack sparrow\")); // alphebets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(PersonName.isValidPersonName(\"Saul Goodman\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(PersonName.isValidPersonName(\"AARON TAN ZF\")); // fully capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_ADDRESS_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_EMAIL_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_GIT_USERNAME_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_NAME_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_PHONE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DESC_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_isValidUpdateFields() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedPersonName \u003d \"updatedName\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedPhone \u003d \"9291\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedEmail \u003d \"expect@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedAddress \u003d \"expected street\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedString \u003d \" Person name: updatedName\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Git Username: Sparrow32\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Phone: 9291\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Email: expect@gmail.com\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Address: expected street\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person teammate \u003d new PersonBuilder(DESC_A).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        teammate.updatePersonName(expectedPersonName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        teammate.updatePhone(expectedPhone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        teammate.updateEmail(expectedEmail);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        teammate.updateAddress(expectedAddress);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedString, teammate.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_isValidFields() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedPersonName \u003d VALID_TEAMMATE_NAME_A;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedGitUserName \u003d VALID_TEAMMATE_GIT_USERNAME_A;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedPhone \u003d VALID_TEAMMATE_PHONE_A;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedEmail \u003d VALID_TEAMMATE_EMAIL_A;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedAddress \u003d VALID_TEAMMATE_ADDRESS_A;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedPersonName, DESC_A.getPersonName().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedGitUserName, DESC_A.getGitUserName().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedPhone, DESC_A.getPhone().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedEmail, DESC_A.getEmail().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(expectedAddress, DESC_A.getAddress().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void isSameTeamamate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(DESC_A.isSameTeammate(DESC_A));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(DESC_A.isSameTeammate(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different personName -\u003e return true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAPersonName \u003d new PersonBuilder(DESC_A).withPersonName(\"luanqiba\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(DESC_A.isSameTeammate(editedDescAPersonName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different gitUserName -\u003e return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAGitUserName \u003d new PersonBuilder(DESC_A).withGitUserName(\"different\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(DESC_A.isSameTeammate(editedDescAGitUserName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different phone -\u003e return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAPhone \u003d new PersonBuilder(DESC_A).withPhone(\"38283828311\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(DESC_A.isSameTeammate(editedDescAPhone));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different email -\u003e return false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAEmail \u003d new PersonBuilder(DESC_A).withEmail(\"jdjf@hmail.com\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(DESC_A.isSameTeammate(editedDescAEmail));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different address -\u003e return true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAAddress \u003d new PersonBuilder(DESC_A).withAddress(\"timbuktu\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(DESC_A.isSameTeammate(editedDescAAddress));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_validHashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        int expectedHash \u003d Objects.hash(VALID_TEAMMATE_NAME_A, VALID_TEAMMATE_GIT_USERNAME_A, VALID_TEAMMATE_PHONE_A,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_TEAMMATE_EMAIL_A, VALID_TEAMMATE_ADDRESS_A);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        int resultHash \u003d DESC_A.hashCode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(resultHash \u003d\u003d expectedHash);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(DESC_A, DESC_A);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(DESC_A, null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // same values, different objects -\u003e return true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person descACopy \u003d new PersonBuilder(DESC_A).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(descACopy, DESC_A);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(DESC_A, 5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // same type, different objects -\u003e return false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(DESC_B, DESC_A);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different PersonName"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAPersonName \u003d new PersonBuilder(DESC_A).withPersonName(\"Niaaz\").build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(editedDescAPersonName, DESC_A);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different gitUserName"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAGitUserName \u003d new PersonBuilder(DESC_A).withGitUserName(\"Geniaaz982\").build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(editedDescAGitUserName, DESC_A);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different phone"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAPhone \u003d new PersonBuilder(DESC_A).withPhone(\"3728271\").build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(editedDescAPhone, DESC_A);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different email"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAEmail \u003d new PersonBuilder(DESC_A).withEmail(\"pb@gmail.com\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(editedDescAEmail, DESC_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // different address"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Person editedDescAAddress \u003d new PersonBuilder(DESC_A).withAddress(\"247 pasir ris\").build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertNotEquals(editedDescAAddress, DESC_A);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void execute_validToString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedString \u003d \" Person name: Jack Nicholson\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Git Username: Sparrow32\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Phone: 92883923\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Email: jack@gmail.com\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \" Address: 32 Lake Road\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String resultString \u003d DESC_A.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(resultString, expectedString);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 117,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        //null phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"invalid\")); // letters only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"INVALID\")); // capital letters with spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"92800f\")); // letters and numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" 92800\")); // numbers with space in front"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"92 3323\")); //  numbers with space in between"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"3\")); // less than 3 digits ( \u003c 3)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // 20 digit number ( \u003e 16)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"92838392\")); // 8 digit number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"234\")); // 3 digit number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"1837263859473627\")); // 16 digit number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 16,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // invalid deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: missing \"-\", \":\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"22031999230000\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: using \"/\",  instead of \"-\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"22/03/1999 23:00:00\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: using \",\",  instead of \":\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"22-03-1999 23,00,00\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: missing \" \" between date and time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"22-03-199923:00:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: more than 2 digits of integers for day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"001-03-1999 23:00:00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 2 digits of integers for day"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"4-03-1999 23:00:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: more than 2 digits of integers for month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-003-1999 23:00:00\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 2 digits of integers for day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-3-1999 23:00:00\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 4 digits of integers for day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-999 23:00:00\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 2 digits of integers for hour"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 2:00:00\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: more than 2 digits of integers for hour"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 200:00:00\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 2 digits of integers for minute"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 20:1:00\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: more than 2 digits of integers for minute"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 20:100:00\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: less than 2 digits of integers for second"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 20:00:1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: more than 2 digits of integers for second"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"14-03-1999 20:00:100\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"40-03-1999 23:00:00\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect month"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-13-1999 23:00:00\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect year, more than 4 digits of integers for year"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"29-03-10000 23:00:00\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of February"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"29-02-2019 23:00:00\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of February"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"30-02-2019 23:00:00\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of February"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-02-2019 23:00:00\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of April"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-04-2019 23:00:00\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of June"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-06-2019 23:00:00\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of September"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-09-2019 23:00:00\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect day of November"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-11-2019 23:00:00\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect hour"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"20-03-1999 24:00:00\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect minute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"20-03-1999 23:80:00\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // incorrect format: incorrect second"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"20-03-1999 23:00:99\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // valid deadlines"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"20-03-1999 23:00:00\")); // correct format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"29-02-2020 23:00:00\")); // correct day in February"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-01-2020 23:00:00\")); // correct day in January"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-03-2020 23:00:00\")); // correct day in March"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-05-2020 23:00:00\")); // correct day in May"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-07-2020 23:00:00\")); // correct day in July"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-08-2020 23:00:00\")); // correct day in August"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-10-2020 23:00:00\")); // correct day in October"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-12-2020 23:00:00\")); // correct day in December"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"29-02-2020 00:00:00\")); // correct time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCQian": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectDescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProjectDescription(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidProjectDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String projectDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ProjectDescription(projectDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void isValidProjectDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null projectDescription"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProjectDescription.isValidProjectDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid projectDescription"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectDescription.isValidProjectDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectDescription.isValidProjectDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectDescription.isValidProjectDescription(\" this\")); // space before project description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid projectDescription"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectDescription.isValidProjectDescription(\"this project is amazing x10\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectDescription.isValidProjectDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectDescription.isValidProjectDescription(\"Tesla is probably the most overvalued company on \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            + \"the planet, but the sentiment among many investors is the contrary\")); // long project description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withProjectName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withProjectName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"21-03-2020\", \"00:00:00\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withProjectName(\"Alice\").withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                .withRepoUrl(\"https://github.com/a/a.git\").withProjectDescription(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 7,
      "-": 62,
      "TCQian": 4,
      "lll-jy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProjectName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void constructor_invalidProjectName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ProjectName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void isValidProjectName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProjectName.isValidProjectName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // invalid project name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectName.isValidProjectName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectName.isValidProjectName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectName.isValidProjectName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(ProjectName.isValidProjectName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        // valid project name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectName.isValidProjectName(\"capital invest\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectName.isValidProjectName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectName.isValidProjectName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectName.isValidProjectName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(ProjectName.isValidProjectName(\"David Roger Jackson Ray Junior 2nd\")); // long project names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/ProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.APEAKAPP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.BOT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e project.getProjectTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isSameProject() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.isSameProject(APEAKAPP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.isSameProject(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // different deadline and repoUrl -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withDeadline(VALID_DEADLINE_B).withRepoUrl(VALID_REPOURL_B).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectName(VALID_PROJECT_NAME_B).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withRepoUrl(VALID_REPOURL_B).withProjectDescription("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_A).withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // same name, same repoUrl, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withDeadline(VALID_DEADLINE_B)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withProjectDescription(VALID_PROJECT_DESCRIPTION_B)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTags(VALID_PROJECT_TAG_A).withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // same name, same deadline, same repoUrl, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription(VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project aliceCopy \u003d new ProjectBuilder(APEAKAPP).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.equals(aliceCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(APEAKAPP.equals(APEAKAPP));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(BOT));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectName(VALID_PROJECT_NAME_B).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withDeadline(VALID_DEADLINE_B).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // different repoUrl -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withRepoUrl(VALID_REPOURL_B).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription(VALID_PROJECT_DESCRIPTION_B).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withTags(VALID_PROJECT_TAG_A).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        // different tasks -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(APEAKAPP).withTasks(VALID_TASK_MODEL).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(APEAKAPP.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 45,
      "-": 45,
      "TCQian": 7,
      "lll-jy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/RepoUrlTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCQian"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCQian"
        },
        "content": "public class RepoUrlTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RepoUrl(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void constructor_invalidRepoUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String invalidRepoUrl \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RepoUrl(invalidRepoUrl));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void isValidRepoUrl() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // null repoUrl"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RepoUrl.isValidRepoUrl(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCQian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // blank repoUrl"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(RepoUrl.isValidRepoUrl(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(RepoUrl.isValidRepoUrl(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // missing hostname part"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(RepoUrl.isValidRepoUrl(\"https://AY2021S1-CS2103T-W10-3/tp.git\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // missing .git part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(RepoUrl.isValidRepoUrl(\"https://github.com/AY2021S1-CS2103T-W10-3/tp\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // invalid protocol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertFalse(RepoUrl.isValidRepoUrl(\"www://google.com/AY2021S1-CS2103T-W10-3/tp.git\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(RepoUrl.isValidRepoUrl(\"https://github.com/AY2021S1-CS2103T-W10-3/tp.git\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // hostname with @"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(RepoUrl.isValidRepoUrl(\"https://username@bitbucket.org/otherusername/reponame.git\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        // another url expression of git repo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        assertTrue(RepoUrl.isValidRepoUrl(\"git@github.com:username/reponame.git\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCQian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCQian": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/UniqueProjectListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.APEAKAPP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.BOT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class UniqueProjectListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final UniqueProjectList uniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void contains_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void contains_projectNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertFalse(uniqueProjectList.contains(APEAKAPP));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void contains_projectInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertTrue(uniqueProjectList.contains(APEAKAPP));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void contains_projectWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTasks(VALID_PROJECT_TAG_DG)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(uniqueProjectList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void add_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void add_duplicateProject_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.add(APEAKAPP));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_nullTargetProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProject(null, APEAKAPP));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_nullEditedProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProject(APEAKAPP, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_targetProjectNotInList_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ProjectNotFoundException.class, () -\u003e uniqueProjectList.setProject(APEAKAPP, APEAKAPP));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_editedProjectIsSameProject_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.setProject(APEAKAPP, APEAKAPP);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        expectedUniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_editedProjectHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(APEAKAPP).withProjectDescription("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B).withTags("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAG_A)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                .withTasks(VALID_PROJECT_TAG_DG)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.setProject(APEAKAPP, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        expectedUniqueProjectList.add(editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_editedProjectHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.setProject(APEAKAPP, BOT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        expectedUniqueProjectList.add(BOT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProject_editedProjectHasNonUniqueIdentity_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(BOT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.setProject(APEAKAPP, BOT));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void remove_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.remove(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(ProjectNotFoundException.class, () -\u003e uniqueProjectList.remove(APEAKAPP));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.remove(APEAKAPP);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProjects((UniqueProjectList) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        expectedUniqueProjectList.add(BOT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        uniqueProjectList.setProjects(expectedUniqueProjectList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProjects((List\u003cProject\u003e) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        uniqueProjectList.add(APEAKAPP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cProject\u003e projectList \u003d Collections.singletonList(BOT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        uniqueProjectList.setProjects(projectList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        expectedUniqueProjectList.add(BOT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cProject\u003e listWithDuplicateProjects \u003d Arrays.asList(APEAKAPP, APEAKAPP);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.setProjects("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            listWithDuplicateProjects));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            -\u003e uniqueProjectList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 44,
      "-": 85,
      "lll-jy": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/ProjectTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "public class ProjectTagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProjectTag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ProjectTag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ProjectTag.isValidProjectTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 4,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(null, null, null, 0, false));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // TODO: invalid test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.storage.JsonAdaptedProject.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.BRICK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class JsonAdaptedProjectTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String INVALID_PROJECT_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"29022020000000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String INVALID_PROJECT_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private static final String INVALID_REPOURL \u003d \"https://github.com/a/b\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String INVALID_PROJECT_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String VALID_PROJECT_NAME \u003d BRICK.getProjectName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String VALID_DEADLINE \u003d BRICK.getDeadline().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String VALID_REPOURL \u003d BRICK.getRepoUrl().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final String VALID_PROJECT_DESCRIPTION \u003d BRICK.getProjectDescription().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_PROJECT_TAGS \u003d BRICK.getProjectTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private static final List\u003cJsonAdaptedTask\u003e VALID_TASKS \u003d BRICK.getTasks().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toModelType_validProjectDetails_returnsProject() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(BRICK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        assertEquals(BRICK, project.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void toModelType_invalidProjectName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonAdaptedProject project \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                new JsonAdaptedProject(INVALID_PROJECT_NAME, VALID_DEADLINE, VALID_REPOURL, VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedMessage \u003d ProjectName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void toModelType_nullProjectName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(null, VALID_DEADLINE, VALID_REPOURL,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProjectName.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonAdaptedProject project \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                new JsonAdaptedProject(VALID_PROJECT_NAME, INVALID_DEADLINE, VALID_REPOURL, VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_PROJECT_NAME, null, VALID_REPOURL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public void toModelType_invalidRepoUrl_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonAdaptedProject project \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                new JsonAdaptedProject(VALID_PROJECT_NAME, VALID_DEADLINE, INVALID_REPOURL, VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String expectedMessage \u003d RepoUrl.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_PROJECT_NAME, VALID_DEADLINE, null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RepoUrl.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void toModelType_invalidProjectDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonAdaptedProject project \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            new JsonAdaptedProject(VALID_PROJECT_NAME, VALID_DEADLINE, VALID_REPOURL, INVALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                    VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedMessage \u003d ProjectDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public void toModelType_nullProjectDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_PROJECT_NAME, VALID_DEADLINE, VALID_REPOURL, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_TAGS, VALID_TASKS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProjectDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_PROJECT_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_PROJECT_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonAdaptedProject project \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TCQian"
        },
        "content": "                new JsonAdaptedProject(VALID_PROJECT_NAME, VALID_DEADLINE, VALID_REPOURL, VALID_PROJECT_DESCRIPTION,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                        invalidTags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, project::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // TODO: invalidTasks"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 34,
      "-": 51,
      "TCQian": 20,
      "lll-jy": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMainCatalogueStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.APEAKAPP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class JsonMainCatalogueStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMainCatalogueStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void readMainCatalogue_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMainCatalogue(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMainCatalogue\u003e readMainCatalogue(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new JsonMainCatalogueStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .readMainCatalogue(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(readMainCatalogue(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMainCatalogue(\"notJsonFormatMainCatalogue.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void readMainCatalogue_invalidProjectMainCatalogue_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMainCatalogue(\"invalidProjectMainCatalogue.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void readMainCatalogue_invalidAndValidProjectMainCatalogue_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                readMainCatalogue(\"invalidAndValidProjectMainCatalogue.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void readAndSaveMainCatalogue_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMainCatalogue.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue original \u003d getTypicalMainCatalogue();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonMainCatalogueStorage jsonMainCatalogueStorage \u003d new JsonMainCatalogueStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        jsonMainCatalogueStorage.saveMainCatalogue(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ReadOnlyMainCatalogue readBack \u003d jsonMainCatalogueStorage.readMainCatalogue(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(original, new MainCatalogue(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        original.addProject(HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        original.removeProject(APEAKAPP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        jsonMainCatalogueStorage.saveMainCatalogue(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        readBack \u003d jsonMainCatalogueStorage.readMainCatalogue(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(original, new MainCatalogue(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        original.addProject(IDA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        jsonMainCatalogueStorage.saveMainCatalogue(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        readBack \u003d jsonMainCatalogueStorage.readMainCatalogue().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(original, new MainCatalogue(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue_nullMainCatalogue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMainCatalogue(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Saves {@code mainCatalogue} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private void saveMainCatalogue(ReadOnlyMainCatalogue mainCatalogue, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new JsonMainCatalogueStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    .saveMainCatalogue(mainCatalogue, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void saveMainCatalogue_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMainCatalogue(new MainCatalogue(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 2,
      "-": 68,
      "lll-jy": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMainCatalogueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class JsonSerializableMainCatalogueTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMainCatalogueTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Path TYPICAL_PROJECTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalProjectsMainCatalogue.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Path INVALID_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidProjectMainCatalogue.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final Path DUPLICATE_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateProjectMainCatalogue.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toModelType_typicalProjectsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonSerializableMainCatalogue dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PROJECTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                JsonSerializableMainCatalogue.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue mainCatalogueFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue typicalProjectsMainCatalogue \u003d TypicalProjects.getTypicalMainCatalogue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(mainCatalogueFromFile, typicalProjectsMainCatalogue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toModelType_invalidProjectFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonSerializableMainCatalogue dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PROJECT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                JsonSerializableMainCatalogue.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toModelType_duplicateProjects_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonSerializableMainCatalogue dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PROJECT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                JsonSerializableMainCatalogue.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMainCatalogue.MESSAGE_DUPLICATE_PROJECT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "lll-jy": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        userPrefs.setMainCatalogueFilePath(Paths.get(\"maincatalogue.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "lll-jy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.testutil.TypicalProjects.getTypicalMainCatalogue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.ReadOnlyMainCatalogue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        JsonMainCatalogueStorage mainCatalogueStorage \u003d new JsonMainCatalogueStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storageManager \u003d new StorageManager(mainCatalogueStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void mainCatalogueReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * {@link JsonMainCatalogueStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMainCatalogueStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue original \u003d getTypicalMainCatalogue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storageManager.saveMainCatalogue(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ReadOnlyMainCatalogue retrieved \u003d storageManager.readMainCatalogue().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(original, new MainCatalogue(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void getMainCatalogueFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertNotNull(storageManager.getMainCatalogueFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "lll-jy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditProjectDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class to help with building EditProjectDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class EditProjectDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private EditProjectDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditProjectDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        descriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditProjectDescriptorBuilder(EditProjectDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.descriptor \u003d new EditProjectDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an {@code EditProjectDescriptor} with fields containing {@code project}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditProjectDescriptorBuilder(Project project) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        descriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setProjectName(project.getProjectName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.setDeadline(project.getDeadline());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.setRepoUrl(project.getRepoUrl());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setProjectDescription(project.getProjectDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setTags(project.getProjectTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        descriptor.setTasks(project.getTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Sets the {@code ProjectName} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public EditProjectDescriptorBuilder withProjectName(String projectName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setProjectName(new ProjectName(projectName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public EditProjectDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Sets the {@code RepoUrl} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public EditProjectDescriptorBuilder withRepoUrl(String repoUrl) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.setRepoUrl(new RepoUrl(repoUrl));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Sets the {@code ProjectDescription} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public EditProjectDescriptorBuilder withProjectDescription(String projectDescription) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setProjectDescription(new ProjectDescription(projectDescription));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the {@code projectTags} into a {@code Set\u003cProjectTag\u003e} and set it to the {@code EditProjectDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public EditProjectDescriptorBuilder withTags(String... projectTags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        Set\u003cProjectTag\u003e projectTagSet \u003d Stream.of(projectTags).map(ProjectTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.setTags(projectTagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses the {@code tasks} into a {@code Set\u003cTask\u003e} and set it to the {@code EditProjectDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditProjectDescriptorBuilder withTasks(String... tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d Stream.of(tasks).map(x -\u003e new Task(x, null, null, 0, false))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        descriptor.setTasks(taskSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public EditProjectDescriptor build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 15,
      "-": 48,
      "TCQian": 11,
      "lll-jy": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MainCatalogueBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " *     {@code MainCatalogue ab \u003d new MainCatalogueBuilder().withProject(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class MainCatalogueBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private MainCatalogue mainCatalogue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogueBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogueBuilder(MainCatalogue mainCatalogue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.mainCatalogue \u003d mainCatalogue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Adds a new {@code Project} to the {@code MainCatalogue} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogueBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        mainCatalogue.addProject(project);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public MainCatalogue build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return mainCatalogue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "lll-jy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.person.GitUserName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.person.PersonName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String DEFAULT_PERSON_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String DEFAULT_GIT_USERNAME \u003d \"Alice32\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"88888888\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alicepauline@sample.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private PersonName personName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private GitUserName gitUserName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        personName \u003d new PersonName(DEFAULT_PERSON_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        gitUserName \u003d new GitUserName(DEFAULT_GIT_USERNAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        personName \u003d personToCopy.getPersonName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        gitUserName \u003d personToCopy.getGitUserName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Sets the {@code PersonName} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public PersonBuilder withPersonName(String personName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.personName \u003d new PersonName(personName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Sets the {@code GitUserName} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public PersonBuilder withGitUserName(String gitUserName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.gitUserName \u003d new GitUserName(gitUserName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new Person(personName, gitUserName, phone, email, address);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 9,
      "-": 65,
      "lll-jy": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static String getCommandInfo(Person p) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        builder.append(p.getGitUserName()).append(\" \")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(p.getPhone()).append(\" \")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(p.getEmail()).append(\" \")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(p.getAddress());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 7,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.project.ProjectDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.ProjectName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import seedu.address.model.project.RepoUrl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final String DEFAULT_PROJECT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"29-02-2020 00:00:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final String DEFAULT_REPOURL \u003d \"https://github.com/a/b.git\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private ProjectName projectName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    private RepoUrl repoUrl;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private ProjectDescription projectDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    private Set\u003cProjectTag\u003e projectTags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    private Set\u003cMeeting\u003e meetings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Creates a {@code ProjectBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectName \u003d new ProjectName(DEFAULT_PROJECT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        repoUrl \u003d new RepoUrl(DEFAULT_REPOURL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectDescription \u003d new ProjectDescription(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        meetings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Initializes the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectName \u003d projectToCopy.getProjectName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        deadline \u003d projectToCopy.getDeadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        repoUrl \u003d projectToCopy.getRepoUrl();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectDescription \u003d projectToCopy.getProjectDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        projectTags \u003d new HashSet\u003c\u003e(projectToCopy.getProjectTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        tasks \u003d new HashSet\u003c\u003e(projectToCopy.getTasks());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        meetings \u003d new HashSet\u003c\u003e(projectToCopy.getMeetings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Sets the {@code ProjectName} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectBuilder withProjectName(String projectName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectName \u003d new ProjectName(projectName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Parses the {@code projectTags} into a {@code Set\u003cProjectTag\u003e} and set it to the {@code Project}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectBuilder withTags(String ... projectTags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectTags \u003d SampleDataUtil.getTagSet(projectTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Parses the {@code tasks} into a {@code Set\u003cTask\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ProjectBuilder withTasks(String ... tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.tasks \u003d SampleDataUtil.getTaskSet(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Parses the {@code tasks} into a {@code Set\u003cTask\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    public ProjectBuilder withMeetings(String ... meetings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        this.meetings \u003d SampleDataUtil.getMeetingSet(meetings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucastai98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "     * Sets the {@code ProjectDescription} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public ProjectBuilder withProjectDescription(String projectDescription) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        this.projectDescription \u003d new ProjectDescription(projectDescription);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public ProjectBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TCQian"
        },
        "content": "     * Sets the {@code RepoUrl} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public ProjectBuilder withRepoUrl(String repoUrl) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        this.repoUrl \u003d new RepoUrl(repoUrl);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * Creates a project"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     * @return project sample"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "        return new Project(projectName, deadline, repoUrl, projectDescription,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucastai98"
        },
        "content": "                projectTags, new HashMap\u003c\u003e(), tasks, meetings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 22,
      "-": 49,
      "TCQian": 17,
      "lll-jy": 21,
      "lucastai98": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPOURL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.logic.commands.global.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import seedu.address.model.tag.ProjectTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class for Project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ProjectUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an add command string for adding the {@code project}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static String getAddCommand(Project project) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getProjectDetails(project);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the part of command string for the given {@code project}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static String getProjectDetails(Project project) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        sb.append(PREFIX_PROJECT_NAME + project.getProjectName().fullProjectName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        sb.append(PREFIX_DEADLINE + project.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        sb.append(PREFIX_REPOURL + project.getRepoUrl().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        sb.append(PREFIX_PROJECT_DESCRIPTION + project.getProjectDescription().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        project.getProjectTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            s -\u003e sb.append(PREFIX_PROJECT_TAG + s.projectTagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        project.getTasks().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            s -\u003e sb.append(PREFIX_TASK + s.taskName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the part of command string for the given {@code EditProjectDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static String getEditProjectDescriptorDetails(EditProjectDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.getProjectName().ifPresent(name -\u003e sb.append(PREFIX_PROJECT_NAME).append(name.fullProjectName)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE).append(deadline.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCQian"
        },
        "content": "        descriptor.getRepoUrl().ifPresent(email -\u003e sb.append(PREFIX_REPOURL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        descriptor.getProjectDescription().ifPresent(address -\u003e sb.append(PREFIX_PROJECT_DESCRIPTION).append("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        if (descriptor.getProjectTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            Set\u003cProjectTag\u003e projectTags \u003d descriptor.getProjectTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            if (projectTags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                sb.append(PREFIX_PROJECT_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "                projectTags.forEach(s -\u003e sb.append(PREFIX_PROJECT_TAG).append(s.projectTagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        sb.append(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (descriptor.getTasks().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Set\u003cTask\u003e tasks \u003d descriptor.getTasks().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                sb.append(PREFIX_TASK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                tasks.forEach(s -\u003e sb.append(PREFIX_TASK).append(s.taskName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 16,
      "-": 29,
      "TCQian": 7,
      "lll-jy": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_IS_DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PROGRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static String getTaskCommand(Task t) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        builder.append(PREFIX_PROJECT_NAME).append(\" \").append(t.getTaskName()).append(\" \")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .append(PREFIX_TASK_PROGRESS).append(\" \").append(t.getProgress()).append(\" \")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                .append(PREFIX_TASK_IS_DONE).append(\" \").append(t.isDone());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the middle index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProjectList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the last index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns the project in the {@code model}\u0027s project list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Project getProject(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return model.getFilteredProjectList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "lll-jy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Index INDEX_FIRST_PROJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Index INDEX_SECOND_PROJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Index INDEX_THIRD_PROJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "lll-jy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_ADDRESS_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_ADDRESS_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_ADDRESS_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_EMAIL_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_EMAIL_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_EMAIL_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_GIT_USERNAME_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_GIT_USERNAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_GIT_USERNAME_C;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_NAME_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_NAME_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_NAME_C;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_PHONE_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_PHONE_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.TeammateTestUtil.VALID_TEAMMATE_PHONE_C;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class containing a list of {@code Persons} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withPersonName(\"Alice Pauline\").withGitUserName(\"Allie32\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPhone(\"12345678\").withEmail(\"alicepauline@sample.com\").withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Person DESC_A \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPersonName(VALID_TEAMMATE_NAME_A)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withGitUserName(VALID_TEAMMATE_GIT_USERNAME_A)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPhone(VALID_TEAMMATE_PHONE_A)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withEmail(VALID_TEAMMATE_EMAIL_A)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withAddress(VALID_TEAMMATE_ADDRESS_A).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Person DESC_B \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPersonName(VALID_TEAMMATE_NAME_B)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withGitUserName(VALID_TEAMMATE_GIT_USERNAME_B)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPhone(VALID_TEAMMATE_PHONE_B)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withEmail(VALID_TEAMMATE_EMAIL_B)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withAddress(VALID_TEAMMATE_ADDRESS_B).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Person DESC_C \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPersonName(VALID_TEAMMATE_NAME_C)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withGitUserName(VALID_TEAMMATE_GIT_USERNAME_C)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withPhone(VALID_TEAMMATE_PHONE_C)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withEmail(VALID_TEAMMATE_EMAIL_C)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        .withAddress(VALID_TEAMMATE_ADDRESS_C).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 38,
      "-": 10,
      "lll-jy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProjects.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_TAG_DG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_A;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCQian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REPOURL_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.MainCatalogue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class TypicalProjects {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project APEAKAPP \u003d new ProjectBuilder().withProjectName(\"Apeakapp\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"An app for you to speak your mind\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/a/a.git\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(\"linguistics\").withTasks(\"Write DG\", \"Write user stories\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project BRICK \u003d new ProjectBuilder().withProjectName(\"Brick No Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"To destroy the brick and mortar\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/b/b.git\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(\"amazon\", \"evil\").withTasks(\"Practice presentation\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project CARACTIVE \u003d new ProjectBuilder().withProjectName(\"Caractive\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/c/c.git\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"best car app for tesla\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(\"electric\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTasks(\"Integrate with tesla\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project DAYUM \u003d new ProjectBuilder().withProjectName(\"Dayum Snap\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/d/d.git\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"yet another stories app\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(\"instagram\" , \"snapchat\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project ELFIE \u003d new ProjectBuilder().withProjectName(\"Elfie save\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/e/e.git\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"save elves from persecution\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project FANS \u003d new ProjectBuilder().withProjectName(\"Fans\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/f/f.git\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"an app only for fans\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project GERRY \u003d new ProjectBuilder().withProjectName(\"Gerry Mander\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withRepoUrl(\"https://github.com/g/g.git\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"Call us to rig any election\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final Project HOON \u003d new ProjectBuilder().withProjectName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\").withRepoUrl(\"https://github.com/h/h.git\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"Made with love and git\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCQian"
        },
        "content": "    public static final Project IDA \u003d new ProjectBuilder().withProjectName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCQian"
        },
        "content": "            .withDeadline(\"21-03-2020 00:00:00\").withRepoUrl(VALID_REPOURL_B)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withProjectDescription(\"german quality software\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    // Manually added - Project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project AI \u003d new ProjectBuilder().withProjectName(VALID_PROJECT_NAME_A)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(VALID_DEADLINE_A).withRepoUrl(VALID_REPOURL_A).withProjectDescription("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_A)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(VALID_PROJECT_TAG_B).withTasks(VALID_PROJECT_TAG_DG, VALID_TASK_MODEL).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "    public static final Project BOT \u003d new ProjectBuilder().withProjectName(VALID_PROJECT_NAME_B)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withDeadline(VALID_DEADLINE_B).withRepoUrl(VALID_REPOURL_B).withProjectDescription("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            VALID_PROJECT_DESCRIPTION_B)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "            .withTags(VALID_PROJECT_TAG_A, VALID_PROJECT_TAG_B).withTasks(VALID_PROJECT_TAG_DG).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private TypicalProjects() {} // prevents instantiation"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "     * Returns an {@code MainCatalogue} with all the typical projects."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static MainCatalogue getTypicalMainCatalogue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        MainCatalogue ab \u003d new MainCatalogue();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ab.addProject(project);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GeNiaaz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APEAKAPP, BRICK, CARACTIVE, DAYUM, ELFIE, FANS, GERRY));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GeNiaaz": 52,
      "-": 26,
      "TCQian": 7,
      "lll-jy": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.project.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "    public static final String VALID_TASK_DEADLINE \u003d \"31-12-2020 10:00:00\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String VALID_TASK_NAME \u003d \"Plan for group meeting on milestone v1.4\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final String VALID_TASK_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final double VALID_TASK_PROGRESS \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final double VALID_TASK_PROGRESS_HALF \u003d 0.5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final boolean VALID_TASK_DONE \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T-Fang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static final Task PLAN_MEETING \u003d new Task(VALID_TASK_NAME, VALID_TASK_DESCRIPTION,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new Deadline(VALID_TASK_DEADLINE), VALID_TASK_PROGRESS, VALID_TASK_DONE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T-Fang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T-Fang": 7,
      "lll-jy": 9
    }
  }
]
