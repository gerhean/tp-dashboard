[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "# McGymmy Diet tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-3/tp/actions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "* McGymmy is a CLI based application for sedentary software engineers to manage their diet and stay healthy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "  * The CLI aspect of the application benefits the target audience (software engineers), as it is something often used by them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* For the detailed documentation of this project, see the **[McGymmy Product Website](https://ay2021s1-cs2103t-w17-3.github.io/tp/)**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "## Extras"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5), [Apache Commons CLI](https://commons.apache.org/proper/commons-cli/)"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "dcchan98": 1,
      "jh123x": 5,
      "joeychensmart": 3,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "mainClassName \u003d \u0027jimmy.mcgymmy.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027commons-cli\u0027, name: \u0027commons-cli\u0027, version: \u00271.4\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    archiveName \u003d \u0027mcgymmy.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "jh123x": 2,
      "joeychensmart": 1,
      "-": 70
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Copyright by MoqUps - https://app.moqups.com/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- mcgymmy_32.png"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "-": 8
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Sean Chan Ding Chao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/dcchan98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[homepage](https://ay2021s1-cs2103t-w17-3.github.io/tp/)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](https://github.com/dcchan98)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[portfolio](team/sean.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Kamil Gimik"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/chewypiano.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/chewypiano)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[portfolio](team/kamil.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Joey Chen De\u0027en"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/joeychensmart.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](https://github.com/JoeyChenSmart) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[portfolio](team/joey.md)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Huynh Thai Duong "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/aidoxe-123.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/aidoxe-123)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[portfolio](team/duong.md)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Wen Junhua"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/jh123x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[github](http://github.com/Jh123x)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[portfolio](team/junhua.md)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Responsibilities: "
      }
    ],
    "authorContributionMap": {
      "jh123x": 27,
      "-": 34
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/blob/master/src/main/java/jimmy/mcgymmy/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "jh123x": 2,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" alt\u003d\"Architectural diagram\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" alt\u003d\"Architecture Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FoodListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. `Logic` uses the `McGymmyParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a food item)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* stores the McGymmy data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFood\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in `McGymmy`, which `Food` references. This allows `McGymmy` to only require one `Tag` object per unique `Tag`, instead of each `Food` needing their own `Tag` object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W17-3/tp/tree/master/src/main/java/jimmy/mcgymmy/storage/Storage.java)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* can save the McGymmy data in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Classes used by multiple components are in the `seedu.mcgymmy.commons` package."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedMcGymmy`. It extends `McGymmy` with an undo/redo history, stored internally as a `McGymmy` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `VersionedMcGymmy#commit()` — Saves the current McGymmy state in its history."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `VersionedMcGymmy#undo()` — Restores the previous McGymmy state from its history."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `VersionedMcGymmy#redo()` — Restores a previously undone McGymmy state from its history."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jh123x"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitMcGymmy()`, `Model#undoMcGymmy()` and `Model#redoMcGymmy()` respectively."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedMcGymmy` will be initialized with the initial McGymmy state, and the `currentStatePointer` pointing to that single McGymmy state."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th food item in the McGymmy. The `delete` command calls `Model#commitMcGymmy()`, causing the modified state of the McGymmy after the `delete 5` command executes to be saved in the `mcGymmyStateList`, and the `currentStatePointer` is shifted to the newly inserted McGymmy state."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 3. The user executes `add n/Rice …​` to add a new food item. The `add` command also calls `Model#commitMcGymmy()`, causing another modified McGymmy state to be saved into the `mcGymmyStateList`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitMcGymmy()`, so the McGymmy state will not be saved into the `mcGymmyStateList`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 4. The user now decides that adding the food item was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoMcGymmy()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous McGymmy state, and restores the McGymmy to that state."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial McGymmy state, then there are no previous McGymmy states to restore. The `undo` command uses `Model#canUndoMcGymmy()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoMcGymmy()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the McGymmy to that state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `mcGymmyStateList.size() - 1`, pointing to the latest McGymmy state, then there are no undone McGymmy states to restore. The `redo` command uses `Model#canRedoMcGymmy()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the McGymmy, such as `list`, will usually not call `Model#commitMcGymmy()`, `Model#undoMcGymmy()` or `Model#redoMcGymmy()`. Thus, the `mcGymmyStateList` remains unchanged."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitMcGymmy()`. Since the `currentStatePointer` is not pointing at the end of the `mcGymmyStateList`, all McGymmy states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/Rice …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire McGymmy database."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the food item being deleted)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* has a need to manage food intake"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* is sedentary people who sit in front of their computers"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* manage food intake faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* reduce the risk of health issues for people with an unhealthy lifestyle"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* help them develop a healthy lifestyle through diet"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* help them track their calorie intake"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* find trends in their eating habits"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "* profile setting for them to store different settings"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| Priority | As a/an …​                                  | I want to …​                            | So that I can…​                                                         |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions                 | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | track what I am eating                 |                                                                        |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | delete a food item                     | remove food items that I no longer care of                             |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* * *`  | user                                       | easily add food items/details          | keep track of my diet                                                  |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* *`    | frequent user                              | perform tasks on a group of food items |                                                                        |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `* *`    | expert user                                | create shortcuts for tasks             | frequently performed tasks                                             |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "| `*`      | programmer                                 | make use of the CLI like design        | get used to CLI in the future                                          |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jh123x"
        },
        "content": "(For all use cases below, the **System** is `McGymmy` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC01 List food**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows a list of food that user has added (UC02)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC02 Add food**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "1. User requests to add food into the list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "2. McGymmy adds the food item into the list"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "- 1a. The format of the add method is invalid"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    1a1. McGymmy shows an error message"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Use case: UC03 Delete food**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jh123x"
        },
        "content": "2. McGymmy shows a list of food"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jh123x"
        },
        "content": "3. User request to delete a specific food on the list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jh123x"
        },
        "content": "4. McGymmy deletes the food"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 2a. The list is empty\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 3a. The given index is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   - 3a1. McGymmy shows an error message."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC04 Help**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests help"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows all commands and examples of command usages"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "No extensions"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**Use case: UC05 Update food**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "1. User requests to list food (UC01)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "2. McGymmy shows a list of food"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "3. User request to update a specific food on the list"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "4. McGymmy updates the food"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 2a. The list is empty\u003cbr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jh123x"
        },
        "content": "- 3a. The given index is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "   - 3a1. McGymmy shows an error message"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Use case: UC06 Add a macro command**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. User creates a macro to execute two \u0027add\u0027 commands in sequence"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "2. McGymmy adds the macro to the list of available commands"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "3. User uses the newly added macro command"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "4. McGymmy executes the two commands consecutively"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jh123x"
        },
        "content": " - 1a. The format of the macro is invalid."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    - 1a1. McGymmy shows an error message."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - 4a. One of the executed commands encounter an error."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    - 4a1. McGymmy shows the error message from that command, and displays the commands that successfully executed, and the commands that have yet to execute."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jh123x"
        },
        "content": "2.  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "4. The product should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "5. The data should be stored locally and should be in a human editable text file."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "6. The software should not depend on a private remote server."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "7. The size of the final compiled JAR file should be less than 100Mb."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "8. There should be CLI alternatives to every GUI input. (E.g. instead of clicking on a button I can type an equivalent command to achieve the same result.)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* **Private diet detail**: Diet details that is not meant to be shared with others"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Double-click the jar file"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \u003cbr\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: Shows the GUI with a set of sample food items. The window size may not be optimum."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      \u003cbr\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Deleting food items"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jh123x"
        },
        "content": "1. Deleting a food item while all food items are shown."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Prerequisites: List all food items using the `list` command. Multiple food items in the list."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: First food item is deleted from the list. Details of the deleted food item shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jh123x"
        },
        "content": "      Expected: No food item is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Delete the \u0027data\u0027 file if any. Relaunch the app by double-clicking the jar file. "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   Expected: A new data file is generated"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   1. Open the data file inside the `data` folder using any text editor and edit the file."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   \u003cbr\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   Expected: A new empty data file is generated which overwrites the old one."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "dcchan98": 18,
      "jh123x": 75,
      "joeychensmart": 35,
      "-": 297,
      "aidoxe-123": 17
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   1. Run the `jimmy.mcgymmy.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "   e.g. `jimmy.mcgymmy.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmy (MG) is a **desktop app for managing diet and exercise, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, McGymmy can log your diet and exercise tasks, goals and progress done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Double click on the jar file to open the GUI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Refer to the features below for details of each command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. Download the latest `mcgymmy.jar` from [here](https://github.com/AY2021S1-CS2103T-W17-3/tp)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your McGymmy."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   * **`list`** : Lists all food items."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "   * **`add`**`-n potato -p 100 -c 5 -f 0` : Adds a food item named `potato` with `100` proteins, `5` carbs, and `0` fats."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd food item shown in the current list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  e.g. in `add -n NAME -p PROTEIN`, `NAME` and `PROTEIN` are parameters which can be used as `add bacon -p 200`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  e.g `-n NAME [-f FATS]` can be used as `-n bacon -f 10` or as `-n bacon`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  e.g. `[commnand;]…​` can be used as ` ` (i.e. 0 times), `delete 1;`, `delete 2; delete 1;` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  e.g. if the command specifies `-c CARBS -p PROTEIN`, `-p PROTEIN -c CARBS` is also acceptable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shows all help commands in the terminal."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![help message](images/CommandImagesForUG/Help.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### Adding a food item: `add`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Add food item to McGymmy"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `add -n NAME [-p PROTEIN] [-f FATS] [-c CARBS]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n potato -p 100 -c 5 -f 0`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n McSpicy`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* `add -n Wonton Mee -c 10`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![add command example](images/CommandImagesForUG/Add.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Tagging food items : `tag`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Tags a food item in McGymmy."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Tags `TAG_NAME` for food item at the specified `INDEX`. The index refers to the index number shown in the displayed food list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `tag INDEX -t TAG_NAME`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![tag command example](images/CommandImagesForUG/Tag.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Tagging food items : `untag`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Untags a food item in McGymmy."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Untags `TAG_NAME` for food item at the specified `INDEX`. The index refers to the index number shown in the displayed food list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `untag INDEX -t TAG_NAME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![untag command example](images/CommandImagesForUG/Untag.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Finding a food item: `find`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Find specified foods within McGymmy with a keyword"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Finds all food within McGymmy with a keyword"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `find KEYWORDS`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![find_command_example](images/CommandImagesForUG/Find.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### Listing all food items : `list`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shows a list of all food items in McGymmy."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* List all food items in McGymmy"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![list command example](images/CommandImagesForUG/List.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Editing a food item : `edit`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Edit the food item details based on the index."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `edit INDEX [-n NAME] [-p PROTEIN] [-c CARBS] [-f FATS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Edits the food item at the specified `INDEX`. The index refers to the index number shown in the displayed food list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "*  `edit 3 -n banana -p 120` Changes the `name` and `protein` values of the 3rd item in the list to `banana` and `120` respectively."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![edit command example](images/CommandImagesForUG/Edit.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jh123x"
        },
        "content": "### Deleting a food item: `delete`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Deletes the specified food from McGymmy."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* Deletes the food at the specified `INDEX`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd food item in McGymmy."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "![delete command example](images/CommandImagesForUG/Delete.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### Creating a macro command : `macro`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Creates a macro in McGymmy."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Creates a macro with name `SHORTCUT` which executes `COMMAND_1; COMMAND_2; ...`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Format: `macro SHORTCUT; COMMAND_1; [COMMAND_2;] …​`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "![Alias command example](images/CommandImagesForUG/Macro.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* Exits McGymmy"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "McGymmy\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous McGymmy home folder."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Action     | Format, Examples"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jh123x"
        },
        "content": "-----------|------------------"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Add**    | `add -n NAME [-p PROTEIN] [-f FATS] [-c CARBS]` \u003cbr\u003e e.g., `add Chicken Rice -p 10 -f 5 -c 23`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**edit**   | `edit INDEX [-n NAME] [-p PROTEIN] [-f FATS] [-c CARBS]`\u003cbr\u003e e.g.,`edit 2 -n Chicken Rice -p 30 -f 50 -c 60`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "**List**   | `list`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "**Help**   | `help`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Find**   | `find KEYWORDS` \u003cbr\u003e e.g., `find chicken`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Tag**    | `tag INDEX -t TAG_NAME` \u003cbr\u003e e.g., `tag 1 -t Lunch`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**UnTag**  | `untag INDEX -t TAG_NAME` \u003cbr\u003e e.g., `untag 1 -t Lunch`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Macro**  | `macro SHORTCUT; COMMAND_1; [COMMAND_2;] …​` \u003cbr\u003e e.g., `macro lunch; add Chicken"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**Exit**   | `exit`"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 3,
      "jh123x": 55,
      "joeychensmart": 26,
      "-": 122
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "title: McGymmy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W17-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "**McGymmy is a desktop application for managing and keeping track of your food details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* If you are interested in using McGymmy, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* If you are interested about developing McGymmy, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "jh123x": 7,
      "-": 12
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "## Project: McGymmy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "McGymmy is a desktop diet tracker application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    * Add documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "jh123x": 3,
      "-": 43
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Looking in the `jimmy.mcgymmy.logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/jimmy/mcgymmy/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Changes the remark of an existing food in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `McGymmyParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the food identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            + \"by the index number used in the last food listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param index of the food in the filtered food list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param remark of the food to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Create a `RemarkCommandParser` class in the `jimmy.mcgymmy.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of food data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the food’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a food."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Create a new `Remark` in `jimmy.mcgymmy.model.food`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each food."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jh123x"
        },
        "content": "Simply add the following to [`jimmy.mcgymmy.ui.FoodCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public PersonCard(Person food, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    remark.setText(food.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Person editedFood \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.setPerson(personToEdit, editedFood);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedFood));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "jh123x": 21,
      "-": 373
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "The `address` field in `Person` is actually an instance of the `jimmy.mcgymmy.model.food.Carbohydrate` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "\u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "  \"foods\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \"protein\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \"fat\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "-": 97
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `jimmy.mcgymmy.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       Person editedFood \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       if (!personToEdit.isSamePerson(editedFood) \u0026\u0026 model.hasPerson(editedFood)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       model.setPerson(personToEdit, editedFood);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "       foods.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "-": 244
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.McGymmyStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing McGymmy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmyStorage mcGymmyStorage \u003d new JsonMcGymmyStorage(userPrefs.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        storage \u003d new StorageManager(mcGymmyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s McGymmy and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The data from the sample McGymmy will be used instead if {@code storage}\u0027s McGymmy is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * or an empty McGymmy will be used instead if errors occur when reading {@code storage}\u0027s McGymmy."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Optional\u003cReadOnlyMcGymmy\u003e mcGymmyOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mcGymmyOptional \u003d storage.readMcGymmy();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (!mcGymmyOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample McGymmy\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d mcGymmyOptional.orElseGet(SampleDataUtil::getSampleMcGymmy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d new McGymmy();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            initialData \u003d new McGymmy();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty McGymmy\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"Starting McGymmy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping McGymmy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 43,
      "-": 139
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String LOG_FILE \u003d \"mcgymmy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food items listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 18,
      "-": 99
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 10,
      "-": 44
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 82
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "-": 139
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns McGymmy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see Model#getMcGymmy()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ReadOnlyMcGymmy getMcGymmy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.McGymmyParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final McGymmyParser mcGymmyParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable executable \u003d mcGymmyParser.parse(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        commandResult \u003d executable.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            storage.saveMcGymmy(model.getMcGymmy());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getMcGymmy();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 17,
      "joeychensmart": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Adds a food to mcgymmy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Add a new food item to McGymmy.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: \\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cName\u003e nameParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"name\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"n\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Name of food to add\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Chicken Rice\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseName"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cProtein\u003e proteinParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"protein value\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"p\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Protein value of food (g)\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseProtein"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cFat\u003e fatParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"fat value\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"f\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Fat value of food (g)\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseFat"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cCarbohydrate\u003e carbParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"carb value\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"c\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Carbohydrate value of food (g)\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseCarb"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cTag\u003e tagParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"tag\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag associated with the Food\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cName\u003e nameParameter, OptionalParameter\u003cProtein\u003e proteinParameter,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cFat\u003e fatParameter, OptionalParameter\u003cCarbohydrate\u003e carbParameter,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cTag\u003e tagParameter) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.nameParameter \u003d nameParameter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.proteinParameter \u003d proteinParameter;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fatParameter \u003d fatParameter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbParameter \u003d carbParameter;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // rewriting this class as an example, tags not implemented."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Name newName \u003d nameParameter.consume();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein newProtein \u003d this.proteinParameter.getValue().orElse(new Protein(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat newFat \u003d this.fatParameter.getValue().orElse(new Fat(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate newCarb \u003d this.carbParameter.getValue().orElse(new Carbohydrate(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food toAdd \u003d new Food(newName, newProtein, newFat, newCarb);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (this.tagParameter.getValue().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Tag newTag \u003d this.tagParameter.getValue().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            toAdd.addTag(newTag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 61,
      "joeychensmart": 12,
      "-": 14,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Clears mcgymmy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Delete all food items in McGymmy.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"McGymmy has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.setMcGymmy(new McGymmy());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "joeychensmart": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class Command implements CommandExecutable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final ParameterSet parameterSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Registers a parameter for use in the parameter set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Only registered parameters will be used in parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameter parameter to be registered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected void registerParameter(AbstractParameter parameter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.parameterSet.addParameter(parameter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParameterConflictException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // Commands can only be created by the developers so any parameter conflicts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // should not happen, and should fail here during testing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assert false : e.getMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new required parameter for this command. Also registers it for parsing in the parameter set,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * i.e. will be used in the parser."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected \u003cT\u003e Parameter\u003cT\u003e addParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                            String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parameter\u003cT\u003e parameter \u003d new Parameter\u003c\u003e(name, flag, description, example, converter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.registerParameter(parameter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new required parameter for this command. Parameter will contain the raw input from the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Also registers it for parsing in the parameter set, i.e. will be used in the parser."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Parameter\u003cString\u003e addParameter(String name, String flag, String description, String example) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.addParameter(name, flag, description, example, (s) -\u003e s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new optional parameter for this command. Also registers it for parsing in the parameter set,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * i.e. will be used in the parser."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected \u003cT\u003e OptionalParameter\u003cT\u003e addOptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                                            String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cT\u003e parameter \u003d new OptionalParameter\u003c\u003e(name, flag, description, example, converter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.registerParameter(parameter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new optional parameter for this command. Parameter will contain the raw input from the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Also registers it for parsing in the parameter set, i.e. will be used in the parser."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected OptionalParameter\u003cString\u003e addOptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                                                             String example) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.addOptionalParameter(name, flag, description, example, (s) -\u003e s);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterSet getParameterSet() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterSet;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "joeychensmart": 81,
      "-": 7
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/CommandExecutable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Interface for generalized Commands run by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface CommandExecutable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 19
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "-": 68
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Deletes a food identified using it\u0027s displayed index from mcgymmy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Delete the selected food item.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index number used in the displayed food list.\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Index targetIndex \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.deleteFood(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 13,
      "joeychensmart": 13,
      "-": 21,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Edits the details of an existing food in mcgymmy."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Edit the selected food item.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index number used in the displayed food list.\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"2\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cName\u003e nameParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"name\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"n\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Name of food to add\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"John Doe\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ParserUtil::parseName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cProtein\u003e proteinParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"protein value\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"p\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Protein value of food (g)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseProtein"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cFat\u003e fatParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"fat value\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"f\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Fat value of food (g)\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseFat"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private OptionalParameter\u003cCarbohydrate\u003e carbParameter \u003d this.addOptionalParameter("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"carb value\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"c\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Carbohydrate value of food (g)\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"10\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseCarb"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, OptionalParameter\u003cName\u003e nameParameter,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cProtein\u003e proteinParameter, OptionalParameter\u003cFat\u003e fatParameter,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                       OptionalParameter\u003cCarbohydrate\u003e carbParameter) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.nameParameter \u003d nameParameter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.proteinParameter \u003d proteinParameter;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fatParameter \u003d fatParameter;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbParameter \u003d carbParameter;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (nameParameter.getValue().isEmpty() \u0026\u0026 proteinParameter.getValue().isEmpty()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 fatParameter.getValue().isEmpty() \u0026\u0026 carbParameter.getValue().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Name newName \u003d this.nameParameter.getValue().orElseGet(foodToEdit::getName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein newProtein \u003d this.proteinParameter.getValue().orElseGet(foodToEdit::getProtein);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat newFat \u003d this.fatParameter.getValue().orElseGet(foodToEdit::getFat);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate newCarb \u003d this.carbParameter.getValue().orElseGet(foodToEdit::getCarbs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Set\u003cTag\u003e tags \u003d foodToEdit.getTags();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new Food(newName, newProtein, newFat, newCarb, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, editedFood);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 60,
      "joeychensmart": 24,
      "-": 22,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Exit McGymmy.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting McGymmy as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 1,
      "joeychensmart": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Finds and lists all persons in mcgymmy whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Filter the displayed list by a given keyword.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cNameContainsKeywordsPredicate\u003e predicateParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"keyword\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"keywords (case-insensitive).\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"chicken beef mutton\", (s) -\u003e new NameContainsKeywordsPredicate(Arrays.asList(s.split(\"\\\\s+\")))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void setParameters(Parameter\u003cNameContainsKeywordsPredicate\u003e predicateParameter) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.predicateParameter \u003d predicateParameter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d predicateParameter.consume();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, model.getFilteredFoodList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 5,
      "joeychensmart": 15,
      "-": 15
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Lists all food items in mcgymmy to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Display all food items.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all food\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 4,
      "joeychensmart": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Add tags to the selected food item.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag %s already exists in %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Index of selected Food\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cTag\u003e tagParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag to be added to food\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, Parameter\u003cTag\u003e tagParameter) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Tag tag \u003d tagParameter.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (foodToTag.getTags().contains(tag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG, tag.tagName, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodToTag.addTag(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, foodToTag); //To refresh the card"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag.tagName));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64,
      "joeychensmart": 1,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/UnTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class UnTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"untag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Remove a tag from the selected food item.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag removed: %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND_TAG \u003d \"Tag %s does not exist in %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cIndex\u003e indexParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"index\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Index of selected Food\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseIndex"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Parameter\u003cTag\u003e tagParameter \u003d this.addParameter("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"t\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Tag to be removed from food\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Lunch\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            ParserUtil::parseTag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setParameters(Parameter\u003cIndex\u003e indexParameter, Parameter\u003cTag\u003e tagParameter) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.indexParameter \u003d indexParameter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tagParameter \u003d tagParameter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index index \u003d indexParameter.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Tag tag \u003d tagParameter.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!foodToTag.getTags().contains(tag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_FOUND_TAG, tag.tagName, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodToTag.removeTag(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model.setFood(index, foodToTag); //To refresh the card"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag.tagName));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 64,
      "joeychensmart": 1,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/Macro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.PrimitiveCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Macro class that deals with user-created macros."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Macro {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] rawCommands;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Options options;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for macros"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * TODO: more elaboration needed?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name name of the macro."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroArguments List of arguments to the macro."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commands The commands to be run."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if the format of the arguments are wrong."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro(String name, String[] macroArguments, String[] commands) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // TODO: use these strings to serialize macro"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this(name, Macro.parseOptions(macroArguments), commands);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Macro(String name, Options options, String[] commands) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawCommands \u003d commands;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options getOptions() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.options;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable commandInstance(CommandLine args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e executeWith(model, args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Executes the macro on the model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns upon encountering a help or exit function"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * (i.e. does not attempt to execute any command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * after encountering help or exit)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param model Model to run the macro\u0027s commands on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param args arguments to the macro."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return CommandResult produced by concatenating the messages from all the executed commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws CommandException if any command encounters an error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandResult executeWith(Model model, CommandLine args) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] rawCommands \u003d this.substituteAll(args);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cString\u003e messagesToUser \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cCommandExecutable\u003e commandExecutables \u003d this.parseCommands(rawCommands);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int lastCommandIndex \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (lastCommandIndex \u003d 0; lastCommandIndex \u003c commandExecutables.size(); lastCommandIndex++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                CommandResult result \u003d commandExecutables.get(lastCommandIndex).execute(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                if (result.isExit() || result.isShowHelp()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                messagesToUser.add(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(String.join(\"\\n\", messagesToUser));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            /* note: not factoring out code below because its only used here and its"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "               purpose/what it\u0027s doing is obvious, and factoring it out will be very messy. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String errorLocation \u003d \"\\n\\nAn error occurred when executing this command:\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + rawCommands[lastCommandIndex];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String doneCommands \u003d lastCommandIndex \u003d\u003d 0 ? \"\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                : \"\\n\\nThe following commands executed successfully:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + String.join(\"\\n\", Arrays.copyOfRange(rawCommands, 0, lastCommandIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String notDoneCommands \u003d lastCommandIndex + 1 \u003d\u003d rawCommands.length ? \"\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                : \"\\n\\n The following commands were not executed:\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + String.join(\"\\n\", Arrays.copyOfRange(rawCommands, lastCommandIndex + 1, rawCommands.length));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String message \u003d e.getMessage() + errorLocation + doneCommands + notDoneCommands;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static Options parseOptions(String[] macroArgs) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d new Options();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (String name : macroArgs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String description \u003d \"macro argument \" + name;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                Option option \u003d new Option(name, true, description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                option.setRequired(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                options.addOption(option);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // TODO better error message"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(\"Wrong format for macros.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String[] substituteAll(CommandLine args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] output \u003d new String[this.rawCommands.length];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c this.rawCommands.length; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            output[i] \u003d substitute(args, this.rawCommands[i]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private List\u003cCommandExecutable\u003e parseCommands(String[] rawCommands) throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cCommandExecutable\u003e commandExecutables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (String rawCommand : rawCommands) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                commandExecutables.add(parser.parse(rawCommand));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return commandExecutables;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // TODO better error message"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(\"Macro failed to parse: \" + e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String substitute(CommandLine args, String line) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // TODO possibly use a StringBuilder here instead for performance."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Iterator\u003cOption\u003e i \u003d args.iterator(); i.hasNext(); ) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Option option \u003d i.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String from \u003d option.getOpt();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String to \u003d args.getOptionValue(from);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            line \u003d line.replaceAll(\"\\\\\\\\\" + from, to);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String unusedArgs \u003d String.join(\" \", args.getArgList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // regex is matching for \"\\$\"."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return line.replaceAll(\"\\\\\\\\\\\\$\", unusedArgs).trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 151
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/MacroList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * TODO: 1. save list in file/serialize? 2. add default shortcut macros."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Container for macros. Ensures a macro\u0027s name is not taken before"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * allowing it to be added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, Macro\u003e macros;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Set\u003cString\u003e commandNames;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * creates a new MacroList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandNames set of command names that have been taken."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList(Set\u003cString\u003e commandNames) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandNames \u003d commandNames;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean hasMacro(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.containsKey(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isMacroNameTaken(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.hasMacro(name) || commandNames.contains(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a macro to the MacroList silently (no ui interaction)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param newMacro the macro to add."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DuplicateMacroException if the macro\u0027s name has already been taken."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addMacro(Macro newMacro) throws DuplicateMacroException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.isMacroNameTaken(newMacro.getName())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DuplicateMacroException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros.put(newMacro.getName(), newMacro);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro getMacro(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.get(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 50
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/NewMacroCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class NewMacroCommand implements CommandExecutable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final MacroList macroList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String argumentDeclaration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String[] statements;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for this unique command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param macroList Macro list to add the new macro to."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param argumentDeclaration The macro declaration containing the name and arguments to the macro."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *                            e.g. \"macro poop n m\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param statements The commands to be executed in the macro."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public NewMacroCommand(MacroList macroList, String argumentDeclaration, String[] statements) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d macroList; // should this be part of the model?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.argumentDeclaration \u003d argumentDeclaration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.statements \u003d statements;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] splitDeclaration \u003d argumentDeclaration.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Macro newMacro \u003d new Macro("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    splitDeclaration[1],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    Arrays.copyOfRange(splitDeclaration, 2, splitDeclaration.length),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    this.statements);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.macroList.addMacro(newMacro);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(newMacro.getName() + \" successfully added.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DuplicateMacroException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // TODO better errors?"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new CommandException(\"Error: missing macro name.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getArgumentDeclaration() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return argumentDeclaration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String[] getStatements() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return statements;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 55
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/macro/exceptions/DuplicateMacroException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DuplicateMacroException extends IllegalValueException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String defaultMessage \u003d \"This macro\u0027s name has already been taken.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DuplicateMacroException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(defaultMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 11
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/McGymmyParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.Macro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.MacroList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.NewMacroCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Parser for all McGymmy commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class McGymmyParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final MacroList macroList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser primitiveCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for McGymmyParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public McGymmyParser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.primitiveCommandParser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Set\u003cString\u003e takenNames \u003d new HashSet\u003c\u003e(this.primitiveCommandParser.getRegisteredCommands());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        takenNames.add(\"macro\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d new MacroList(takenNames);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command or macro."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param text raw input from the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parse(String text) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParserUtil.HeadTailString headTail \u003d ParserUtil.HeadTailString.splitString(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandName \u003d headTail.getHead();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (commandName.equals(\"macro\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return parseCreateMacro(text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (this.macroList.hasMacro(commandName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.parseRunMacro(commandName, headTail.getTail());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (this.primitiveCommandParser.hasCommand(commandName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.primitiveCommandParser.parsePrimitiveCommand(commandName, headTail.getTail());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList getMacroList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new macro using the String declaration."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param declaration Macro declaration string. Format in the user guide."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Macro that was created"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if declaration has the wrong format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private CommandExecutable parseCreateMacro(String declaration) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // note: following line also trims whitespace between semicolons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParserUtil.HeadTailString headTail \u003d ParserUtil.HeadTailString.splitString(declaration, \" *; *\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] tailWithoutBlanks \u003d Arrays.stream(headTail.getTail())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .filter(s-\u003e!s.isBlank())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new NewMacroCommand(this.macroList, headTail.getHead(), tailWithoutBlanks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private CommandExecutable parseRunMacro(String commandName, String[] arguments) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLineParser commandLineParser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro macro \u003d this.macroList.getMacro(commandName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d macro.getOptions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            CommandLine args \u003d commandLineParser.parse(options, arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return macro.commandInstance(args);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (org.apache.commons.cli.ParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String formattedHelp \u003d ParserUtil.getUsageFromHelpFormatter(commandName, \"\", options);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(formattedHelp);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 91
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.HelpFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Gets integer from string value."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param value        String containing value of nutrient."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param errorMessage String containing the error message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return Integer value of string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the value is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static int getNutrientValue(String value, String errorMessage) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int nutrientValue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            nutrientValue \u003d Integer.parseInt(trimmedValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (NumberFormatException numberFormatException) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new ParseException(errorMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return nutrientValue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String protein} into a {@code Protein}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code Protein} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int proteinValue \u003d getNutrientValue(protein, Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Protein(proteinValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String carb} into an {@code Carbohydrate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code carb} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Carbohydrate parseCarb(String carb) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int carbValue \u003d getNutrientValue(carb, Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Carbohydrate(carbValue);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses a {@code String fat} into an {@code Fat}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws ParseException if the given {@code fat} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Fat parseFat(String fat) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        int fatValue \u003d getNutrientValue(fat, Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Fat(fatValue);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Helper function for commons-cli\u0027s HelpFormatter."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Generates the usage string from commons-cli options."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param header extra text to be included before usage statement."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param options commons-cli options to format."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return usage string."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static String getUsageFromHelpFormatter(String commandName, String header, Options options) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        HelpFormatter formatter \u003d new HelpFormatter();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(stringWriter);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        formatter.printHelp("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            printWriter,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getWidth(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            commandName,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            header,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            options,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getLeftPadding(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            formatter.getDescPadding(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stringWriter.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Because Java does not support tuples/pairs."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Also a ton of boilerplate because module guidelines"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * doesn\u0027t let me use public variables even here."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static class HeadTailString {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // mandated private fields from the Church of OOP."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final String head;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final String[] tail;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // package private because it can only be created here"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        HeadTailString(String head, String[] tail) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.head \u003d head;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.tail \u003d tail;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Splits a string using the delimiter,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * storing the first string as the head, and the rest as the tail."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param input raw input string."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param delimiter Java regex string to split the string by."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @return HeadTailString object which is essentially a pair (String, String[]) but with Java cruft."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public static HeadTailString splitString(String input, String delimiter) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String[] headTail \u003d input.split(delimiter);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return new HeadTailString(headTail[0], Arrays.copyOfRange(headTail, 1, headTail.length));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return new HeadTailString(\"\", new String[]{\"\"});"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Splits a string by whitespaces,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * storing the first string as the head, and the rest as the tail."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param input raw input string."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @return HeadTailString object which is essentially a pair (String, String[]) but with Java cruft."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public static HeadTailString splitString(String input) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return HeadTailString.splitString(input, \"\\\\s+\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String getHead() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return head;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String[] getTail() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return tail;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 57,
      "joeychensmart": 84,
      "-": 77
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandHelpUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * A class to generate various help strings for primitive commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandHelpUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, String\u003e commandDescriptionTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    PrimitiveCommandHelpUtil(Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable, Map\u003cString, String\u003e commandDescriptionTable) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandTable \u003d commandTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandDescriptionTable \u003d commandDescriptionTable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates the usage string using commons-cli\u0027s HelpFormatter and the createExampleCommand function."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameterSet parameterSet of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return usage string for the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getUsage(String commandName, ParameterSet parameterSet) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d parameterSet.asOptions();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String formattedHelp \u003d ParserUtil.getUsageFromHelpFormatter(commandName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                getUnnamedParameterUsage(parameterSet), options);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return formattedHelp + \"\\nEXAMPLE: \" + createExampleCommand(commandName, parameterSet.getParameterList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String getUnnamedParameterUsage(ParameterSet parameterSet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterSet.getUnnamedParameter()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .map(param -\u003e String.format(\"\u003carg\u003e %s: %s\", param.getName(), param.getDescription()))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .orElseGet(() -\u003e \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String createExampleCommand(String commandName, List\u003cAbstractParameter\u003e parameterList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandName + \" \" + parameterList.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .map(p -\u003e p.getFlag().equals(\"\") ? p.getExample() : \"-\" + p.getFlag() + \" \" + p.getExample())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String formatAllCommandsHelp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are all the available commands.\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"\\n\\nType: \u0027help [COMMAND]\u0027 for more info on a specific command.\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String commandName : commandDescriptionTable.keySet()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            result.append(String.format(\"\\n%s: %s\", commandName, commandDescriptionTable.get(commandName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Generates a command that outputs the usage of the given command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName the command to generate usage of."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command that outputs the usage string of the command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable newHelpCommand(String commandName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!commandTable.containsKey(commandName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw new CommandException(\"Error: That command does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Command usageOf \u003d commandTable.get(commandName).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(getUsage(commandName, usageOf.getParameterSet()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a command that lists all available commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command that outputs all available commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable newHelpCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return model -\u003e new CommandResult(formatAllCommandsHelp());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 85
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import jimmy.mcgymmy.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import jimmy.mcgymmy.logic.commands.UnTagCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.ParameterSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Parser for Primitive (non-macro) McGymmy commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, Supplier\u003cCommand\u003e\u003e commandTable;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Map\u003cString, String\u003e commandDescriptionTable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final CommandLineParser parser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandHelpUtil helpUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new McGymmyParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public PrimitiveCommandParser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandDescriptionTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.helpUtil \u003d new PrimitiveCommandHelpUtil(commandTable, commandDescriptionTable);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addDefaultCommands();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void addDefaultCommands() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(AddCommand.COMMAND_WORD, AddCommand.SHORT_DESCRIPTION, AddCommand::new);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(EditCommand.COMMAND_WORD, EditCommand.SHORT_DESCRIPTION, EditCommand::new);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(DeleteCommand.COMMAND_WORD, DeleteCommand.SHORT_DESCRIPTION, DeleteCommand::new);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(ClearCommand.COMMAND_WORD, ClearCommand.SHORT_DESCRIPTION, ClearCommand::new);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(ExitCommand.COMMAND_WORD, ExitCommand.SHORT_DESCRIPTION, ExitCommand::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(FindCommand.COMMAND_WORD, FindCommand.SHORT_DESCRIPTION, FindCommand::new);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(ListCommand.COMMAND_WORD, ListCommand.SHORT_DESCRIPTION, ListCommand::new);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(TagCommand.COMMAND_WORD, TagCommand.SHORT_DESCRIPTION, TagCommand::new);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addCommand(UnTagCommand.COMMAND_WORD, UnTagCommand.SHORT_DESCRIPTION, UnTagCommand::new);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param text raw input from the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parse(String text) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParserUtil.HeadTailString headTail \u003d ParserUtil.HeadTailString.splitString(text);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (headTail.getHead().equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(\"Please enter a command.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parsePrimitiveCommand(headTail.getHead(), headTail.getTail());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses a raw input string from the user into an executable Command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandName name of the command. Typically the first word in the line."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param arguments array of String arguments to the command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Command if parsing is successful"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if command is not found"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if a required argument to the command is not supplied"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if an argument to the command is not in the correct format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable parsePrimitiveCommand(String commandName, String[] arguments) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (commandName.equals(\"help\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return this.helpUtil.newHelpCommand(arguments[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return this.helpUtil.newHelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!this.commandTable.containsKey(commandName)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command result \u003d this.commandTable.get(commandName).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d result.getParameterSet();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d parameterSet.asOptions();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            CommandLine cmd \u003d this.parser.parse(options, arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.provideValuesToParameterSet(cmd, parameterSet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (org.apache.commons.cli.ParseException | ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String message \u003d e.getMessage() + \"\\n\" + helpUtil.getUsage(commandName, parameterSet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParseException(message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Helper function that takes values in the commons-cli CommandLine object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * and puts them in the parameterList"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * TODO do we need to refactor this?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param cmd          CommandLine object to take values from"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameterSet parameterSet to put values in"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParseException if any of the parameter\u0027s conversion functions breaks (wrongly formatted argument)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void provideValuesToParameterSet(CommandLine cmd, ParameterSet parameterSet) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cAbstractParameter\u003e parameterList \u003d parameterSet.getParameterList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter parameter : parameterList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String flag \u003d parameter.getFlag();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (flag.equals(\"\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                List\u003cString\u003e unconsumedArgs \u003d cmd.getArgList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                if (unconsumedArgs.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    String message \u003d parameterSet.getUnnamedParameter()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                            .map(param -\u003e String.format(\"Missing required option: %s\", param.getName()))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                            .orElseGet(() -\u003e \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    throw new ParseException(message);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parameter.setValue(String.join(\" \", unconsumedArgs));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String[] values \u003d cmd.getOptionValues(flag);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                if (values \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    // optional value that was not supplied by user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parameter.setValue(String.join(\" \", values));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a new command into the parser."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Package private for testing purposes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name            Name of command to be added"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param commandSupplier a constructor of the command taking no arguments"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void addCommand(String name, String description, Supplier\u003cCommand\u003e commandSupplier) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !this.commandTable.containsKey(name) : name + \" command has already been added\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandDescriptionTable.put(name, description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandTable.put(name, commandSupplier);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Set\u003cString\u003e getRegisteredCommands() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Set\u003cString\u003e result \u003d new HashSet\u003c\u003e(this.commandTable.keySet());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        result.add(\"help\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Boolean hasCommand(String command) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.getRegisteredCommands().contains(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // for testing"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Map\u003cString, Supplier\u003cCommand\u003e\u003e getCommandTable() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandTable;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Map\u003cString, String\u003e getCommandDescriptionTable() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return commandDescriptionTable;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 15,
      "joeychensmart": 158,
      "-": 2
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/exceptions/ParameterConflictException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterConflictException extends IllegalValueException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String defaultMessage \u003d \"The command cannot have multiple parameters with the same name.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterConflictException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(defaultMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 9
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/AbstractParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Abstract class for the parameter classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Option option;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String example;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cString\u003e rawValue \u003d Optional.empty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected AbstractParameter(String name, String flag, String description, String example, boolean isRequired) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.example \u003d example;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.option \u003d Option.builder(flag)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .longOpt(name)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .desc(description)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .hasArg()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .numberOfArgs(Option.UNLIMITED_VALUES)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .required(isRequired)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.rawValue \u003d Optional.of(rawValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cString\u003e getRawValue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.rawValue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.flag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getExample() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.example;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Option asOption() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.option;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 59
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/OptionalParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class used to declare and contain optional parameters for McGymmy commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cT\u003e The type of the parameter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class OptionalParameter\u003cT\u003e extends AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private ParameterConverter\u003cT\u003e converter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cT\u003e value \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Create an optional parameter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public OptionalParameter(String name, String flag, String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                             String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(name, flag, description, example, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.converter \u003d converter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public Optional\u003cT\u003e getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super.setValue(rawValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.value \u003d Optional.of(converter.apply(rawValue));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "joeychensmart": 33
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/Parameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class used to declare and contain required parameters for McGymmy commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cT\u003e The type of the parameter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Parameter\u003cT\u003e extends AbstractParameter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final ParameterConverter\u003cT\u003e converter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Optional\u003cT\u003e value \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Create a required parameter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name        Name of the parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param flag        flag used in the command, e.g. \u0027-c\u0027 in \u0027add banana -c 100\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param description short description of what the parameter represents, e.g. \u0027carbs as an integer\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param example     example value, e.g. \u0027100\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param converter   Function to parse the value from a String to T. May throw a ParseError."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Parameter(String name, String flag, String description, String example, ParameterConverter\u003cT\u003e converter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(name, flag, description, example, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.converter \u003d converter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setValue(String rawValue) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super.setValue(rawValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.value \u003d Optional.of(converter.apply(rawValue));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the value entered by the user. Value is guaranteed to be present."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return T value that was parsed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public T consume() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.value.isPresent() : \"Command being run before being initialized correctly.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.value.get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "joeychensmart": 40
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/ParameterConverter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Functional interface for parameter parsers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * @param \u003cR\u003e Output type of this parser."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface ParameterConverter\u003cR\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    R apply(String t) throws ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "joeychensmart": 10
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/logic/parser/parameter/ParameterSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Container for AbstractParameter objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cAbstractParameter\u003e parameterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Options options \u003d new Options();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public ParameterSet() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void refreshOptions() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d new Options();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter parameter : this.parameterList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (parameter.getFlag().equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                // unnamed parameter, e.g. \u00271\u0027 in \u0027DELETE 1\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.options.addOption(parameter.asOption());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a parameter to the set"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param parameter parameter to add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws ParameterConflictException if there are 2 parameters with the same flag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addParameter(AbstractParameter parameter) throws ParameterConflictException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parameterList.add(parameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.hasParameterConflict()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new ParameterConflictException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.refreshOptions();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean hasParameterConflict() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        HashSet\u003cString\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameterList.forEach(x -\u003e set.add(x.getFlag()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return set.size() !\u003d parameterList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the unnamed parameter, if present"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Optional.of the unnamed parameter is present, Optional.empty() otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cAbstractParameter\u003e getUnnamedParameter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (AbstractParameter param : parameterList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (param.getFlag().equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return Optional.of(param);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Get the set of commons-cli options generated from the parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return commons-cli options"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options asOptions() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public List\u003cAbstractParameter\u003e getParameterList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return parameterList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "joeychensmart": 75
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/McGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fridge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Wraps all data at mcgymmy level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmy implements ReadOnlyMcGymmy {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Fridge foodItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodItems \u003d new Fridge();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates an McGymmy using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy(ReadOnlyMcGymmy toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the contents of the Food list with {@code Foods}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code Foods} must not contain duplicate Foods."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoodItems(List\u003cFood\u003e foodItems) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.foodItems.setFoods(foodItems);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Resets the existing data of this {@code McGymmy} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData(ReadOnlyMcGymmy newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        setFoodItems(newData.getFoodList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Food-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if a Food with the same identity as {@code Food} exists in mcgymmy."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.contains(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a Food to mcgymmy."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The Food must not already exist in mcgymmy."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodItems.add(food);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the given Food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * {@code index} must be valid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        foodItems.setFood(index, editedFood);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes {@code key} from this {@code McGymmy}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * {@code index} must be valid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void removeFood(Index index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        foodItems.remove(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.asUnmodifiableObservableList().size() + \" Foods\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                || (other instanceof McGymmy // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 foodItems.equals(((McGymmy) other).foodItems));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodItems.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 103,
      "aidoxe-123": 7
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the user prefs\u0027 mcgymmy file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setMcGymmyFilePath(Path mcGymmyFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns  McGymmy"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ReadOnlyMcGymmy getMcGymmy();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Set McGymmy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void setMcGymmy(ReadOnlyMcGymmy mcGymmy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in mcgymmy."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void deleteFood(Index index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code food} must not already exist in mcgymmy."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The index must be valid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    void setFood(Index index, Food editedFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the filtered food list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 33,
      "-": 52,
      "aidoxe-123": 6
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents the in-memory model of mcgymmmy data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmy mcGymmy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoodItems;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Initializes a ModelManager with the given mcGymmy and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ModelManager(ReadOnlyMcGymmy mcGymmy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(mcGymmy, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        logger.fine(\"Initializing with food list: \" + mcGymmy + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy \u003d new McGymmy(mcGymmy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        filteredFoodItems \u003d new FilteredList\u003c\u003e(this.mcGymmy.getFoodList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(new McGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return userPrefs.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmyFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(mcGymmyFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McGymmy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmy(ReadOnlyMcGymmy mcGymmy) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy.resetData(mcGymmy);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy.hasFood(food);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void deleteFood(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        mcGymmy.removeFood(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(food);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, editedFood);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        mcGymmy.setFood(index, editedFood);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code versionedMcGymmy}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return filteredFoodItems;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        filteredFoodItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy.equals(other.mcGymmy)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 filteredFoodItems.equals(other.filteredFoodItems);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "jh123x": 41,
      "-": 100,
      "aidoxe-123": 6
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ReadOnlyMcGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Unmodifiable view of mcgymmy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public interface ReadOnlyMcGymmy {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 17
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Path mcGymmyFilePath \u003d Paths.get(\"data\", \"mcgymmy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        setMcGymmyFilePath(newUserPrefs.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmyFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmyFilePath \u003d mcGymmyFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 mcGymmyFilePath.equals(o.mcGymmyFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Objects.hash(guiSettings, mcGymmyFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mcGymmyFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 13,
      "-": 74,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Carbohydrate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Carbodydrates in food item in McGymmy."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Carbohydrate extends Macronutrient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Carbohydrate \" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int CARBOHYDRATE_MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public Carbohydrate(int amount) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        super(amount, CARBOHYDRATE_MULTIPLIER);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Carbohydrate(String amount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(Integer.parseInt(amount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "dcchan98": 13,
      "jh123x": 7,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Fat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Fats in food item in McGymmy."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Fat extends Macronutrient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Fat \" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final int FAT_MULTIPLIER \u003d 9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public Fat(int amount) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        super(amount, FAT_MULTIPLIER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Fat(String amount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(Integer.parseInt(amount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "dcchan98": 14,
      "jh123x": 6,
      "aidoxe-123": 1
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": " * Represents a Food item in McGymmy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final String FOOD_NAME_MESSAGE_CONSTRAINT \u003d \"Food name can take in any value, and it cannot be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * The first character of name must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    // Identity field names"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private final Protein protein;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private final Carbohydrate carbs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, protein, carbs, fat);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidName(name.toString()), FOOD_NAME_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    // Constructor for convenience"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * A Constructor made for convenience"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food(String name, int proteinAmount, int fatAmount, int carbsAmount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(new Name(name), new Protein(proteinAmount), new Fat(fatAmount), new Carbohydrate(carbsAmount));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food(Name name, Protein protein, Fat fat, Carbohydrate carbs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(name, protein, fat, carbs, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private boolean isValidName(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @return total caloric content of food item"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        return this.getProtein().getTotalCalories()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + this.getCarbs().getTotalCalories()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + this.getFat().getTotalCalories();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    // getters : make when needed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Protein getProtein() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return this.protein;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Carbohydrate getCarbs() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return this.carbs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return this.fat;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(protein, carbs, fat);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getName().equals(otherFood.getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getProtein().equals(otherFood.getProtein())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getCarbs().equals(otherFood.getCarbs())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                \u0026\u0026 this.getFat().equals(otherFood.getFat());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    // Displays"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    // name + PCF details + total calories"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return \"Food:\" + this.getName() + \"\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"protein: \" + protein.getAmount() + \"\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"carbs: \" + carbs.getAmount() + \"\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"fat: \" + fat.getAmount() + \"\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "dcchan98": 48,
      "jh123x": 37,
      "aidoxe-123": 44
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Fridge.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A list of food items that allows repeated elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class Fridge implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns true if the list contains an equivalent food item as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a food item to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the food item at the {@code index} position in the list with {@code editedFood}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(editedFood, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.set(index.getZeroBased(), editedFood);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Removes the food item at the position index from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The food item must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void remove(Index removeIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(removeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.remove(removeIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoods(Fridge replacement) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(foods);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                || (other instanceof Fridge // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 internalList.equals(((Fridge) other).internalList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 93
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Macronutrient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public abstract class Macronutrient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"values should only contain positive numbers\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"(\\\\d)+\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int caloricMultiplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final int totalCalories;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Represents macronutrients of 3 types"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param amount            The amount of the macronutrient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param caloricMultiplier This value varies for each macronutrient type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Macronutrient(int amount, int caloricMultiplier) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CollectionUtil.requireAllNonNull(amount, caloricMultiplier);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // use this instead of assert because the amount \u003c 0 error is more because of user input than developer\u0027s fault"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidAmount(amount), getMessageConstraint());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assert (caloricMultiplier \u003d\u003d 4 || caloricMultiplier \u003d\u003d 9) : \"Invalid Macronutrient Multiplier\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // initialise variables"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.caloricMultiplier \u003d caloricMultiplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.totalCalories \u003d caloricMultiplier * amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Check if the string is a Valid Macronutrient amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param value String value of Macronutrient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @return if the String is valid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static boolean isValid(String value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return value.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private boolean isValidAmount(int amount) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return amount \u003e\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private String getMessageConstraint() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getMacronutrientType() + \" amount can only take in value larger than 0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String res \u003d this.getMacronutrientType() + \": \" + this.getAmount() + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!(other instanceof Macronutrient)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Macronutrient otherMacronutrient \u003d (Macronutrient) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getMacronutrientType().equals(otherMacronutrient.getMacronutrientType())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 this.getAmount() \u003d\u003d otherMacronutrient.getAmount();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // take the type from the class name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public String getMacronutrientType() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getAmount() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getCaloricMultiplier() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return caloricMultiplier;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public int getTotalCalories() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return totalCalories;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 85
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a Food\u0027s name in mcgymmy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/food/Protein.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " * Represents Protein in food item in McGymmy."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dcchan98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "public class Protein extends Macronutrient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final int MULTIPLIER \u003d 4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \"Protein \" + Macronutrient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public Protein(int amount) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        super(amount, MULTIPLIER);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Protein(String amount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this(Integer.parseInt(amount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dcchan98": 13,
      "jh123x": 9
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a Tag in mcgymmy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Contains utility methods for populating {@code McGymmy} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Chicken Rice\"), new Protein(200), new Fat(300),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    new Carbohydrate(100),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    getTagSet(\"Lunch\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Rice Bowl\"), new Protein(300), new Fat(200),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    new Carbohydrate(100),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    getTagSet(\"Lunch\", \"Dinner\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Fried Chicken\"), new Protein(200), new Fat(100),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    new Carbohydrate(10),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    getTagSet(\"Tasty\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new Food(new Name(\"Nasi Lemak\"), new Protein(20), new Fat(17),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    new Carbohydrate(31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    getTagSet(\"Lunch\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static ReadOnlyMcGymmy getSampleMcGymmy() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy sampleMG \u003d new McGymmy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (Food sampleFood : getSamplePersons()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            sampleMG.addFood(sampleFood);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return sampleMG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 29,
      "-": 25
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final String carbs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"protein\") String protein,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                           @JsonProperty(\"fat\") String fat, @JsonProperty(\"carbs\") String carbs,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbs \u003d carbs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d Integer.toString(source.getProtein().getAmount());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d Integer.toString(source.getFat().getAmount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbs \u003d Integer.toString(source.getCarbs().getAmount());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (protein \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Protein.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!Protein.isValid(protein)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Protein modelProtein \u003d new Protein(Integer.parseInt(protein));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (fat \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!Fat.isValid(fat)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Fat modelFat \u003d new Fat(Integer.parseInt(fat));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (carbs \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Carbohydrate.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!Carbohydrate.isValid(carbs)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new IllegalValueException(Carbohydrate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final Carbohydrate modelCarbohydrate \u003d new Carbohydrate(Integer.parseInt(carbs));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Food(modelName, modelProtein, modelFat, modelCarbohydrate, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 107
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonMcGymmyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A class to access McGymmy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonMcGymmyStorage implements McGymmyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMcGymmyStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonMcGymmyStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return readMcGymmy(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Similar to {@link #readMcGymmy()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Optional\u003cJsonSerializableMcGymmy\u003e jsonMcGymmy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                filePath, JsonSerializableMcGymmy.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!jsonMcGymmy.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return Optional.of(jsonMcGymmy.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        saveMcGymmy(mcGymmy, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Similar to {@link #saveMcGymmy(ReadOnlyMcGymmy)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        requireNonNull(mcGymmy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMcGymmy(mcGymmy), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 26,
      "-": 54
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonSerializableMcGymmy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * An Immutable McGymmy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "@JsonRootName(value \u003d \"mcgymmy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class JsonSerializableMcGymmy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e food \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Constructs a {@code JsonSerializableMcGymmy} with the given food."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public JsonSerializableMcGymmy(@JsonProperty(\"food\") List\u003cJsonAdaptedFood\u003e food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        this.food.addAll(food);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Converts a given {@code ReadOnlyMcGymmy} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMcGymmy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public JsonSerializableMcGymmy(ReadOnlyMcGymmy source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        food.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Converts this McGymmy into the model\u0027s {@code McGymmy} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : food) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (mcGymmy.hasFood(food)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mcGymmy.addFood(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "jh123x": 17,
      "-": 34
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/McGymmyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Represents a storage for {@link McGymmy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public interface McGymmyStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns McGymmy data as a {@link ReadOnlyMcGymmy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see #getMcGymmyFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Saves the given {@link ReadOnlyMcGymmy} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @param mcGymmy cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * @see #saveMcGymmy(ReadOnlyMcGymmy)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 21,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public interface Storage extends McGymmyStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Path getMcGymmyFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Manages storage of McGymmy data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private McGymmyStorage mcGymmyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code McGymmyStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public StorageManager(McGymmyStorage mcGymmyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmyStorage \u003d mcGymmyStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d McGymmy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyStorage.getMcGymmyFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return readMcGymmy(mcGymmyStorage.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmyStorage.readMcGymmy(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        saveMcGymmy(mcGymmy, mcGymmyStorage.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmyStorage.saveMcGymmy(mcGymmy, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "-": 30
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 75
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/FoodCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label protein;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label carb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Label totalCalories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodCode} with the given {@code Food} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein.setText(food.getProtein().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat.setText(food.getFat().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carb.setText(food.getCarbs().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        totalCalories.setText(String.format(\"Calories: %d\", food.getCalories()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 21,
      "-": 58
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/FoodListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 15,
      "-": 32
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w17-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 1,
      "-": 97
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "jh123x": 6,
      "-": 182
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/mcgymmy_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 25,
      "jh123x": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/jimmy/mcgymmy/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 18,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"protein\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$protein\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"carb\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carbohydrate\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fat\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalCalories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalCalories\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "         title\u003d\"McGymmy\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        \u003cImage url\u003d\"@/images/mcgymmy_32.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \u003cVBox fx:id\u003d\"foodList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/mcgymmy_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 101
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                \"Word parameter cannot be empty\", () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                \"Word parameter should be a single word\", () -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                        \"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 9,
      "-": 136
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonMcGymmyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new JsonMcGymmyStorage(temporaryFolder.resolve(\"mcGymmy.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcGymmyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Setup LogicManager with JsonMcGymmyIoExceptionThrowingStub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new JsonMcGymmyIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMcGymmy.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mcGymmyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // String addCommand \u003d AddCommand.COMMAND_WORD + \" -n amy -p 99999999 -e amy@amy.com\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" -n amy -p 99999999 -f 123 -c 123543\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder().withName(new Name(\"amy\")).withProtein(\"99999999\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                .withFat(\"123\").withCarb(\"123543\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static class JsonMcGymmyIoExceptionThrowingStub extends JsonMcGymmyStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        private JsonMcGymmyIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 37,
      "-": 122
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private void initEach() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withCarb(\"12345\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFood.getName()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFood.getProtein()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFood.getFat()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFood.getCarbs()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_validFoodWithTag_addSuccessful() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food validFoodWithTag \u003d new FoodBuilder().withCarb(\"12345\").withTags(\"hello\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFoodWithTag.getName()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFoodWithTag.getProtein()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFoodWithTag.getFat()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFoodWithTag.getCarbs()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\", new Tag(\"hello\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validFoodWithTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFoodWithTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateFood_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withCarb(\"12345\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        AddCommand command \u003d new AddCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.setParameters("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"n\", validFood.getName()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", validFood.getProtein()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", validFood.getFat()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", validFood.getCarbs()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"t\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validFood);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public Path getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void setMcGymmyFilePath(Path mcGymmyFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void setMcGymmy(ReadOnlyMcGymmy mcGymmy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void deleteFood(Index target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        public void setFood(Index index, Food editedFood) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        final ArrayList\u003cFood\u003e foodAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return foodAdded.stream().anyMatch(food::equals);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            foodAdded.add(food);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        public ReadOnlyMcGymmy getMcGymmy() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            return new McGymmy();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "jh123x": 40,
      "joeychensmart": 100,
      "-": 4,
      "aidoxe-123": 47
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_emptyMcGymmy_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_nonEmptyMcGymmy_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.setMcGymmy(new McGymmy());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 30
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO: update this file when we actually add commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * - the food list, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy expectedMcGymmy \u003d new McGymmy(actualModel.getMcGymmy());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedMcGymmy, actualModel.getMcGymmy());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * {@code model}\u0027s food list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 20,
      "joeychensmart": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    TODO:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    1. fails when index is out of bounds"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    2. succeeds when index is valid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.deleteFood(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", index));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.deleteFood(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showNoFood(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcGymmy().getFoodList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deleteCommand.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private void showNoFood(Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model.updateFilteredFoodList(p -\u003e false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(model.getFilteredFoodList().isEmpty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 15,
      "jh123x": 12,
      "joeychensmart": 50,
      "-": 8,
      "aidoxe-123": 9
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String VALID_NAME_BOB \u003d \"Robert Donald\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String VALID_PROTEIN_BOB \u003d \"99999999\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", editedFood.getProtein()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", editedFood.getFat()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", editedFood.getCarbs())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food editedFood \u003d foodInList.withName(new Name(VALID_NAME_BOB)).withProtein(VALID_PROTEIN_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", indexLastFood),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", editedFood.getProtein()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(indexLastFood, editedFood);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedFood \u003d new FoodBuilder(foodInFilteredList).withName(new Name(VALID_NAME_BOB)).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", editedFood.getName()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), editedFood);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateFoodUnfilteredList_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_SECOND_FOOD),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", firstFood.getName()),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", firstFood.getProtein()),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", firstFood.getFat()),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", firstFood.getCarbs())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, firstFood);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), firstFood);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(1), firstFood);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateFoodFilteredList_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // edit food in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodInList \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                model.getMcGymmy().getFoodList().get(INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\", foodInList.getName()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\", foodInList.getProtein()),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\", foodInList.getFat()),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\", foodInList.getCarbs())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, foodInList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new McGymmy(model.getMcGymmy()), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0), foodInList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(1), foodInList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_invalidFoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMcGymmy().getFoodList().size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        editCommand.setParameters("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"n\"),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"p\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"f\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new CommandParserTestUtil.OptionalParameterStub\u003c\u003e(\"c\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        );"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 20,
      "jh123x": 48,
      "joeychensmart": 77,
      "-": 8,
      "aidoxe-123": 46
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 17
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.CHICKEN_RICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.CRISPY_FRIED_FISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_zeroKeywords_noFoodFound() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        command.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", predicate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_multipleKeywords_multipleFoodsFound() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"CHICKEN fish\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        command.setParameters(new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", predicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Arrays.asList(CHICKEN_RICE, CRISPY_FRIED_FISH),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                model.getFilteredFoodList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "jh123x": 18,
      "joeychensmart": 23,
      "-": 7
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.logic.commands.ListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ListCommand(), model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 29,
      "jh123x": 9
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private String tag1 \u003d \"hello\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private String tag2 \u003d \"goodbye\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private String tag3 \u003d \"seeYouAgain\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag1))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, new FoodBuilder(foodToTag).withTags(tag1).build());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag1))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag3))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(Index.fromZeroBased(0),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new FoodBuilder(foodToTag).withTags(tag3).build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void execute_duplicateTag_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        tagCommand.setParameters("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(tag2))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, tag2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, new FoodBuilder(foodToTag).withTags(tag2).build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // add tag for the first time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        CommandTestUtil.assertCommandFailure(tagCommand, model,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            String.format(TagCommand.MESSAGE_DUPLICATE_TAG, tag2, foodToTag.getName().fullName));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 59,
      "aidoxe-123": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/commands/UnTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "class UnTagCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalFoods.getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Food foodToRmTag \u003d model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(UnTagCommand.MESSAGE_SUCCESS, \"lunch\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expFood \u003d new FoodBuilder(foodToRmTag).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expFood.removeTag(new Tag(\"lunch\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(index, expFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(unTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", outOfBoundIndex),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unTagCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"DoesNotExist\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandFailure(unTagCommand, model, String.format(UnTagCommand.MESSAGE_NOT_FOUND_TAG,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                \"DoesNotExist\", food.getName().fullName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.showFoodAtIndex(model, TypicalIndexes.INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food foodToTag \u003d model.getFilteredFoodList().get(TypicalIndexes.INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        UnTagCommand unTagCommand \u003d new UnTagCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        unTagCommand.setParameters("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"\", TypicalIndexes.INDEX_FIRST_FOOD),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new CommandParserTestUtil.ParameterStub\u003c\u003e(\"t\", new Tag(\"lunch\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d String.format(UnTagCommand.MESSAGE_SUCCESS, \"lunch\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food expFood \u003d new FoodBuilder(foodToTag).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        expFood.removeTag(new Tag(\"lunch\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedModel.setFood(TypicalIndexes.INDEX_FIRST_FOOD, expFood);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(unTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 82,
      "aidoxe-123": 4
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/macro/MacroListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.exceptions.DuplicateMacroException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addDuplicate_throwsError() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d new MacroList(Set.of(\"test1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro dummyMacro \u003d new Macro(\"test2\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro duplicateMacro1 \u003d new Macro(\"test1\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro duplicateMacro2 \u003d new Macro(\"test2\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        macroList.addMacro(dummyMacro);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DuplicateMacroException.class, ()-\u003emacroList.addMacro(duplicateMacro1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DuplicateMacroException.class, ()-\u003emacroList.addMacro(duplicateMacro2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO test serialization?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 24
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/macro/MacroTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.getTypicalMcGymmy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Macro testMacro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Macro unnamedParameterTestMacro;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroTest() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String addString \u003d \"add -n %s -c \\\\c -p \\\\p\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] statements \u003d new String[]{String.format(addString, \"first\"), String.format(addString, \"second\")};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.testMacro \u003d new Macro(\"test\", new String[]{\"p\", \"c\"}, statements);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.unnamedParameterTestMacro \u003d new Macro(\"test2\", new String[]{\"q\"}, new String[]{\"add -n \\\\$ -f \\\\q\"});"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_createdWithCorrectOptions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(testMacro.getOptions().hasOption(\"c\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(testMacro.getOptions().hasOption(\"p\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_noExtraOptions() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(testMacro.getOptions().getOptions().size(), 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_addsToModel() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testMacroAdd(testMacro, \"-p 20 -c 200\", new String[]{\"first\", \"second\"});"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacroWithUnnamedParameter_addsToModel() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testMacroAdd(unnamedParameterTestMacro, \"nababa -q 200\", new String[]{\"nababa\"});"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testMacroAdd(unnamedParameterTestMacro, \"cockroach -q 9912629\", new String[]{\"cockroach\"});"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void testMacroAdd(Macro toTest, String arguments, String[] itemsToCheckInModel) throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMcGymmy(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLineParser commandLineParser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d toTest.getOptions();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLine args \u003d commandLineParser.parse(options, arguments.split(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        toTest.executeWith(model, args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        boolean[] foundList \u003d new boolean[itemsToCheckInModel.length];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        boolean[] allTrueList \u003d new boolean[itemsToCheckInModel.length];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c itemsToCheckInModel.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            foundList[i] \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            allTrueList[i] \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Food food : model.getFilteredFoodList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // TODO: possibly add more convenience functions to our model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (int i \u003d 0; i \u003c itemsToCheckInModel.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                if (food.getName().fullName.equals(itemsToCheckInModel[i])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    foundList[i] \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(allTrueList, foundList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 74
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/macro/NewMacroCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.macro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// Integration tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class NewMacroCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void noMacroDeclaration_throwsCommandException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d new MacroList(Set.of());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NewMacroCommand newMacroCommand \u003d new NewMacroCommand(macroList, \"macro\", new String[]{\"list\"});"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e newMacroCommand.execute(model));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void duplicateDeclaration_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d new MacroList(Set.of(\"test\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NewMacroCommand newMacroCommand \u003d new NewMacroCommand(macroList, \"macro test\", new String[]{\"list\"});"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e newMacroCommand.execute(model));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void validDeclaration_addsToList() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d new MacroList(Set.of());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NewMacroCommand newMacroCommand \u003d new NewMacroCommand(macroList, \"macro test\", new String[]{\"list\"});"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        newMacroCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(macroList.hasMacro(\"test\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 39
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.AbstractParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Parameter\u003cString\u003e makeDummyParameter(String name, String flag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new Parameter\u003c\u003e(name, flag, \"test\", \"test\", (s) -\u003e s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static OptionalParameter\u003cString\u003e makeDummyOptionalParameter(String name, String flag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new OptionalParameter\u003c\u003e(name, flag, \"test\", \"test\", (s) -\u003e s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * Retrieves the rawValue of a command\u0027s parameter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @param command the command to inspect"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @param flag    the desired flag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     * @return the raw value of the parameter, Optional.empty() otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static Optional\u003cString\u003e commandParameterValue(Command command, String flag) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        List\u003cAbstractParameter\u003e parameterList \u003d command.getParameterSet().getParameterList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        for (AbstractParameter parameter : parameterList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            if (parameter.getFlag().equals(flag)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                return parameter.getRawValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static class ParameterStub\u003cT\u003e extends Parameter\u003cT\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final T value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates a parameter with a fixed flag and value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag  flag for parameter"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param value fixed value"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public ParameterStub(String flag, T value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public T consume() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static class OptionalParameterStub\u003cT\u003e extends OptionalParameter\u003cT\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final Optional\u003cT\u003e value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates an optional parameter with a fixed flag and value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag  flag for parameter"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param value fixed value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public OptionalParameterStub(String flag, T value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d Optional.of(value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * Creates an optional parameter with a fixed flag but no value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         * @param flag flag for parameter"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public OptionalParameterStub(String flag) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            super(\"stub\", flag, \"stub\", \"NA\", s -\u003e null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.value \u003d Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public Optional\u003cT\u003e getValue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 27,
      "joeychensmart": 55,
      "-": 8
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/McGymmyParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandExecutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.Macro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.MacroList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.macro.NewMacroCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "// Integration tests for the parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class McGymmyParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void primitiveCommands_getParsed() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // only test these 3 but it should suffice"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable listCommand \u003d mcGymmyParser.parse(\"list\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable addCommand \u003d mcGymmyParser.parse(\"add -n poop -p 200\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(listCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(addCommand instanceof AddCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void macroDefinitions_getParsedCorrectly() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // should also filter out the empty commands, i.e. the \u0027;;\u0027, \u0027;  ;\u0027, etc"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandExecutable output \u003d mcGymmyParser.parse(\"macro test  ;list;; exit  ;;\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(output instanceof NewMacroCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        NewMacroCommand newMacroCommand \u003d (NewMacroCommand) output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"macro test\", newMacroCommand.getArgumentDeclaration());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"list\", \"exit\"}, newMacroCommand.getStatements());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void registeredMacroCommand_getsParsed() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MacroList macroList \u003d mcGymmyParser.getMacroList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro dummyMacro \u003d new Macro(\"test\", new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        macroList.addMacro(dummyMacro);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // this should not throw any errors"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        mcGymmyParser.parse(\"test\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void unknownCommand_parseError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        McGymmyParser mcGymmyParser \u003d new McGymmyParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e mcGymmyParser.parse(\"aisudbhaiuo\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 56
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"+651%)234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_FAT \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_CARB \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_PROTEIN \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FAT \u003d \"1230505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_CARB \u003d \"2134\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseProtein((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseProtein(INVALID_PROTEIN));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_validValueWithoutWhitespace_returnsProtein() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(VALID_PROTEIN));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseProtein_validValueWithWhitespace_returnsTrimmedProtein() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String proteinWithWhitespace \u003d WHITESPACE + VALID_PROTEIN + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Protein expectedProtein \u003d new Protein(VALID_PROTEIN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedProtein, ParserUtil.parseProtein(proteinWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarb((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarb(INVALID_FAT));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_validValueWithoutWhitespace_returnsCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_FAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(expectedCarbohydrate, ParserUtil.parseCarb(VALID_FAT));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseCarb_validValueWithWhitespace_returnsTrimmedCarbohydrate() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String carbohydrateWithWhitespace \u003d WHITESPACE + VALID_FAT + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Carbohydrate expectedCarbohydrate \u003d new Carbohydrate(VALID_FAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(expectedCarbohydrate, ParserUtil.parseCarb(carbohydrateWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFat((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFat(INVALID_CARB));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_validValueWithoutWhitespace_returnsFat() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_CARB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(VALID_CARB));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void parseFat_validValueWithWhitespace_returnsTrimmedFat() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String fatWithWhitespace \u003d WHITESPACE + VALID_CARB + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Fat expectedFat \u003d new Fat(VALID_CARB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(expectedFat, ParserUtil.parseFat(fatWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 11,
      "jh123x": 42,
      "-": 143
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParserCommandsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import jimmy.mcgymmy.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParserCommandsTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void defaultCommands_added() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // if this breaks, you need to add the command in McGymmyParser.addDefaultCommands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] commands \u003d {\"add\", \"edit\", \"delete\", \"clear\", \"find\", \"delete\", \"list\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Set\u003cString\u003e registeredCommands \u003d parser.getRegisteredCommands();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String command : commands) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assertTrue(registeredCommands.contains(command));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String searchString \u003d \"haiufas iuaohbfiasduo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(FindCommand.COMMAND_WORD + \" \" + searchString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof FindCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(searchString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_findEmptyParameter_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(FindCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String indexString \u003d \"68\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(DeleteCommand.COMMAND_WORD + \" \" + indexString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(indexString));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_deleteEmptyParameter_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(DeleteCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String nameString \u003d \"michale json\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String proteinString \u003d \"9912629\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String fatString \u003d \"9993\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String carbString \u003d \"555\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s -n %s -p %s -f %s -c %s\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                nameString,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                proteinString,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                fatString,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                carbString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(commandString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"n\"), Optional.of(nameString));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"p\"), Optional.of(proteinString));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"f\"), Optional.of(fatString));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"c\"), Optional.of(carbString));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_addMissingParameters_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s -p 123\", AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(commandString));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String indexString \u003d \"68\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String proteinString \u003d \"123\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String fatString \u003d \"456\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String carbString \u003d \"789\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String commandString \u003d String.format(\"%s %s -p %s -f %s -c %s\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                indexString,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                proteinString,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                fatString,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                carbString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parser.parse(commandString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof EditCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"\"), Optional.of(indexString));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"n\"), Optional.empty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"p\"), Optional.of(proteinString));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"f\"), Optional.of(fatString));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(CommandParserTestUtil.commandParameterValue(command, \"c\"), Optional.of(carbString));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_editMissingIndex_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"%s -n poop\", EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(commandString));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_helpNoArguments() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandHelpUtil helpUtil \u003d new PrimitiveCommandHelpUtil("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandTable(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandDescriptionTable());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parser.parse(\"help\").execute(model) , helpUtil.newHelpCommand().execute(model));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_helpCommands() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // Should suffice to check \"help [COMMAND]\" works."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrimitiveCommandHelpUtil helpUtil \u003d new PrimitiveCommandHelpUtil("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandTable(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.getCommandDescriptionTable());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String commandName : parser.getRegisteredCommands()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (commandName.equals(\"help\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            assertEquals(parser.parse(\"help \" + commandName).execute(model),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    helpUtil.newHelpCommand(commandName).execute(model));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 31,
      "joeychensmart": 124
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/PrimitiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.OptionalParameter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.parameter.Parameter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class PrimitiveCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_1 \u003d \"abc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_2 \u003d \"cde\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String DUMMY_VALUE_3 \u003d \"fgh\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser parser \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final PrimitiveCommandParser parserWithDummy \u003d new PrimitiveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parserWithDummy.addCommand(\"dummy\", \"dummy\", StubCommand::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommand_correctType() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s -o1 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2, DUMMY_VALUE_3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Command command \u003d (Command) parserWithDummy.parse(commandString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(command instanceof StubCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandAllParameters_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s -o1 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2, DUMMY_VALUE_3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parserWithDummy.parse(commandString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.of(DUMMY_VALUE_3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandOmitOptional_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s\", DUMMY_VALUE_1, DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parserWithDummy.parse(commandString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.empty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandSwapOrder_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t2 %s -o1 %s -t1 %s\", DUMMY_VALUE_2, DUMMY_VALUE_3, DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parserWithDummy.parse(commandString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), DUMMY_VALUE_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.of(DUMMY_VALUE_3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandOmitRequired_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t2 %s\", DUMMY_VALUE_2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parserWithDummy.parse(commandString));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parse_dummyCommandSpacesInParameters_accepted() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String spacedValue1 \u003d \"abc def\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String spacedValue2 \u003d \"a b c d e f g 1 2 3\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandString \u003d String.format(\"dummy -t1 %s -t2 %s\", spacedValue1, spacedValue2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StubCommand stubCommand \u003d (StubCommand) parserWithDummy.parse(commandString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter1(), spacedValue1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getParameter2(), spacedValue2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(stubCommand.getOptionalParameter(), Optional.empty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static class StubCommand extends Command {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private Parameter\u003cString\u003e testParameter1 \u003d CommandParserTestUtil.makeDummyParameter(\"test1\", \"t1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private Parameter\u003cString\u003e testParameter2 \u003d CommandParserTestUtil.makeDummyParameter(\"test2\", \"t2\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private OptionalParameter\u003cString\u003e testOptionalParameter \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                CommandParserTestUtil.makeDummyOptionalParameter(\"opt\", \"o1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testParameter1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testParameter2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.registerParameter(testOptionalParameter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new CommandResult(\"nothing\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String getParameter1() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testParameter1.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String getParameter2() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testParameter2.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public Optional\u003cString\u003e getOptionalParameter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return testOptionalParameter.getValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "joeychensmart": 104
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/OptionalParameterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class OptionalParameterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void optionalParameter_storesCorrectValue() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cInteger\u003e testParameter \u003d new OptionalParameter\u003c\u003e("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"intparam\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"i\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String::length);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testParameter.setValue(\"abcdef\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(testParameter.getValue().map(i -\u003e i + 1), Optional.of(7));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void optionalParameter_keepsParentRawValue() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        OptionalParameter\u003cString\u003e parameter \u003d CommandParserTestUtil.makeDummyOptionalParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(\"poop\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parameter.getRawValue(), Optional.of(\"poop\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 28
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/ParameterSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.exceptions.ParameterConflictException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterSetTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private DefaultParser parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cString\u003e dummyParameter1 \u003d CommandParserTestUtil.makeDummyParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parameter\u003cString\u003e dummyParameter2 \u003d CommandParserTestUtil.makeDummyParameter(\"test2\", \"t2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_newParameter_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_multipleNewParameters_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void add_duplicateParameters_fail() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ParameterSet parameterSet \u003d new ParameterSet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertDoesNotThrow(() -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(ParameterConflictException.class, () -\u003e parameterSet.addParameter(dummyParameter1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "joeychensmart": 37
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/logic/parser/parameter/ParameterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.logic.parser.parameter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class ParameterTest { // TODO: options test, here + optional param"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void parameter_storesCorrectValue() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parameter\u003cInteger\u003e testParameter \u003d new Parameter\u003c\u003e("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"intparam\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"i\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String::length);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testParameter.setValue(\"abcdef\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(testParameter.consume(), 6);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void parameter_keepsParentRawValue() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parameter\u003cString\u003e parameter \u003d CommandParserTestUtil.makeDummyParameter(\"test\", \"t\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        parameter.setValue(\"poop\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(parameter.getRawValue(), Optional.of(\"poop\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "joeychensmart": 28
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/McGymmyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmyTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private final McGymmy mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(Collections.emptyList(), mcGymmy.getFoodList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcGymmy.resetData(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void resetData_withValidReadOnlyMcGymmy_replacesData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy newData \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.resetData(newData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(newData, mcGymmy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void resetData_withDuplicateFoods_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy newData \u003d TypicalFoods.getTypicalDuplicateMcGymmy();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        mcGymmy.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(mcGymmy, newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mcGymmy.hasFood(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void hasFood_foodNotInMcGymmy_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(mcGymmy.hasFood(TypicalFoods.CHICKEN_RICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void hasFood_foodInMcGymmy_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(TypicalFoods.CHICKEN_RICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(mcGymmy.hasFood(TypicalFoods.CHICKEN_RICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInMcGymmy_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(TypicalFoods.CHICKEN_RICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(TypicalFoods.CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(mcGymmy.hasFood(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mcGymmy.getFoodList().remove(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 64,
      "aidoxe-123": 4
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.CHICKEN_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.McGymmyBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(new McGymmy(), new McGymmy(modelManager.getMcGymmy()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"jimmy/mcgymmy/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"new/jimmy/mcgymmy/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_validPath_setsMcGymmyFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path path \u003d Paths.get(\"jimmy/mcgymmy/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.setMcGymmyFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(path, modelManager.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_personNotInMcGymmy_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.hasFood(CHICKEN_RICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void hasFood_personInMcGymmy_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.addFood(CHICKEN_RICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(modelManager.hasFood(CHICKEN_RICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmy \u003d new McGymmyBuilder().withFood(TypicalFoods.CHICKEN_RICE).withFood("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                TypicalFoods.NASI_LEMAK).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy differentMcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager \u003d new ModelManager(mcGymmy, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mcGymmy, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different mcGymmy -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMcGymmy, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String[] keywords \u003d CHICKEN_RICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mcGymmy, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        modelManager.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        differentUserPrefs.setMcGymmyFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mcGymmy, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 38,
      "-": 94
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void setMcGymmyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMcGymmyFilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 3,
      "-": 17
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/CarbohydrateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class CarbohydrateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidCarbohydrate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String invalidCarb \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new Carbohydrate(Integer.parseInt(invalidCarb)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void carbohydrate_isValid_correct() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // null carbohydrate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Carbohydrate.isValid(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // invalid carbohydrates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(Carbohydrate.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // valid carbohydrates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"1234\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"123456\")); // one character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(Carbohydrate.isValid(\"132454897\")); // long carbohydrate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 32
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FatTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new Fat(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String invalidFat \u003d \"12@123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new Fat(Integer.parseInt(invalidFat)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void fat_isValid_correct() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // null fat"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Fat.isValid(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // blank fat"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"12314-\")); // invalid fat name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"123_345\")); // underscore in fat name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\" 1234\")); // leading space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"1234 \")); // trailing space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertFalse(Fat.isValid(\"-1234\")); // negative value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // valid fat"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"123412\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"911\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertTrue(Fat.isValid(\"123456789\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 39
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Name VALID_FOOD_NAME \u003d new Name(\"test food\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Name VALID_FOOD_NAME_2 \u003d new Name(\"test food 2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final String INVALID_FOOD_NAME \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Protein PROTEIN \u003d new Protein(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Protein PROTEIN_1 \u003d new Protein(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Carbohydrate CARBOHYDRATE \u003d new Carbohydrate(3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Carbohydrate CARBOHYDRATE_1 \u003d new Carbohydrate(4);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Fat FAT \u003d new Fat(4);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static final Fat FAT_1 \u003d new Fat(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food COMPARED_FOOD \u003d new Food(VALID_FOOD_NAME, PROTEIN, FAT, CARBOHYDRATE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food SAME_AS_COMPARED_FOOD \u003d new Food(VALID_FOOD_NAME, PROTEIN, FAT, CARBOHYDRATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food FOOD_W_DIFFERENT_NAME \u003d new Food(VALID_FOOD_NAME_2, PROTEIN, FAT, CARBOHYDRATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food FOOD_W_DIFFERENT_PROTEIN \u003d new Food(VALID_FOOD_NAME, PROTEIN_1, FAT, CARBOHYDRATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food FOOD_W_DIFFERENT_CARBS \u003d new Food(VALID_FOOD_NAME, PROTEIN, FAT_1, CARBOHYDRATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food FOOD_W_DIFFERENT_FAT \u003d new Food(VALID_FOOD_NAME, PROTEIN, FAT, CARBOHYDRATE_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullProtein_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(VALID_FOOD_NAME, null, FAT, CARBOHYDRATE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullCarbohydrate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(VALID_FOOD_NAME, PROTEIN, FAT, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_nullFat_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(VALID_FOOD_NAME, PROTEIN, null, CARBOHYDRATE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                new Food(new Name(INVALID_FOOD_NAME), PROTEIN, FAT, CARBOHYDRATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        String expected1 \u003d \"Food:test food\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"protein: 2\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"carbs: 3\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"fat: 4\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(COMPARED_FOOD.toString(), expected1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        String expected2 \u003d \"Food:test food2\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"protein: 100\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"carbs: 20\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "                + \"fat: 10\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"test food2\", 100, 10, 20).toString(), expected2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    public void getCaloriesTest() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"water\", 0, 0, 0).getCalories(), 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenbreast\", 30, 0, 0).getCalories(), 120);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenRice\", 0, 0, 30).getCalories(), 120);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"sesameOil\", 0, 10, 0).getCalories(), 90);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "        assertEquals(new Food(\"chimkenRiceSet\", 30, 10, 30).getCalories(), 330);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dcchan98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dcchan98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(COMPARED_FOOD, COMPARED_FOOD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different object all field are the same -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(COMPARED_FOOD, SAME_AS_COMPARED_FOOD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(COMPARED_FOOD.equals(FOOD_W_DIFFERENT_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different protein -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(COMPARED_FOOD.equals(FOOD_W_DIFFERENT_PROTEIN));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different carbohydrate -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(COMPARED_FOOD.equals(FOOD_W_DIFFERENT_CARBS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different fat -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(COMPARED_FOOD.equals(FOOD_W_DIFFERENT_FAT));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(COMPARED_FOOD.equals(PROTEIN));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 8,
      "dcchan98": 27,
      "jh123x": 19,
      "aidoxe-123": 57
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/FridgeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class FridgeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Food CHIMKEN \u003d new Food(\"Chimken\", 1, 2, 3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Food RAMEN \u003d new Food(\"Ramen\", 2, 3, 4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private Fridge fridge;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void beforeEachTestMethod() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(fridge.contains(CHIMKEN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.add(CHIMKEN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(fridge.contains(CHIMKEN));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.add(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_indexLessThanZero_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.setFood(Index.fromZeroBased(-1), CHIMKEN));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_indexLargerThanOrEqualToSize_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.setFood(Index.fromZeroBased(1), CHIMKEN));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFood(Index.fromZeroBased(1), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFood_validFood_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.add(CHIMKEN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.setFood(Index.fromZeroBased(0), RAMEN);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedFridge.add(RAMEN);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, this.fridge);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_removeIndexLesserThanZero_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.remove(Index.fromZeroBased(-1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_removeIndexLargerThanOrEqualToSize_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e fridge.remove(Index.fromZeroBased(-1)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void remove_validIndex_removesFood() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.add(CHIMKEN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.remove(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_nullFridge_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFoods((Fridge) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_fridge_replacesOwnListWithProvidedFridge() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.add(CHIMKEN);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedFridge.add(RAMEN);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.setFoods(expectedFridge);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fridge.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.add(CHIMKEN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(RAMEN);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        fridge.setFoods(foodList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        Fridge expectedFridge \u003d new Fridge();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        expectedFridge.add(RAMEN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(expectedFridge, fridge);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e fridge.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 14,
      "aidoxe-123": 110
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/MacronutrientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "class MacronutrientTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Fat DEFAULT_FAT_1 \u003d new Fat(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Fat DEFAULT_FAT_2 \u003d new Fat(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Fat DEFAULT_FAT_3 \u003d new Fat(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Protein DEFAULT_PROTEIN_1 \u003d new Protein(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Macronutrient MACRONUTRIENT_1 \u003d new MacronutrientStub(4, 9);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    private static final Macronutrient MACRONUTRIENT_2 \u003d new MacronutrientStub(9, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void amount_lesserThanZero_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "                new MacronutrientStub(-1, 4));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // identical -\u003e return true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(DEFAULT_FAT_1.equals(DEFAULT_FAT_1)); // identical"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same type same amount -\u003e return true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertTrue(DEFAULT_FAT_1.equals(DEFAULT_FAT_2)); // same type same amount"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same type differnet amount -\u003e return false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(DEFAULT_FAT_1.equals(DEFAULT_FAT_3));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(DEFAULT_FAT_1.equals(DEFAULT_PROTEIN_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // not instanceof Macronutrient -\u003e return false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(DEFAULT_FAT_1.equals(\"dummy string object\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // same type, same totalCalories, different amount -\u003e return false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertFalse(MACRONUTRIENT_1.equals(MACRONUTRIENT_2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public void getTotalCalories() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        assertEquals(new MacronutrientStub(4, 4).getTotalCalories(), 16);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static class MacronutrientStub extends Macronutrient {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        MacronutrientStub(int amount, int caloricMultiplier) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            super(amount, caloricMultiplier);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 7,
      "aidoxe-123": 49
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Alice Bob\")).build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Alice Bob\")).build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Alice Carol\")).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(new Name(\"Alice Bob\")).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Alice\")).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Alice Bob\")).build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"54321\", \"67\", \"89\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(new Name(\"Alice\")).withProtein(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                .withFat(\"54321\").withCarb(\"6789\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "jh123x": 10,
      "-": 63
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "jh123x": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/food/ProteinTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class ProteinTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new Protein(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void constructor_invalidProtein_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String invalidProtein \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Protein(invalidProtein));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void protein_isValid_correct() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // null protein number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Protein.isValid(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // invalid protein numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"protein\")); // non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertFalse(Protein.isValid(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        // valid protein numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"911\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"93121534\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertTrue(Protein.isValid(\"124293842033123\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 4,
      "jh123x": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@ice\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_PROTEIN \u003d \"512%)34\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final String INVALID_FAT \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_CARBS \u003d \"123.132\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String INVALID_TAG \u003d \"##lucnsh\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalFoods.NASI_LEMAK.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_PROTEIN \u003d Integer.toString(TypicalFoods.NASI_LEMAK.getProtein().getAmount());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_FAT \u003d Integer.toString(TypicalFoods.NASI_LEMAK.getFat().getAmount());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final String VALID_CARBS \u003d Integer.toString(TypicalFoods.NASI_LEMAK.getCarbs().getAmount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalFoods.NASI_LEMAK.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_validFoodDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(TypicalFoods.NASI_LEMAK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Assertions.assertEquals(TypicalFoods.NASI_LEMAK, food.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new JsonAdaptedFood(INVALID_NAME, VALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                String.format(JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidProtein_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, INVALID_PROTEIN, VALID_FAT, VALID_CARBS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Protein.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidFat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, INVALID_FAT, VALID_CARBS, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String val \u003d VALID_PROTEIN;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        String val2 \u003d INVALID_FAT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Fat.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidCarbs_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, VALID_FAT, INVALID_CARBS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        String expectedMessage \u003d Carbohydrate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PROTEIN, VALID_FAT, VALID_CARBS, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 69,
      "jh123x": 23
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonMcGymmyStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.HOT_PLATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.TypicalFoods.INDOMEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonMcGymmyStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMcGymmyStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMcGymmy(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMcGymmy\u003e readMcGymmy(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new JsonMcGymmyStorage(Paths.get(filePath)).readMcGymmy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertFalse(readMcGymmy(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"notJsonFormatMcGymmy.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_invalidFoodMcGymmy_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"invalidFoodMcGymmy.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readMcGymmy_invalidAndValidFoodMcGymmy_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMcGymmy(\"invalidAndValidFoodMcGymmy.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void readAndSaveMcGymmy_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMcGymmy.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy original \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage jsonMcGymmyStorage \u003d new JsonMcGymmyStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy readBack \u003d jsonMcGymmyStorage.readMcGymmy(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        original.addFood(HOT_PLATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        original.removeFood(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        readBack \u003d jsonMcGymmyStorage.readMcGymmy(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        original.addFood(INDOMEE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        jsonMcGymmyStorage.saveMcGymmy(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        readBack \u003d jsonMcGymmyStorage.readMcGymmy().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy_nullMcGymmy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcGymmy(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Saves {@code mcGymmy} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private void saveMcGymmy(ReadOnlyMcGymmy mcGymmy, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            new JsonMcGymmyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                    .saveMcGymmy(mcGymmy, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void saveMcGymmy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMcGymmy(new McGymmy(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 105,
      "aidoxe-123": 2
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonSerializableMcGymmyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class JsonSerializableMcGymmyTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMcGymmyTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path TYPICAL_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodMcGymmy.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_typicalFoodFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonSerializableMcGymmy dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                JsonSerializableMcGymmy.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mcGymmyFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        McGymmy typicalFoodMcGymmy \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertEquals(mcGymmyFromFile, typicalFoodMcGymmy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonSerializableMcGymmy dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                JsonSerializableMcGymmy.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public void toModelType_duplicateFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        JsonSerializableMcGymmy dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                JsonSerializableMcGymmy.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMcGymmy.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 12,
      "jh123x": 35
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        userPrefs.setMcGymmyFilePath(Paths.get(\"mcgymmy.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 5,
      "jh123x": 1,
      "-": 116
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.ReadOnlyMcGymmy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        JsonMcGymmyStorage mcGymmyStorage \u003d new JsonMcGymmyStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        storageManager \u003d new StorageManager(mcGymmyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void mcGymmyReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "         * {@link JsonMcGymmyStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMcGymmyStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy original \u003d TypicalFoods.getTypicalMcGymmy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        storageManager.saveMcGymmy(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        ReadOnlyMcGymmy retrieved \u003d storageManager.readMcGymmy().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertEquals(original, new McGymmy(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public void getMcGymmyFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        assertNotNull(storageManager.getMcGymmyFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Carbohydrate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Fat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Protein;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_PROTEIN \u003d 123456;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_FAT \u003d 123456;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Integer DEFAULT_CARB \u003d 123456;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Protein protein;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Carbohydrate carbohydrate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Creates a {@code FoodBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d new Protein(DEFAULT_PROTEIN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate \u003d new Carbohydrate(DEFAULT_CARB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        protein \u003d foodToCopy.getProtein();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        carbohydrate \u003d foodToCopy.getCarbs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withName(Name name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Carbohydrate} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withCarb(String carb) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.carbohydrate \u003d new Carbohydrate(Integer.parseInt(carb));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Protein} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withProtein(String protein) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.protein \u003d new Protein(Integer.parseInt(protein));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.fat \u003d new Fat(Integer.parseInt(fat));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new Food(name, protein, fat, carbohydrate, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 96
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/McGymmyBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class to help with building McGymmy objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * {@code McGymmy ab \u003d new McGymmyBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class McGymmyBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private McGymmy mcGymmy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy \u003d new McGymmy();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder(McGymmy mcGymmy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        this.mcGymmy \u003d mcGymmy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Adds a new {@code Food} to the {@code McGymmy} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmyBuilder withFood(Food person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        mcGymmy.addFood(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public McGymmy build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mcGymmy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jh123x": 34
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static Food getFood(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "jh123x": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TypicalFoods.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jh123x"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.McGymmy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jh123x"
        },
        "content": "import jimmy.mcgymmy.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jh123x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jh123x"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jh123x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jh123x"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withName(new Name(\"Chicken Rice\"))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withProtein(\"94351253\").withFat(\"123\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withCarb(\"456\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food NASI_LEMAK \u003d new FoodBuilder().withName(new Name(\"Nasi Alamak\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withProtein(\"98765432\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"321\").withCarb(\"123\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .withTags(\"dinner\", \"lunch\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food CRISPY_FRIED_FISH \u003d new FoodBuilder().withName(new Name(\"Crispy Fried Fish\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .withProtein(\"95352563\").withFat(\"456\").withCarb(\"654\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food DANISH_COOKIES \u003d new FoodBuilder().withName(new Name(\"Danish Cookies\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            .withProtein(\"87652533\").withFat(\"654\").withCarb(\"456\").withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food EGGS \u003d new FoodBuilder().withName(new Name(\"Eggs\")).withProtein(\"9482224\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"246\").withCarb(\"810\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food FRUIT_CAKE \u003d new FoodBuilder().withName(new Name(\"Fruit Cake\")).withProtein(\"9482427\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"987\").withCarb(\"789\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food GINGERBREAD \u003d new FoodBuilder().withName(new Name(\"Gingerbread\")).withProtein(\"9482442\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"789\").withCarb(\"987\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food HOT_PLATE \u003d new FoodBuilder().withName(new Name(\"Hot Plate\")).withProtein(\"8482424\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"1234\").withCarb(\"1234\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food INDOMEE \u003d new FoodBuilder().withName(new Name(\"Indomee\")).withProtein(\"8482131\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"1234\").withCarb(\"1234\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food APPLE \u003d new FoodBuilder().withName(new Name(\"Apple\")).withProtein(\"88888888\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"1234\").withCarb(\"1234\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final Food BEANS \u003d new FoodBuilder().withName(new Name(\"beans\")).withProtein(\"88888888\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "            .withFat(\"1234\").withCarb(\"1234\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static final String KEYWORD_MATCHING_RICE \u003d \"Rice\"; // A keyword that matches RICE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    private TypicalFoods() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Returns an {@code McGymmy} with all the typical foods."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jh123x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static McGymmy getTypicalMcGymmy() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        McGymmy mg \u003d new McGymmy();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jh123x"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return mg;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jh123x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     * Returns an {@code McGymmy} with each of the typical food duplicated once."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    public static McGymmy getTypicalDuplicateMcGymmy() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        McGymmy mg \u003d new McGymmy();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        // each item is duplicated once"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        for (Food food : getTypicalFoodItems()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "            mg.addFood(food);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "        return mg;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidoxe-123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoodItems() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jh123x"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHICKEN_RICE, NASI_LEMAK, CRISPY_FRIED_FISH, DANISH_COOKIES, EGGS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jh123x"
        },
        "content": "                FRUIT_CAKE, GINGERBREAD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jh123x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jh123x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 11,
      "jh123x": 55,
      "aidoxe-123": 16
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewypiano"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewypiano": 6,
      "-": 7
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/jimmy/mcgymmy/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "package jimmy.mcgymmy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import static jimmy.mcgymmy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "import jimmy.mcgymmy.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import jimmy.mcgymmy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003c?import jimmy.mcgymmy.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewypiano"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chewypiano": 3,
      "-": 4
    }
  }
]
